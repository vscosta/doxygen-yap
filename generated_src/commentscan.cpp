#line 2 "/Users/vsc/github/doxygen-yap/generated_src/commentscan.cpp"

#line 4 "/Users/vsc/github/doxygen-yap/generated_src/commentscan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 232
#define YY_END_OF_BUFFER 233
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1478] =
    {   0,
      106,  106,  150,  150,  164,  164,  179,  179,  223,  223,
      170,  170,  233,  232,  232,  232,  232,  232,  232,   49,
      232,   49,  232,   48,  232,   49,  232,   49,  232,   49,
      232,   49,  232,   49,  232,   49,  232,   49,  232,   47,
       49,  232,   49,  232,   49,  232,   49,  232,   49,  232,
       30,   49,  232,   49,  232,   30,   49,  232,   49,  232,
       49,  232,   49,  232,   49,  232,   47,   49,  232,   49,
      232,   49,  232,   49,  232,  119,  232,  118,  232,  119,
      232,  116,  119,  232,  119,  232,  119,  232,  232,  120,
      232,  140,  232,  139,  232,  140,  232,  137,  140,  232,

      140,  232,  101,  232,  101,  232,  100,  232,  101,  232,
      101,  232,  101,  232,   97,  101,  232,  101,  232,  101,
      232,  105,  232,  104,  232,  105,  232,  102,  105,  232,
      105,  232,  105,  232,  105,  232,  109,  232,  108,  232,
      106,  109,  232,  106,  109,  232,  109,  232,  106,  109,
      232,  106,  109,  232,  109,  232,  101,  232,  100,  232,
      101,  232,  101,  232,  101,  232,  101,  232,  101,  232,
      128,  232,  127,  232,  125,  128,  232,  128,  232,  132,
      232,  131,  232,  132,  232,  132,  232,  136,  232,  135,
      232,  136,  232,  136,  232,  124,  232,  121,  232,  124,

      232,  122,  124,  232,  124,  232,  124,  232,   63,  232,
       62,  232,   63,  232,   60,   63,  232,   63,  232,   67,
      232,   67,  232,   66,  232,   67,  232,   67,  232,   67,
      232,   64,   67,  232,   67,  232,   67,  232,   71,  232,
       70,  232,   71,  232,   68,   71,  232,   71,  232,  112,
      232,  110,  232,  232,  114,  232,  115,  232,  232,  146,
      232,  145,  232,  144,  146,  232,  146,  232,  150,  153,
      232,  147,  232,  150,  153,  232,  153,  232,  153,  232,
      155,  232,  154,  232,  232,  158,  232,  158,  232,  156,
      232,  158,  232,  158,  232,  164,  168,  232,  165,  232,

      168,  232,  168,  232,  168,  232,  168,  232,  168,  232,
      143,  232,  141,  232,  143,  232,  177,  232,  177,  232,
      175,  232,  169,  177,  232,  174,  177,  232,  177,  232,
      180,  232,  179,  180,  232,  178,  232,  180,  232,  187,
      188,  232,  186,  232,  188,  232,  188,  232,  188,  232,
      198,  199,  232,  189,  232,  199,  232,  199,  232,  199,
      232,  202,  232,  200,  232,  202,  232,  206,  232,  204,
      232,  203,  206,  232,  206,  232,  209,  212,  232,  207,
      232,  210,  212,  232,  211,  212,  232,  212,  232,  212,
      232,  215,  232,  213,  232,  215,  232,  218,  232,  217,

      232,  218,  232,  216,  218,  232,  218,  232,  221,  232,
      220,  232,  221,  232,  219,  221,  232,  221,  232,   57,
       59,  232,   58,  232,   59,  232,   59,  232,  161,  232,
      160,  232,  159,  161,  232,  161,  232,   52,   53,  232,
       51,  232,   53,  232,   53,  232,  223,  225,  232,  224,
      232,  225,  232,  225,  232,  225,  232,  228,  232,  227,
      232,  226,  228,  232,  228,  232,  230,  231,  232,  229,
      232,  231,  232,  170,  232,  170,  173,  232,  171,  232,
      172,  232,   80,  232,   80,  232,   74,   80,  232,   80,
      232,   80,  232,   74,   80,  232,   80,  232,   80,  232,

       74,   80,  232,   80,  232,   74,   80,  232,  232,   79,
      232,   78,  232,   83,  232,   81,   83,  232,   82,  232,
       83,  232,  232,   90,   92,   84,   91,   85,   46,    4,
       39,   41,   43,   41,   29,   29,   29,   21,   29,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   27,   28,
       23,   29,   30,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   30,   33,   34,   39,   31,  116,
      116,  117,  116,  120,  137,  137,  138,   97,   97,   99,

       97,  102,  102,  103,  102,  106,  106,  106,  106,  106,
      106,  107,  106,  125,  126,  129,  130,  134,  133,  134,
      122,  122,  123,  122,   60,   60,   60,   61,   64,   64,
       65,   64,   68,   68,   69,  110,  111,  114,  113,  144,
      150,  147,  150,  152,  152,  149,  154,  157,  164,  167,
      166,  142,  169,  174,  176,  179,  178,  187,  198,  201,
      203,  205,  209,  208,  214,  216,  216,  219,  219,   57,
      159,   52,  223,  222,  226,  230,  170,   74,   74,   74,
       74,   73,   74,   74,   74,   79,   78,   81,   95,   92,
       92,   29,   21,   23,   29,    6,   40,   38,   45,   45,

       41,   45,   45,   45,   45,   41,   45,   45,   45,   42,
        9,   37,    1,    1,    2,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   25,   26,   21,
       21,   21,   21, 8200,   21,16392,   21,   21,   21,   21,
       21,   21,   21,   21, 8200,   21,16392,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   23,   23,
        5,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21, 8200,   21,16392,
       21,   21,   21,   21,   21,   21,   21,   21, 8200,   21,
    16392,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   35,   38,   32,  116,  116,  137,   97,   97,
      102,  102,  106,  106,  106,  125,  122,  122,   60,   60,
       60,   60,   60,   64,   64,   68,   68,  110,  144,  151,
      154,  203,  216,  219,   54,   55,   56,  159,   50,  222,
      226,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       74,   74,   74,   74,   74,   75,   74,   74,   74,   74,
       93,   45,   45,   19,   36,    1,   22,    2, 8200,   21,
    16392,   21,   21, 8199,   21,16391,   21,   21,   21,   21,
     8200,   21,16392,   21,   21,   21,   21,   21,   21,   21,
       21, 8200, 8200,   21,   21,   21, 8200,   21,16392,   21,

       21, 8200,   21,16392,   21, 8200,   21,16392,   21,   21,
       21,   21, 8200,   21,16392,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21, 8200,   21,16392,   21,
       21, 8199,   21,16391,   21,   21,   21,   21, 8200,   21,
    16392,   21,   21,   21,   21,   21,   21,   21,   21,    5,
     8200,   21,   21, 8200,   21,16392,   21,   21, 8200,   21,
    16392,   21, 8200,   21,16392,   21,   21,   21,   21, 8200,
       21,16392,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  116,   96,   97,  102,  106,  106,   98,  122,
       60,   60,   60,   60,   64,   68,  151,  182,  190,   50,

      226,   75,   72,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   75,   74,   74,   75,   74,   74,
       74,   74,   74,   74,   77,   77,   94,   95,   86,   18,
       44,    9,   16,   21,   21, 8199, 8199,   21,   21,   21,
       21,   21,   24,   21,   21,   21,   21,   21,   21, 8200,
       21,16392,   21, 8200,   21,16392,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,    5, 8199,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21, 8200,   21,16392,   21,
     8200,   21,16392,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,  116,  102,
      106,  122,   60,   68,  151,   75,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   76,   87,
        3,    3,   17,   10,   21,   21,   21,   21,   21,   21,
       24,   21,   21, 8200,   21,16392,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
     8200,   21,16392,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21, 8200,   21,16392,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21, 8200,   21,16392,   21,   21,   21,

       21,   21,  116,  102,  106,  122,  110,  184,  192,   74,
       74,   74,   76,   88,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
     8200,   21,16392,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21, 8200,
       21,16392,   21,   21,   21,   21,   21,   21,   21,   21,
       21,  116,  102,  106,  122,  163,  183,  181,  191,   89,
       21,   21,   21,   21,   21, 8200,   21,16392,   21,   21,
       21,   21,   21, 8200,   21,16392, 8200,   21,16392,   21,

       21,   21,   21,   21, 8200,   21,16392,   21,   21,   21,
       21,   21,   21,   21, 8200,   21,16392,   21,   21,   21,
       21,   21, 8200,   21,16392, 8200,   21,16392,   21,   21,
       21,   21,   21, 8200,   21,16392,   21,  116,  118,  139,
      100,  102,  104,  106,  108,  127,  131,  135,  121,  122,
       62,   66,   70,  112,  115,  145,  148,  155,  156,  162,
      165,  141,  175,  185,  186,  189,  200,  204,  207,  213,
      217,  220,  160,   51,  224,  227,  229,   15,   12,   11,
       21,   21,   21,   21,   21, 8200,   21,16392,   21,   21,
       21,   21,   21,   21,   21,   21,   21,    5,   21,   21,

       21,   21,   21, 8200,   21,16392,   21,   21,   21,   21,
       21,   21,   21,   21,  193,   14,   13,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,  196,
       20,   21,   21,   21, 8200,   21,16392,   21,   20,   21,
       21,   21, 8200,   21,16392,   21,  197,  194,   20,   21,
       21,   21,   21,   21,  197,  195,   46
    } ;

static yyconst flex_int16_t yy_accept[1953] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   14,   15,   16,   17,   18,   19,   20,

       22,   24,   26,   28,   30,   32,   34,   36,   38,   40,
       43,   45,   47,   49,   51,   54,   56,   59,   61,   63,
       65,   67,   70,   72,   74,   76,   78,   80,   82,   85,
       87,   89,   90,   92,   94,   96,   98,  101,  103,  105,
      107,  109,  111,  113,  115,  118,  120,  122,  124,  126,
      128,  131,  133,  135,  137,  139,  141,  144,  147,  149,
      152,  155,  157,  159,  161,  163,  165,  167,  169,  171,
      173,  175,  178,  180,  182,  184,  186,  188,  190,  192,
      194,  196,  198,  200,  202,  205,  207,  209,  211,  213,
      215,  218,  220,  222,  224,  226,  228,  230,  232,  235,

      237,  239,  241,  243,  245,  248,  250,  252,  254,  255,
      257,  259,  260,  262,  264,  267,  269,  272,  274,  277,
      279,  281,  283,  285,  286,  288,  290,  292,  294,  296,
      299,  301,  303,  305,  307,  309,  311,  313,  315,  317,
      319,  321,  323,  326,  329,  331,  333,  336,  338,  340,
      343,  345,  347,  349,  351,  354,  356,  358,  360,  362,
      364,  366,  368,  370,  372,  375,  377,  380,  382,  385,
      388,  390,  392,  394,  396,  398,  400,  402,  404,  407,
      409,  411,  413,  415,  418,  420,  423,  425,  427,  429,
      431,  433,  436,  438,  441,  443,  445,  447,  450,  452,

      454,  456,  458,  460,  462,  465,  467,  470,  472,  474,
      476,  479,  481,  483,  485,  487,  490,  492,  494,  497,
      499,  501,  504,  506,  509,  510,  512,  514,  516,  519,
      521,  523,  524,  525,  526,  527,  528,  529,  529,  529,
      529,  529,  529,  529,  529,  530,  530,  530,  530,  530,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      532,  533,  534,  534,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  536,
      537,  537,  538,  539,  540,  541,  542,  543,  544,  545,
      546,  547,  548,  549,  550,  551,  552,  553,  554,  555,

      556,  557,  558,  559,  560,  561,  563,  564,  565,  566,
      567,  568,  569,  570,  571,  572,  573,  574,  575,  576,
      577,  578,  579,  580,  581,  582,  583,  584,  585,  585,
      586,  586,  586,  586,  586,  586,  586,  587,  588,  589,
      589,  589,  590,  590,  590,  590,  590,  590,  590,  591,
      592,  592,  592,  592,  593,  594,  594,  595,  596,  596,
      596,  597,  597,  597,  598,  598,  598,  598,  598,  598,
      599,  599,  599,  599,  600,  600,  600,  601,  601,  601,
      601,  602,  602,  603,  604,  604,  604,  604,  605,  606,
      606,  607,  608,  608,  609,  610,  611,  611,  611,  612,

      612,  613,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  615,  615,  615,
      616,  616,  616,  617,  617,  619,  619,  619,  620,  620,
      621,  621,  621,  622,  623,  623,  623,  623,  624,  625,
      626,  626,  626,  626,  627,  627,  628,  628,  629,  629,
      629,  629,  629,  629,  630,  630,  630,  630,  631,  631,
      632,  632,  632,  632,  633,  634,  634,  634,  635,  635,
      636,  636,  637,  637,  637,  637,  638,  638,  639,  639,
      640,  640,  641,  641,  641,  642,  643,  644,  644,  645,
      646,  646,  647,  647,  648,  648,  648,  648,  648,  648,

      649,  649,  650,  651,  652,  652,  652,  652,  653,  653,
      653,  654,  655,  655,  656,  656,  657,  658,  658,  658,
      659,  659,  659,  659,  660,  660,  660,  660,  660,  660,
      660,  661,  661,  662,  662,  662,  663,  663,  664,  664,
      665,  665,  665,  666,  666,  667,  667,  667,  668,  668,
      668,  669,  669,  669,  670,  670,  670,  671,  671,  671,
      672,  672,  672,  673,  673,  673,  674,  675,  675,  676,
      676,  676,  677,  677,  678,  678,  679,  679,  679,  680,
      680,  680,  681,  681,  682,  682,  683,  683,  683,  684,
      684,  684,  685,  685,  685,  686,  686,  687,  688,  688,

      688,  689,  689,  689,  689,  690,  690,  690,  691,  692,
      692,  692,  693,  694,  696,  696,  696,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  698,
      699,  700,  701,  703,  704,  705,  706,  708,  709,  710,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      712,  712,  712,  712,  712,  712,  713,  714,  715,  716,
      717,  718,  719,  720,  721,  722,  723,  724,  725,  726,
      727,  728,  729,  730,  730,  731,  732,  733,  734,  737,
      738,  739,  740,  741,  742,  743,  744,  745,  748,  749,

      750,  751,  752,  753,  754,  755,  756,  757,  758,  759,
      760,  761,  762,  763,  764,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  776,  777,  778,  781,
      782,  783,  784,  785,  786,  787,  788,  789,  792,  793,
      794,  795,  796,  797,  798,  799,  800,  801,  802,  803,
      803,  803,  803,  803,  804,  805,  805,  805,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  810,
      810,  810,  810,  811,  812,  812,  813,  814,  814,  815,
      815,  816,  816,  816,  816,  816,  816,  817,  817,  817,
      817,  818,  818,  819,  820,  821,  822,  822,  823,  824,

      824,  825,  825,  825,  826,  826,  827,  828,  828,  828,
      829,  829,  829,  830,  830,  830,  831,  831,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  833,  833,  833,
      833,  833,  834,  834,  834,  835,  835,  836,  837,  838,
      839,  839,  839,  840,  840,  841,  841,  842,  842,  842,
      843,  843,  843,  844,  844,  845,  846,  846,  846,  846,
      847,  847,  848,  849,  849,  849,  850,  850,  851,  852,
      852,  853,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  863,  864,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      866,  867,  868,  869,  872,  873,  874,  877,  878,  879,
      880,  881,  884,  885,  886,  886,  887,  888,  889,  890,
      891,  892,  893,  895,  896,  897,  900,  901,  902,  905,
      906,  909,  910,  911,  912,  913,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  926,  927,  930,
      931,  932,  935,  936,  937,  938,  939,  942,  943,  944,

      945,  946,  947,  948,  949,  950,  952,  953,  954,  957,
      958,  959,  962,  963,  966,  967,  968,  969,  970,  973,
      974,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  984,  984,
      984,  985,  985,  985,  986,  987,  988,  988,  989,  990,
      990,  990,  990,  990,  991,  991,  991,  992,  993,  994,
      995,  995,  995,  996,  996,  997,  997,  997,  997,  997,
      997,  997,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  999,  999,  999,  999, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1001, 1001, 1001, 1002, 1002, 1002, 1003, 1003, 1004, 1005,
     1005, 1006, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1029, 1030, 1030, 1030, 1031, 1031, 1031, 1031,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1034, 1034, 1034,
     1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1057, 1058,
     1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,

     1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1111, 1112,
     1112, 1112, 1112, 1113, 1113, 1114, 1114, 1114, 1115, 1115,
     1115, 1115, 1115, 1115, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1126, 1127, 1128, 1128, 1128, 1128, 1129, 1129, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1131, 1131, 1131, 1132, 1133, 1134, 1134, 1134, 1134, 1134,
     1135, 1135, 1135, 1135, 1135, 1136, 1137, 1138, 1139, 1140,
     1141, 1142, 1143, 1144, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164,
     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198,

     1199, 1200, 1201, 1202, 1203, 1204, 1204, 1204, 1205, 1206,
     1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1211, 1212, 1213, 1213,
     1213, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,

     1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
     1258, 1259, 1260, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1273, 1273, 1274, 1275, 1275, 1275,
     1275, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1278, 1279,
     1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,

     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1282, 1283, 1284, 1285, 1286, 1289, 1290, 1291,
     1292, 1293, 1294, 1297, 1300, 1301, 1302, 1303, 1304, 1305,
     1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1318, 1319,
     1320, 1321, 1322, 1323, 1326, 1329, 1330, 1331, 1332, 1333,
     1334, 1337, 1338, 1340, 1341, 1342, 1344, 1346, 1347, 1348,
     1349, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1362, 1363, 1364, 1365, 1366, 1366, 1366, 1366, 1366, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,

     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
     1401, 1402, 1403, 1404, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416, 1417, 1418,
     1418, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
     1427, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1437, 1438, 1439, 1440, 1441,

     1442, 1443, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451,
     1453, 1454, 1455, 1458, 1459, 1459, 1461, 1462, 1463, 1466,
     1467, 1467, 1467, 1468, 1469, 1469, 1471, 1472, 1473, 1473,
     1474, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
     1478, 1478
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   35,   35,   39,   40,   41,   42,   43,
       35,   44,   35,   45,   46,   35,   35,   35,   35,   35,
       47,   48,   49,   50,   51,   50,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   61,   68,   69,   70,   71,   72,   73,   74,
       75,   61,   76,   77,   78,   79,    1,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80
    } ;

static yyconst flex_int32_t yy_meta[81] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
        8,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,    1,   27,    1,   15,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   30,
       29,   29,   29,   29,   31,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   32,   33,   34,   35,   36
    } ;

static yyconst flex_int16_t yy_base[2287] =
    {   0,
        0,    1,   78,  157,  234,  313, 7968, 7965,  392,    0,
      472,    0,  552,  631,  710,  789,  868,    0,  948,    0,
        0,    2,    3,    5, 1028, 1107, 1186,    0, 1266,    0,
     1346,    0, 1426,    0,    8,   10, 1506,    0,   14,   16,
     1586,    0,   18,  158,   28,  163,   13,   26, 1666,    0,
      181,  185,  164,  194,  197,  222,  161,  167, 1746,    0,
      201,  251,  170,  173, 1826,    0, 1906,    0,  273,  276,
      301,  304, 1986,    0,  207,  286,  339,  340, 2066,    0,
      217,  219,   56,   60, 2146,    0,   19,   21,   36,  214,
     7960, 7957, 7845,18616, 7767, 7766,   26,   44, 7825,18616,

      558,  579,   48, 7809,    0, 7806, 2219,  162, 2291, 2363,
     7800, 2435, 2509, 2581,  355, 2653,  574,  670,  189,  269,
      270, 2731,  270,  666,  744,18616,18616, 7795,  250,  332,
     1067, 7797,18616,18616,18616,    0,  277,  602,18616,  659,
      748, 1079, 2247, 7742,  760,  609,  362,18616,18616, 7749,
      567,  598, 7713, 2273,18616,18616, 2810,  679,  804, 1041,
    18616, 2345,  830,  838, 2259, 2326, 7703, 1141,  771,18616,
    18616, 7694,  767,18616,18616, 7694,  779,18616,18616, 7677,
     1089,18616,18616, 7672,  600,  647, 2396,18616,18616,    0,
     2418, 1096,18616, 1147, 2427, 2464, 2486, 7654, 2474, 2238,

      842,18616,18616,    0,  177, 2252,18616,  189, 2281,    0,
    18616, 2285,18616,18616, 7649, 7613,  691,18616, 7604, 2753,
     2292,18616, 7631, 7590,18616,  196,18616, 7633, 7588,    0,
    18616,18616, 7609, 7607, 7563,    4,18616,18616, 2310,18616,
      608,18616,18616,  743, 2351,18616, 1134,18616, 7560,    0,
    18616,18616,  241,  323,    0,18616,18616, 1106, 1112,18616,
    18616, 2355,18616,18616, 7586, 2382,    0,18616,18616,18616,
    18616, 2405,18616,18616, 2423,18616,18616,    0,  363, 7549,
    18616,18616,    0,  801, 7543,    0,18616, 7531, 7530,18616,
    18616, 7541, 7500,    0,18616, 7523, 7482,    0,18616,18616,

     7453,  177,18616,18616, 7513, 7475,    0,18616, 7470,    0,
        0,18616,18616,18616, 2888, 2299,    0, 2966, 2496, 7494,
     2498, 2548,  304, 2582,  332,18616,18616,18616,  671,18616,
     1056,  823,18616, 1077,18616,18616,18616,  699, 7480, 7482,
     2407, 3038, 3110, 2226, 2580, 7436,  337, 3184, 7478,18616,
      550,    0,  603, 3256, 3328, 3400, 2746, 3472, 2332, 3544,
    18616,  677, 3623,    0,  637, 3696, 7464, 2782,  702,  535,
     2413,  999, 1004, 2800,  622, 1010, 7423, 7377,  795,18616,
     2494, 3768, 3846, 3918,  787, 7375,  744,  798,  220, 2318,
     7370,  544, 1005,  993,  690, 2307, 7383, 2733, 1082, 7370,

     7368, 7361, 7339,18616,18616, 3990, 2777, 2470, 2816, 2967,
     2738, 2973, 2974, 3018, 3022, 2500, 3023, 3048, 3053, 3027,
     3059, 3054, 3076, 3075, 3104, 3124, 2843, 3128, 2824, 2852,
     3293,  804, 2860,  857, 1156, 3080, 1122, 3138, 3148, 3158,
     2364,18616, 2340, 2752, 3263, 7385, 3286, 7377,18616, 2526,
     2510, 3126, 2672,18616, 3271, 7380,18616, 2262, 7373, 2238,
     2543, 7351, 2750,18616, 7305, 3039, 3356, 7343, 3364, 3327,
     3214, 3381, 2251, 3428, 3180, 2895,18616, 7299, 3224, 3389,
     1068, 7340,18616, 3278, 2752, 3418, 2985,18616, 3421, 7323,
      301, 4069, 4148, 7322,18616, 3445, 3145, 3455, 7297, 3049,

    18616, 3458, 3452, 3505, 7279, 3522, 3530, 3534, 3724, 3573,
        0, 2396, 3585, 3577, 3607, 3401, 7277, 2581, 3071,18616,
     7222, 7276,18616, 3110,18616, 7212, 7267,18616, 3219,18616,
     7184, 7233,18616, 3493, 3301, 3690, 3297,18616, 3717, 3747,
     3755,    0, 2834, 3808, 7192, 3817, 3407,18616, 7147, 3840,
     3863, 7174, 3874, 3885, 3616, 3896, 2944, 3946, 3419,18616,
     7133, 3796, 3907, 7171,  606, 7174, 3069,  722, 3456,18616,
     7115, 1061, 7104, 3157, 3563,18616, 7099,    0, 3597,18616,
     7089, 7123, 3184, 7072, 3273,18616, 7082, 7067,18616, 7108,
     3612,18616, 7048, 7080, 3240, 7028, 3370, 7078, 7076,18616,

     7018,    0,18616,18616, 7010, 7008, 3715,18616, 7006, 2880,
    18616, 3542, 3729,18616, 6996, 3759,18616, 6990, 6967,    0,
      281, 6972, 6960,    0, 6956, 6950, 6947, 2409, 6910, 3769,
    18616, 6858, 6900, 3375, 3787,18616, 6839,    0, 3830,18616,
     6831, 3847,18616, 6825, 3294, 6842, 3380, 3841, 6819, 6778,
     3851, 6826, 3497, 3936, 6808, 6767,    0, 6806, 1093, 6792,
     3585, 6709,    0,   38, 6700,    0,    0, 6693, 6734,    0,
     6688,    0, 6681,    0, 4226, 3955,    0, 4304, 3968, 6728,
     3977, 4009, 2395, 4018, 4029,18616, 4378, 2511, 3915,    0,
     4084, 4456, 2733, 4534, 3916, 2775,18616,18616, 3999, 6671,

     3154, 2968, 6727, 4022,18616,  664, 4091, 4105,18616, 3981,
     6602, 6559, 3323,    0, 6552, 3733,18616, 2429,    0, 2718,
     6593, 4608, 2857, 3049, 4113, 4680, 3941, 3119,    0, 4752,
     4824, 4896, 4968,    0, 3168, 3304, 4163, 5040, 2861, 5112,
    18616, 3314,18616,    0, 5191,    0, 5264,    0, 6587,18616,
     6582, 2391, 6542, 6523, 2427, 2451, 3440, 3112, 3880,18616,
     2463, 3415, 3710, 6524, 6511, 3720, 3192, 4075, 5336, 3264,
     3804, 3983, 3990, 3997, 4060, 3988, 4098, 3891, 4124, 4135,
     4136,18616,18616,    0, 3500, 4187, 4302, 4203, 5415, 3743,
     4037, 4106, 4205, 4308, 4233, 4306, 4355, 6508, 4312, 4323,

     4356, 4176, 4385, 4408, 4362, 4407, 4418, 4419, 4373, 5488,
     5560,    0, 4454, 4460, 4461, 4486, 4496, 4495, 4518, 4569,
     4562, 4570, 4522, 4528, 4636, 4641, 4734, 4642, 5639, 4490,
     4368, 4708, 4713, 4717, 4736, 4699, 4744, 6504, 4743, 4520,
     4738, 4709, 4748, 4796, 4771, 4807, 4808, 4813, 4819, 4831,
     3593, 4181, 4863,18616, 4868, 4915, 4924, 4877, 4882, 4024,
     4932, 4471, 4493, 4883,    0, 4191, 6501, 4948, 4958, 5000,
     6484, 4195, 1142, 4706, 4840, 4989, 2376, 5719, 4992, 5016,
     5023, 6530, 5073, 4218, 4359, 4491, 4378, 6478, 6464, 6454,
     5013, 5061, 5084, 5095, 5143, 5152, 4628, 5296, 5304, 6444,

     5165, 6439, 4631, 6478,    0, 2521, 4713, 6412, 6401, 4807,
     6384, 6377, 4773, 6367,    0, 6398, 6356, 4936, 6347, 6345,
     6344, 6334, 6325, 6313, 6308, 6288, 6288, 6273, 6249, 6253,
     4652, 6236, 6238, 6235, 6224, 6223, 4968, 6211, 6199, 6183,
        0, 5090, 6174,    0, 5158, 6173,18616,18616,18616, 5000,
     6169, 6194, 4031, 6160,    0, 6129, 6164, 6096, 6092, 5272,
        0, 5797, 5274, 6104, 5326, 5334, 5368, 5313, 5871, 5375,
     5370, 5390, 5949, 4216, 6027, 5447, 4217, 4231, 6102,    0,
     6100, 6089, 6062, 5445, 6105,    0, 5446, 5474, 6046, 6177,
     4576,    0, 4718, 6026, 4887, 3896, 5982, 5957, 2415, 5955,

     5959, 4380, 4962, 4975,18616, 4640, 3837, 5953, 3415, 3473,
     3958, 3527, 5346, 6000, 6249, 6321, 3603, 5384, 6395,    0,
     3754, 3872, 5504, 6467, 6539, 5526,18616, 3768, 5943, 5941,
     2255, 3846, 5971, 4818, 4015, 5131, 2744, 5944, 5922, 4079,
     4409,18616,    0, 6618, 4527, 5023, 6698, 5068, 5087, 5343,
     5451, 5914, 5012, 4934, 5884, 5024, 5283, 5469, 5473, 5482,
     5483,    0, 4610, 5496, 5335,    0, 5507, 5528, 5901, 5120,
        0, 5538, 5539, 5374, 5545,    0, 4855, 5546, 5551, 5552,
     5553, 5557, 5564, 5559, 5568, 5575, 5900, 5625, 6778, 5624,
     5633, 6858, 5629, 5674, 5692, 5691, 5865, 5693, 5701, 5707,

     5703, 5708, 5798, 5758, 5802, 6938, 5816, 5709,    0, 5854,
     5855, 5865, 5899,    0, 5860, 5861, 5947, 5953,    0, 5866,
     5954, 5968, 5977, 5982, 5983, 6009, 6056, 6133, 6015, 5594,
     5987, 7017, 6205, 6209, 5989, 6213, 6214, 6222, 5851, 5598,
    18616, 5774, 5842, 5573, 6231, 7096, 7175, 6262,18616, 6293,
     5840, 5828, 5827, 6293,    0, 5129, 6298, 6357, 6379, 6498,
     5818, 5804, 5282, 5300, 2554, 5802, 5797, 5788, 5786, 5779,
     5461, 5800, 5752, 5744, 5728, 6468, 5718, 5699, 5697, 5693,
     5698, 5692,18616, 5684, 5671, 5674,18616, 5661, 5655, 5631,
     5622, 5609, 5605, 5604, 5572, 5571, 5544, 5542, 5527, 4893,

     5517, 5516, 5554, 5500, 5495, 4928, 5500, 5584,  366,    0,
     1110, 5532, 2220, 6351, 6558, 7253,    0, 6385, 6423, 5766,
     7325, 5191,    0, 5376, 5528, 5611,    0, 5616, 5525, 5523,
        0, 5868, 7403, 6103, 6250, 5496, 7475, 6580,18616, 5697,
     5779, 5608, 5440, 5435, 5430, 5423, 5407, 5410, 5407, 5403,
     5787,18616,18616, 5978, 5396,18616, 7547, 7619, 7691,18616,
     5433, 5403, 5390, 4083, 5847, 5879,18616, 4131, 5346, 5356,
     6071, 5789,    0, 5873, 6022, 6137, 6144, 5998, 5324, 6329,
     6143, 6066, 5913, 6145, 6149, 7770, 6181,    0, 6328, 6057,
     6185, 6256, 6242, 6233, 6340, 6321, 6370, 6320, 6138, 6427,

     6246, 6428, 6429, 6503, 6350, 6524, 7850, 6528, 6523, 6764,
     6543, 6843, 6760, 6762, 6766, 6842, 6841, 7930, 6847,    0,
     6920, 6848, 6921, 6922, 6927, 6978, 6926, 6928, 6991, 7000,
     6989, 7001, 7006, 7008, 7022, 6732, 7055, 8009, 7131, 8081,
     7136, 6736, 7209, 6815, 6493, 5315, 5304, 7032, 7338, 5302,
     5300, 5286, 7108, 7376, 7367, 5274, 5273, 6418, 5255, 5247,
     5240, 5238, 5226, 5662, 5225, 5217, 5138, 5123, 5118, 5112,
     5125, 2744, 5101, 5095, 5980, 5089, 5086, 5078, 5065, 5050,
     5045, 5044, 5016, 5025, 2465, 5004, 5004, 5000, 2602, 4997,
     4996, 4989, 4988, 4982, 4977, 4968, 4957, 4950, 4944, 4925,

     4918, 6065, 2574, 6592, 3352, 6731, 7215, 8159,    0, 7237,
     7431, 6879, 8231, 7507, 6139, 6237, 4960, 6349,    0, 6362,
     4880, 6475, 4886, 4876, 4853, 4845, 4823, 4828, 4818,18616,
     6591, 4813, 8303, 8375,18616, 4794, 4794, 2994, 6471,18616,
     4810, 6508, 4768, 4754, 6504, 6755, 6768, 6756, 6834, 6909,
    18616, 6999, 7082, 8454, 7074, 7084, 6532, 6911, 7088, 6995,
     7102, 6835, 7164, 7123, 6915, 7090, 7111, 7165,    0, 7007,
     7166, 7155, 7228, 7135, 7239, 7214, 7344, 7241, 7353, 7289,
     7362, 7358, 7432, 8534, 7202, 7440, 7436, 7532, 7447, 7509,
     7537, 7329, 7536, 7541, 7542, 7543, 7548, 7576,    0, 7601,

     7605, 7577, 7607, 7611, 7613, 4763, 4758, 7639, 7704, 4750,
     4736, 4734, 7677, 5752, 7740, 7802, 4721, 4711, 4705,18616,
     4699, 4698, 4691, 4689, 4684, 4679, 4672,  135, 4662, 4646,
     4637, 4638, 4629, 4622, 4591, 4575, 4565, 4568, 4567, 4558,
     4516,18616, 4490,    0,    0, 4493,18616, 4467, 6726, 4460,
     4460, 4467, 4464, 4462, 4460, 4454, 4452, 4446, 4427, 4425,
     4416, 4407, 4402, 4374, 4362, 3769, 7278,    0, 6727, 6819,
        0, 4335, 6990, 4323, 4307, 4298, 4305, 4307, 4304,18616,
     7190, 4300, 4289, 4258, 3297, 4297, 7261, 4247, 4228, 7333,
     7515, 7513, 7566, 7618, 7649, 7554, 7673, 7547, 7613, 7442,

     7671, 7581, 7680, 7678, 7204, 4137, 7686, 7684, 7658, 7732,
     7748, 7692, 7762, 7710, 7753, 7764, 7970, 7991, 7965, 7992,
     7993, 7997, 7981, 7998, 8053, 8085, 8114, 8115, 8120, 8141,
     8196, 7983, 4135, 8143, 8133, 8045, 8121, 8235, 8148, 8250,
     8152, 8268, 8244, 4132, 4125, 8257, 8259, 4123, 4112, 4111,
     8290, 8339, 4101, 4095, 4091, 4076, 4071, 4059, 4057, 4052,
     4047, 4016, 4013,    0, 3998, 3991, 3956, 3946,18616, 3957,
     3940, 3928, 3908, 3872, 3863, 3862,    0,18616,18616, 3855,
     3859,18616, 3854, 3796, 3783, 3772, 3766, 3755, 3747, 3746,
     3736, 3662, 3648, 3638, 3637, 3560, 3545, 3525, 3529, 3504,

     3497, 3488, 3460, 3473,18616, 3436, 3425, 3330, 7808, 3362,
     3354, 7688, 7733, 7985, 7959, 8119, 3317, 7979, 8134, 8150,
     8109, 8089, 3296,    0, 8142, 8201, 7960, 8269, 8282,    0,
     8283, 7971, 8288, 8298, 8289, 8347, 8361, 3280, 8365, 8367,
     8372, 8371, 8373, 3266,    0, 8379, 8383, 8436, 8442, 8446,
        0, 8447, 8316,18616,18616, 8389, 8567,18616,18616,18616,
     8468,18616,18616,18616,18616,18616,18616,18616,18616,18616,
     3226,18616, 3212, 3203, 3166, 3165, 3168, 3116, 3039,18616,
    18616,18616,18616,18616, 3031, 3017, 7243, 2974, 2963,18616,
    18616,18616,18616,18616,18616,18616,18616,18616,18616,18616,

    18616, 2883, 2841, 2830, 2784, 2738, 2763, 2750, 7964,18616,
    18616,18616, 8428, 8267, 8448, 8294, 8505,    0, 8494, 8503,
     8495, 8510, 8512, 8521, 8517, 8522, 8574, 2725, 8586, 8587,
     8593, 8594, 8599,    0, 8598, 8600, 8604, 8614, 8618, 8616,
     8622, 8623, 2685, 2665, 2600, 2602, 2567, 2511, 2504, 2493,
     2447, 2394,18616, 2329, 2308, 2276, 2261,18616,18616, 2296,
     8412, 8523, 8394, 8628, 8624, 8634, 7987, 8635, 8648, 8652,
     2783, 8667, 8672, 8673, 8682, 8683, 8688, 8690, 8694, 8696,
     2231, 2216, 2201,    0,  156,  206,  212,  260,  515, 7398,
      507,  513,  532,  595, 8704, 8299, 8516, 8706, 8708, 8712,

     8714, 3245, 8721, 8727, 8732, 8738, 8743, 8744, 8751,  603,
      628,  658,  666,  704,  766,18616, 7514,  803,  981, 7719,
     8757, 8758,    0, 8763, 2813, 8771, 8776, 8777,    0, 8792,
      985,  991, 7824,18616, 1005, 7826, 8785, 8796, 3106, 8798,
     8800, 1106, 7828, 1115, 2965, 2178, 7832, 2356,18616, 8808,
    18616, 8865, 8901, 8937, 8973, 9009, 9045, 9081, 9117, 9153,
     9189, 9225, 9261, 9297, 9333, 9369, 9405, 9441, 9477, 9513,
     9549, 9585, 9621, 9657, 9693, 9729, 9765, 9801, 9819, 9852,
     9881, 9908, 9937, 9965, 9987,10005,10036,10065,10101,10112,
    10132,10167,10202,10237,10273,10302,10338,10368,10403,10438,

    10473,10494,10530,10566,10602,10631,10642,10677,10712,10747,
    10782,10793,10813,10834,10870,10891,10927,10963,10998,11018,
    11054,11090,11125,11156,11192,11213,11249,11260,11280,11291,
    11311,11347,11368,11404,11440,11463,11499,11535,11570,11591,
    11626,11661,11692,11728,11748,11772,11807,11836,11846,11865,
    11894,11922,11950,11978,12000,12030,12048,12066,12097,12126,
    12155,12191,12211,12239,12274,12309,12344,12380,12399,12435,
    12464,12493,12529,12565,12595,12624,12659,12694,12729,12765,
    12800,12821,12857,12893,12929,12958,12987,13022,13033,13068,
    13103,13138,13173,13192,13212,13240,13261,13297,13318,13354,

    13390,13418,13439,13475,13511,13546,13577,13613,13634,13670,
    13690,13718,13738,13766,13802,13823,13859,13895, 8801,13918,
    13929,13965,14001,14036,14057,14092,14127,14157,14185,14220,
     2674,14254,14281,14312,14348,14368,14398,14414,14438,14456,
    14480,14498,14534,14563,14591,14619,14654,14689,14713,14748,
    14777, 7810,14811,14835,14864,14875,14911,14930,14959,14988,
    15024,15054,15084,15120,15155,15184,15213,15248,15283,15318,
    15337,15348,15368,15379,15398,15434,15445,15456, 8823,15479,
    15514,15535,15569,15599,15626,15661,15696, 8810,15727,15756,
    15781,15811,15846,15881,15909,15943,15974,16003,16021,16052,

    16081,16109,16137,16172, 9813,16207,16238,16274,16285,16315,
    16345,16373,16409,16438,16474,16504,16533,16544,16579,16614,
    16634,16653,16676,16712,16741,16766,16796,16830,16858,16892,
     3487,16923,16952,16977,17008,17043,17077,17111,17138,17172,
    17203,17232,17260,17295,17330,17361,17396,17426,17460,17488,
    17517,17547,17576,17611,17646,17682,17718,17747,17772,17802,
    17836,17870,17897,17931,17955, 8816,17990,18025,18053,18088,
    18124,18159,18189,18213,18242,18272,18301,18336,18372,18408,
    18437,18471,18507,18543,18579, 9881
    } ;

static yyconst flex_int16_t yy_def[2287] =
    {   0,
     1952, 1952, 1951,    3, 1953, 1953, 1954, 1954, 1951,    9,
     1951,   11, 1955, 1955, 1956, 1956, 1951,   17, 1951,   19,
     1957, 1957, 1958, 1958, 1959, 1959, 1951,   27, 1951,   29,
     1951,   31, 1951,   33, 1960, 1960, 1951,   37, 1961, 1961,
     1951,   41, 1962, 1962, 1963, 1963, 1964, 1964, 1951,   49,
     1965, 1965, 1966, 1966, 1967, 1967, 1968, 1968, 1951,   59,
     1969, 1969, 1970, 1970, 1951,   65, 1951,   67, 1971, 1971,
     1971, 1971, 1951,   73, 1972, 1972, 1973, 1973, 1951,   79,
     1974, 1974, 1975, 1975, 1951,   85, 1976, 1976, 1977, 1977,
     1978, 1978, 1951, 1951, 1951, 1979, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1980, 1981, 1982, 1983, 1981, 1983, 1984,
     1981, 1983, 1951, 1951, 1985, 1951, 1986, 1951, 1981,  109,
      109, 1984,  112, 1981, 1951, 1951, 1951, 1987, 1988, 1988,
     1988, 1989, 1951, 1951, 1951, 1990, 1991, 1951, 1951, 1951,
     1951, 1992, 1992, 1951, 1993, 1951, 1994, 1951, 1951, 1995,
     1996, 1996, 1951, 1996, 1951, 1951, 1997, 1998, 1998, 1998,
     1951, 1998, 1951, 1951, 1999, 1999, 1951, 2000, 2001, 1951,
     1951, 2002, 1951, 1951, 1951, 2003, 1951, 1951, 1951, 2004,
     1951, 1951, 1951, 2005, 2006, 2006, 2006, 1951, 1951, 2007,
     2008, 1951, 1951, 1951, 1951, 2009, 2009, 1951, 2010, 1951,

     2011, 1951, 1951, 2012, 2013, 1951, 1951, 2014, 1951, 2015,
     1951, 1951, 1951, 1951, 2016, 1951, 2017, 1951, 2018, 1951,
     2019, 1951, 2020, 1951, 1951, 1951, 1951, 2021, 1951, 2022,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     2023, 1951, 1951, 2023, 1951, 1951, 1951, 1951, 1951, 2024,
     1951, 1951, 1951, 1951, 2025, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 2026, 1951, 2027, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 2028, 2029, 1951,
     1951, 1951, 2030, 2031, 1951, 2032, 1951, 1951, 1951, 1951,
     1951, 2033, 1951, 2034, 1951, 1951, 1951, 2035, 1951, 1951,

     1951, 1951, 1951, 1951, 2036, 1951, 2037, 1951, 1951, 2038,
     2038, 1951, 1951, 1951, 1951, 2039, 2040, 1951, 2040, 2040,
     2039, 1951, 2041, 2042, 2043, 1951, 1951, 1951, 1951, 1951,
     1951, 2044, 1951, 2045, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 2046, 2046, 1951, 1951, 1951, 1951, 1951, 2047, 1951,
     2048, 2049, 2050, 2051, 2051, 2052, 2048,  348, 2048, 2051,
     1951, 2048, 1951,  355,  359, 2052, 1951,  359, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  359, 1951,
      359, 2053, 2046, 2053,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383, 1951, 1951, 2054, 2055, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2057, 2058,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  360,  359,
     1951, 1951,  355,  355, 1951,  440, 1951, 2059, 1951, 2060,
     2061, 2060, 1951, 1951, 2060, 2062, 1951, 2063, 2064, 1951,
     2063, 1951, 1951, 1951, 1951, 1951, 2065, 1951, 2065, 2066,
     2067, 2065, 1951, 2066, 2068, 1951, 1951, 1951, 2067, 2067,
     2069, 2070, 1951, 2071, 2072, 2071, 1951, 1951, 2071, 2073,
     2073, 2074, 2074, 2073, 1951, 2075, 2076, 2075, 2073, 1951,

     1951, 2075, 1951, 2077, 1951, 2077, 2078, 2079, 2077, 1951,
     2080, 1951, 2078, 2079, 2079, 2081, 2082, 1951, 1951, 1951,
     1951, 2083, 1951, 1951, 1951, 1951, 2084, 1951, 1951, 1951,
     1951, 2085, 1951, 2086, 2087, 2086, 1951, 1951, 2086, 2088,
     1951, 2089, 1951, 2088, 1951, 2090, 1951, 1951, 1951, 1951,
     2091, 1951, 2091, 2092, 2093, 2091, 1951, 2092, 1951, 1951,
     1951, 2093, 2093, 2094, 2095, 2096, 1951, 2095, 1951, 1951,
     1951, 2097, 1951, 1951, 1951, 1951, 1951, 2098, 1951, 1951,
     1951, 2099, 1951, 1951, 2100, 1951, 2101, 1951, 1951, 2102,
     1951, 1951, 1951, 2103, 1951, 1951, 1951, 2104, 2104, 1951,

     1951, 2105, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2106,
     1951, 2106, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2107,
     1951, 1951, 1951, 2108, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 2109, 1951, 1951, 1951, 1951, 2110, 1951, 1951,
     1951, 1951, 1951, 1951, 2111, 2112, 1951, 2111, 1951, 1951,
     2113, 2114, 1951, 2113, 1951, 1951, 2115, 1951, 1951, 2116,
     1951, 1951, 2117, 1951, 1951, 2118, 2119, 1951, 2120, 2121,
     1951, 2122, 1951, 2123, 1951, 2124, 2125, 1951, 2125, 2125,
     2124, 1951, 2126, 2127, 2128, 1951, 1951, 2129, 2130, 2131,
     2132,  687, 2129, 1951, 2133, 2134, 1951, 1951, 1951, 1951,

     1951, 1951, 2135, 2135, 1951, 2135, 2136, 2136, 1951, 1951,
     1951, 1951, 2137, 2138, 1951, 1951, 1951, 1951, 2139, 2139,
     2139, 1951, 2140, 2141, 2141,  722, 1951, 2142, 2143, 2144,
     2145, 2145, 2145,  725, 2146, 2146, 2146,  722, 1951, 2144,
     1951, 2141, 1951,  740, 1951,  725, 2144,  726,  732, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2147, 1951,
     1951, 1951, 1951, 1951, 1951, 2141, 2148, 2148, 2149, 1951,
     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137,
     2137, 1951, 1951, 2150, 2137, 2137, 2137, 2137, 2137, 2137,
     2137, 2137, 2137, 2137, 2137, 2137, 2137,  789, 2137, 2137,

     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2151,
     2151, 2152, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
     2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
     2153, 2153, 2153, 2153, 2153, 2153, 2153,  829, 2153, 2153,
     2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 1951,
     1951, 1951, 1951, 1951,  740,  726, 1951, 2141,  726, 1951,
      858, 2154, 2154, 2155, 2156, 1951, 1951, 1951, 2157, 2157,
     1951, 1951, 2158, 2159, 2159, 2160, 1951, 2161, 2162, 2162,
     2163, 2164, 1951, 1951, 1951, 2165, 1951, 1951, 1951, 1951,
     2166, 2166, 2167, 2168, 2169, 2169, 1951, 2170, 2170, 1951,

     1951, 1951, 1951, 2171, 2172, 2173, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 2174, 2175, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 2176, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     2177, 1951, 1951, 2178, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 2179, 1951, 2180, 1951, 1951, 2181,
     2182, 1951, 2182, 2182, 1951, 2183, 2184, 1951, 1951, 2185,
     2181, 2185,  969, 2186, 1951, 2187, 2188, 2189, 1951, 2190,
     2190, 2190, 2191, 2192, 1951, 2193, 2194, 2194,  988,  985,
     1951, 2195, 2195, 2195, 2196, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 2197, 1951, 1951, 1951, 1951, 1951, 2198, 2198,
     2198, 2199, 1951, 2200, 2201, 2201, 2202, 2202, 1951, 1018,
     2198, 2198, 2198, 1019, 2203, 2202, 1951, 1951, 1951, 1951,
     1951, 1951, 2204, 2204, 1951, 1951, 1951, 1951, 1951, 2202,
     1951, 1951, 2205, 1951, 2206, 2206, 2206, 2206, 2206, 2206,
     2206, 1044, 2206, 2206, 2207, 2206, 2206, 2206, 2206, 2206,
     2206, 2208, 2208, 2206, 2206, 1044, 2206, 2206, 1044, 2206,
     1044, 2206, 2206, 2206, 2206, 1044, 2206, 2206, 2206, 2206,
     2206, 2206, 2206, 2206, 2206, 2206, 2209, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 1089, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2209, 2210, 2210, 1089, 2210,
     2210, 1089, 2210, 1089, 2210, 2210, 2210, 2210, 1089, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 1951,
     1951, 2211, 2198, 1024, 2198, 1024, 1026, 2212, 1951, 2213,
     1951, 2213, 1951, 1951, 2214, 2215, 2215, 2216, 1951, 1951,
     1951, 1951, 1951, 2217, 2218, 1951, 2219, 2219, 2220, 2220,
     1951, 1951, 1951, 1951, 2221, 1951, 1951, 1951, 1951, 1951,
     1951, 2222, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 2223, 1951, 1951, 2224, 1951, 1951, 1951, 2225,
     2225, 2225, 2226, 2227, 2227, 1951, 1215, 2228, 2228, 1219,
     1216, 1951, 2229, 2229, 2229, 2230, 2231, 2232, 2233, 2234,
     2235, 2236, 1951, 2237, 2237, 1235, 1233, 2238, 1951, 2239,
     2240, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     2241, 1951, 1951, 1951, 1951, 1951, 2242, 2242, 2243, 1951,
     1951, 1951, 1951, 1951, 1951, 2244, 1951, 1951, 1951, 1951,
     2245, 2245, 2246, 2246, 2245, 2245, 2245, 2245, 1951, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 1286, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2247, 2247, 2247, 1951, 2247, 2247, 2247,
     2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247, 1318,
     2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247,
     2247, 2247, 2247, 2247, 2247, 1951, 2248, 1951, 2249, 1338,
     2248, 1338, 2249, 1340, 2250, 1951, 1951, 2251, 2252, 1951,
     1951, 1951, 2253, 2254, 2255, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     2256, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 2257, 2258, 2258, 2259, 2260, 2260, 1951, 1407, 2261,
     2261, 1411, 1408, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 2269, 2269, 1951, 1951, 1951, 1951, 2270, 1951,
     2271, 2271, 1951, 1951, 2272, 2272, 2272, 2272, 2272, 2272,
     1951, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272,
     2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 1454, 2272,
     2272, 2272, 2272, 2272, 2273, 2273, 2273, 2273, 2273, 2273,
     2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273,
     2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 1484, 2273,

     2273, 2273, 2273, 2273, 2274, 1951, 1951, 2275, 2276, 1951,
     1951, 1951, 2277, 1951, 2278, 2278, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 2279, 2280, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 2281, 2281, 1567, 2263, 2266,
     2267, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 2270, 2270, 1951, 1951, 2272,
     2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272,

     2272, 2272, 2272, 2272, 2272, 1454, 2272, 2272, 2272, 2272,
     2272, 2272, 2272, 2272, 2272, 2273, 2273, 2273, 2273, 2273,
     2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273,
     2273, 2273, 1484, 2273, 2273, 2273, 2273, 2273, 2273, 2273,
     2273, 2273, 2274, 1951, 1951, 2275, 2276, 1951, 1951, 1951,
     2277, 2282, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 2283, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 2284, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 2272, 2272, 2272, 2272, 2272, 1454, 2272, 2272, 2272,
     2272, 2272, 1454, 1454, 2272, 2272, 2272, 2272, 2272, 1454,
     2272, 2273, 2273, 2273, 2273, 2273, 2273, 1484, 2273, 2273,
     2273, 2273, 2273, 1484, 1484, 2273, 2273, 2273, 2273, 2273,
     1484, 2273, 2274, 1951, 1951, 2275, 2276, 1951, 1951, 1951,
     2277, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2285, 1951,
     1951, 1951, 2272, 2272, 2272, 2272, 2272, 1454, 2272, 2272,
     2272, 2272, 2272, 2272, 2272, 2272, 1951, 2286, 2273, 2273,
     2273, 2273, 2273, 1484, 2273, 2273, 2273, 2273, 2273, 2273,
     2273, 2273, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2285,
     2285, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272,
     2286, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 2273,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 2272, 2272, 2272, 2272, 2272, 2272,

     2272, 2286, 2273, 2273, 2273, 2273, 2273, 2273, 2273, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2272,
     2272, 2272, 1454, 2272, 2286, 2273, 2273, 2273, 1484, 2273,
     1951, 1951, 1951, 1951, 1951, 1951, 2272, 2272, 2286, 2273,
     2273, 1951, 1951, 1951, 2286, 1951, 1951, 2286, 1951, 2286,
        0, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951
    } ;

static yyconst flex_int16_t yy_nxt[18697] =
    {   0,
     1951, 1951,  175,   98,  175,  179,  176,  179,  176,  180,
      211,  180,  211,   95,   95,  238,  218,   99,  218,  226,
      227,   94,  226,   94,  228,   96,   96,  219,  238,  219,
      231,  326,  232,  326,  327, 1951,  327,  329,  330,  336,
      329,  233,  220,  952,  220,  338,  234,  177,  338,  177,
      181,  337,  181,  331,  606,  212,  235,  212,  311,  605,
      239,  221,  311,  221,  953,  229,  347,  312,  313,  339,
      348,  312,  313,  239, 1664,  236,   97,   97,  100,  101,
      102,  100,  101,  103,  104,  105,  106,  100,  105,  100,
      100,  105,  107,  108,  109,  110,  111,  112,  112,  112,

      105,  103,  113,  105,  105,  105,  114,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  100,  116,  100,  105,  115,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  100,  100,  100,  105,  100,  118,  226,
      227,  118,  226,  261,  228,  231,  251,  232,  252,  261,
      119,  120,  274,  121,  122,  274,  233,  123,  123,  124,
      357,  234,  247,  248,  358,  247,  247,  248, 1663,  247,
      437,  235,  253,  437,  566,  567,  251,  597,  252,  256,

      597,  257,  598,  268, 1664,  229,  573,  574,  262,  295,
      236,  254,  269,  270,  262,  329,  330,  275,  329,  308,
      275,  308,  253,  296,  256,  258,  257,  668,  249,  271,
     1664,  331,  249,  125,  126,  126,  127,  126,  126,  126,
      128,  254,  126,  126,  259,  126,  126,  126,  272,  126,
      258,  126,  130,  268,  297,  667,  130,  126,  126,  126,
      126,  126,  269,  270,  309, 1913,  309,  451,  452,  259,
      437,  438,  452,  437,  438,  287,  351, 1914,  287,  271,
      126,  131,  126,  126,  780,  354,  439,  443,  295,  444,
      444,  444,  440,  781,  459,  460,  621,  452,  272,  462,

      622,  288,  296,  287,  288,  694,  287,  877,  694,  126,
      126,  126,  126,  126,  126,  127,  126,  126,  126,  128,
      288,  126,  126,  288,  126,  126,  126,  494,  126,  289,
      126,  130,  289,  297, 1664,  130,  126,  126,  126,  126,
      126,  299,  299,  926,  697,  927,  436,  698,  289, 1951,
      452,  289,  300,  300,  452,  716,  717,  717,  717,  126,
      131,  126,  126,  479,  479,  479,  479,  301,  301,  355,
      480,  355,  355,  623,  355,  355,  355,  686,  621,  452,
      646,  647,  622,  366,  968,  649,  302,  302,  126,  126,
      126,  126,  134,  134,  135,  134,  134,  134,  134,  134,

      136,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  134,  138,
      134,  134,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  134,  134,  134,
      134,  137,  139,  140,  141,  140,  140,  139,  139,  139,
      142,  139,  139,  139,  139,  139,  139,  139,  139,  143,
      139,  139,  139,  139,  144,  139,  139,  139,  139,  139,

      139,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  139,  146,
      139,  139,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  139,  139,  139,
      147,  145,  148,  148,  149,  148,  148,  148,  150,  341,
      148,  148,  341,  148,  148,  148, 1915,  148,  725,  148,
      152, 1917,  726,  757,  152,  148,  153,  148,  148,  148,
      344,  345, 1918,  344,  485,  486,  342, 1919,  355,  486,
      355,  355,  347,  429,  429,  429,  348,  757,  148,  154,

      148,  148,  366,  463,  464,  343,  463,  786,  787,  610,
      476,  477,  610,  476,  486, 1951,  486,  535,  536,  611,
      486,  727,  536,  566,  567,  729,  346,  148,  148,  148,
      148,  148,  148,  149,  148,  148,  148,  150,  750,  148,
      148,  750,  148,  148,  148,  486,  148,  536,  148,  152,
     1422,  763,  465,  152,  148,  153,  148,  148,  148,  478,
      466,  466,  466,  466, 1951,  536,  705,  445, 1931,  536,
      445,  431,  699,  763,  431,  699,  467,  148,  154,  148,
      148,  468,  446,  432,  432,  495,  433,  434,  440, 1003,
      435,  435,  436,  586,  536,  725,  497,  498,  342,  726,

      338,  498, 1664,  338,  587,  495,  148,  148,  148,  148,
      155,  155,  156,  155,  155,  155,  157,  343,  155,  155,
     1932,  155,  155,  155,  339,  155,  498,  155,  159, 1664,
      700,  755,  159,  155,  160,  155,  161,  155,  588,  566,
      567,  792,  436,  756, 1951,  445,  436, 1951,  445,  466,
      466,  466,  466,  755, 1951,  793,  155,  162,  155,  155,
      447,  466,  466,  466,  466,  467,  436,  756,  519,  520,
      468,  519,  514,  514,  514,  514, 1664,  467,  473,  515,
      524,  525,  468,  524,  475,  155,  155,  155,  155,  155,
      155,  156,  155,  155,  155,  157, 1951,  155,  155, 1951,

      155,  155,  155,  775,  155,  437,  155,  159,  437,  776,
     1951,  159,  155,  160,  155,  161,  155,  521,  652,  653,
      436, 1951,  498,  655,  704,  705,  498,  704, 1933,  526,
     1951,  503,  503,  503,  503,  155,  162,  155,  155,  503,
      503,  503,  503,  562,  562,  562,  562,  504,  706,  777,
      563,  498,  505,  778,  771,  504,  772,  773,  441,  442,
      505,  441, 1935,  779,  155,  155,  155,  155,  139,  163,
      164,  163,  163,  139,  139,  139,  165,  139,  139,  139,
      139,  139,  139,  139,  139,  166,  139,  139,  139,  139,
      167,  139,  139,  139,  139,  139,  139,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  139,  146,  139,  139,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  139,  139,  139,  169,  168,  170,  170,
      171,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  170,  173,  170,  170,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  170,  170,  170,  170,  172,  182,  182,
      183,  182,  182,  182,  184, 1422,  182,  182,  758,  182,
      182,  182,  757,  182,  790,  182,  186,  499,  757, 1942,
      186,  182,  182,  182,  182,  182,  788,  701, 1951,  498,
      701,  791,  758,  498,  789, 1664,  757,  495,  453,  454,
     1944,  453,  757,  702,  182,  187,  182,  182,  573,  574,
      466,  466,  466,  466, 1951,  452,  872,  469,  498,  452,
      529,  530,  475,  529,  707,  707,  467,  547,  548,  707,

      547,  468,  709,  182,  182,  182,  182,  182,  182,  183,
      182,  182,  182,  184,  452,  182,  182,  455,  182,  182,
      182,  686,  182,  437,  182,  186,  437,  707, 1404,  186,
      182,  182,  182,  182,  182,  616,  617,  803,  616,  531,
      804,  948,  510,  503,  503,  510,  549,  805,  550,  550,
      550,  550,  511,  182,  187,  182,  182,  471,  504,  512,
      872,  625,  629,  505,  551,  626,  475,  625, 1946,  552,
      949,  626,  627,  851,  628,  852,  852,  852,  627, 1947,
      628,  618,  182,  182,  182,  182,  188,  188,  189,  188,
      188,  188,  188,  188,  190,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  188,  192,  188,  188,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  188,  188,  188,  188,  191,  193,  194,  195,  194,
      194,  193,  193,  193,  196,  193,  193,  193,  193,  193,
      193,  193,  193,  197,  193,  193,  193,  193,  198,  193,
      193,  193,  193,  193,  193,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  193,  200,  193,  193,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  193,  193,  193,  201,  199,  202,  202,  203,  202,
      202,  202,  202,  202,  204,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  202,  206,  202,  202,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  202,  202,  202,  202,  205,   94,   94,  207,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,   94,  209,   94,   94,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,   94,   94,   94,   94,  208,  213,  213,  214,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  213,  216,  213,  213,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  213,  213,  213,  213,  215,   94,   94,  222,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,   94,  224,   94,   94,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,   94,   94,   94,   94,  223,  240,  241,  242,  240,
      241,  240,  240,  240,  240,  240,  240,  243,  240,  240,
      240,  240,  244,  244,  240,  244,  244,  244,  240,  240,
      240,  240,  240,  240,  240,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  240,  245,  240,  240,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  240,  240,  240,  240,  240,  263,  263,  264,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  263,  266,  263,  263,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  263,  263,  263,  263,  265,  276,  276,  277,  276,
      276,  276,  276,  276,  278,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  276,  280,  276,  276,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  276,  276,  276,  276,  279,  281,  281,  282,  281,
      281,  281,  281,  281,  283,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  281,  285,  281,  281,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  281,  281,  281,  281,  284,  290,  290,  291,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  290,  293,  290,  290,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  290,  290,  290,  290,  292,  303,  303,  304,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  305,  305,  305,  305,  305,

      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  303,  306,  303,  303,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  303,  303,  303,  303,  305,  314,  315,   94,  314,
      315,  316,  314,  317,  314,  314,  317,  314,  314,  317,
      318,  319,  318,  317,  320,  321,  321,  321,  318,  322,
      317,  317,  317,  318,  318,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  314,  317,  314,  317,  323,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  314,  314,  314,  317,  314,  351,  344,  345,  351,
      344,  686,  351,  354,  351,  354,  354,  351,  968,  559,
      560,  351,  559,  351,  351,  351,  351,  356,  472,  472,
      472,  472, 1664,  569,  570,  469,  569,  866,  866,  866,
      503,  503,  503,  503,  467, 1912,  351,  506,  351,  468,
      868,  868,  868,  346,  487,  488,  504,  487, 1911,  459,
      460,  505,  575,  576,  462,  575,  579,  580,  561,  579,
     1951,  486, 1910,  591,  592,  486,  591,  351,  359, 1264,

      685,  351,  571,  685,  351,  354,  351,  360,  354,  351,
      686,  607,  608,  351,  607,  351,  351,  351,  351,  356,
      486,  687, 1810,  489, 1264,  471,  782,  509,  509,  509,
      509,  577, 1894,  739,  506,  581,  739,  508,  351,  590,
      351,  860,  593,  504,  860, 1893,  500,  501,  505,  500,
      725, 1951,  613,  614,  726,  613,  630,  631,  794,  630,
      609, 1892, 1951,  498,  783,  441,  442,  498,  441,  351,
      351, 1951,  795,  351,  796,  361,  351,  354,  362,  354,
      363,  351,  495,  635,  636,  351,  635,  351,  351,  351,
      351,  356,  498,  784, 1891,  502,  975,  537,  538,  975,

      537,  615,  495,  812,  508,  632,  639,  640,  341,  639,
      365,  341,  351, 1951,  536,  883,  883,  883,  536,  541,
      541,  541,  541, 1950,  642,  643,  542,  642,  550,  550,
      550,  550,  637,  757, 1028,  342,  543,  544,  544,  544,
      545,  351, 1951,  536,  551, 1951,  539,  347, 1951,  552,
     1951,  348, 1890, 1951,  343,  641,  757, 1951, 1028, 1951,
     1951, 1951, 1951,  366,  933,  550,  550,  550,  550, 1031,
     1247,  770,  553,  644,  770,  550,  550,  550,  550,  934,
      757,  551, 1951, 1032, 1951, 1248,  552,  556,  556,  556,
      556,  551,  557, 1031,  553, 1951,  552,  691, 1951,  690,

      691,  770,  690,  551,  770, 1032, 1035,  686,  552, 1951,
      766, 1889,  694, 1951,  367,  694,  351,  812,  692,  351,
     1951, 1547,  351,  351,  351,  351,  351,  368,  863, 1548,
     1035,  351,  863,  351,  351,  351,  351,  351,  566, 1164,
      369,  370,  555,  451,  452,  371,  372,  812,  452,  691,
      373,  374,  691,  375,  376, 1888,  351,  863,  351,  686,
      459,  460,  369,  370,  555,  462, 1887,  371,  372,  825,
      687,  566, 1164,  452,  373,  374,  377,  378,  375,  376,
     1886,  344,  345,  691,  344,  686,  691,  351,  379,  380,
      380,  379, 1567,  686,  351,  351,  351,  381,  351,  351,

      887,  887,  887,  351,  687,  379,  351,  379,  351,  382,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  346,  384, 1885,
      351,  383,  385,  386,  387,  388,  389,  390,  383,  391,
      392,  383,  383,  393,  394,  395,  383,  396,  397,  398,
      399,  400,  401,  402,  403,  383,  404, 1552,  405,  406,
      379,  380,  380,  379, 1884, 1883,  351,  351,  351,  381,
      351,  351, 1553,  453,  454,  351,  453,  379,  351,  379,
      351,  384,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  688,

      382,  688,  351,  409,  410,  411,  412,  413,  414,  415,
      408,  416,  417,  408,  408,  418,  419,  420,  408,  421,
      422,  423,  424,  425,  426,  427,  428,  408,  404, 1882,
      405,  406,  441,  442,  694,  441,  357,  694,  351,  770,
      358,  351,  770,  361,  351,  354,  362,  354,  363,  351,
     1881,  463,  464,  351,  463,  351,  351,  351,  351,  356,
      589,  589,  589,  589,  734,  717,  717,  717,  726,  443,
      875,  444,  444,  444,  875, 1871, 1859,  589,  365,  589,
      351,  590, 1268, 1951,  798,  812, 1951,  697,  799, 1858,
      698,  355,  800,  355,  355, 1531,  355,  355,  355,  875,

      589,  759,  801,  802,  759,  366, 1268, 1422,  817,  351,
      490,  490, 1532,  490,  490,  490,  491,  770,  490,  490,
      770,  490,  490,  490,  752,  490,  760,  490,  493,  761,
      812,  589,  493,  490,  490,  490,  494,  490,  355, 1422,
      355,  355,  347,  762,  770, 1902,  348,  770,  752,  753,
      754,  761,  366,  895,  895,  895,  490,  493,  490,  490,
      812,  438,  739,  812,  438,  739,  355,  762,  355,  355,
      347,  429,  429,  429,  348,  347,  850, 1939,  813,  348,
      366,  610,  436, 1422,  610,  490,  490,  490,  490,  675,
      812,  611,  675,  676,  848,  677,  476,  477,  677,  476,

     1857,  677,  678,  679,  678,  677,  680,  681,  681,  681,
      678,  682,  677,  677,  677,  678,  678,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683, 1856,  677,  436,  677,  683,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  901,  901,  901,  677,  690,  770,  701,
      690,  770,  701,  689,  770,  770,  689,  770,  770,  689,
      689,  689,  689,  689,  689,  702,  487,  488,  689,  487,
      689,  689,  689,  689,  689,  688,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  812,  689,  812,  689,  688, 1948, 1855,  770,
      812,  812,  770,  770,  770,  820,  770,  770,  770,  821,
      782,  770,  818, 1854,  814, 1585,  815,  816,  819,  822,
      466,  466,  466,  466,  689,  380,  380,  380,  380,  770,
      500,  501,  770,  500,  770,  770,  467,  770,  770, 1585,
      770,  468,  380,  770,  380,  812,  712,  725,  783,  812,
      812,  726,  519,  520,  812,  519,  770,  770,  832,  770,
      770,  445,  823, 1852,  445,  380,  826,  827,  907,  907,
      907,  824,  833,  713,  390,  812,  447,  784, 1851,  828,

      812,  812,  436, 1850,  830,  770,  812,  829,  770,  837,
      834,  524,  525,  404,  524,  405,  714,  380,  380,  380,
      380,  831,  812,  812,  835,  770,  836,  838,  770,  770,
      843,  839,  770,  844,  380,  840,  380,  727,  380,  438,
      845,  729,  438, 1951,  452,  841,  842,  757,  452,  853,
      854,  812,  853,  812,  447,  699,  436,  712,  699,  445,
      436, 1945,  445,  880,  855,  713,  390,  880,  846,  757,
      856,  812, 1849,  452,  858,  812,  910,  910,  910,  847,
      859,  870,  870,  870,  870,  404, 1018,  405,  714,  718,
     1019,  719,  880, 1041,  719,  849, 1041,  719,  719,  720,

      719,  719,  721,  913,  913,  913,  722,  718,  719,  719,
      719,  719,  719,  700,  436,  479,  479,  479,  479, 1848,
      529,  530,  480,  529,  857,  479,  479,  479,  479, 1847,
     1846,  719,  480,  719,  436,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  918,
      918,  918,  719,  724,  445,  770,  724,  445,  770,  724,
      730,  724,  730,  730,  725,  586, 1845, 1844,  726,  447,
      724,  724,  724,  724,  731,  436,  587,  445,  451,  452,
      445, 1843,  812,  452,  431,  485,  486,  431,  537,  538,

      486,  537,  850,  724, 1925,  724,  432,  432,  436,  433,
      434,  646,  647,  435,  435,  436,  649, 1839,  452,  892,
      588,  342, 1018,  892,  770,  486, 1019,  770,  466,  466,
      466,  466,  725,  864,  724, 1951,  726, 1709, 1951,  436,
      343, 1951, 1833, 1951,  467,  473, 1951, 1823,  892,  468,
     1951,  475, 1951, 1951, 1951, 1951,  366,  472,  472,  472,
      472, 1709,  436,  686,  469, 1951, 1951, 1951, 1951,  436,
      968,  597, 1951,  467,  597, 1951,  598, 1951,  468, 1817,
     1812, 1951,  472,  472,  472,  472, 1951,  780, 1811,  469,
     1951, 1951, 1951, 1951,  937,  937,  937, 1951,  467,  942,

      942,  942,  884,  468, 1808,  884, 1951,  724,  547,  548,
      724,  547,  511,  724,  724,  724,  732,  724,  725,  885,
      559,  560,  726,  559,  724,  724,  724,  724,  724,  466,
      466,  466,  466, 1018,  471, 1951,  486, 1019,  485,  486,
      486,  759, 1951,  486,  759,  467,  473,  724, 1036,  724,
      468,  495,  475,  503,  503,  503,  503,  569,  570,  471,
      569, 1951,  497,  498,  495,  486,  760,  498,  486,  504,
     1036,  495, 1951,  498,  505,  497,  498,  498,  724,  735,
      498, 1951,  735,  876,  495,  735,  735,  736,  735,  735,
      737, 1018,  498, 1807,  738, 1019,  735,  735,  735,  735,

      735,  770,  498,  345,  770,  498,  509,  509,  509,  509,
      535,  536,  986,  506,  986,  536,  945,  945,  945,  735,
      881,  735,  504, 1951, 1951, 1951, 1951,  505, 1806, 1422,
     1951,  510,  503,  503,  510,  514,  514,  514,  514, 1951,
      536,  511,  515, 1951, 1951,  347, 1951,  504,  512,  348,
      735,  724,  505, 1951,  724, 1805, 1804,  724,  730,  724,
      740,  730,  725, 1056,  575,  576,  726,  575,  724,  724,
      724,  724,  731, 1803,  510,  503,  503,  510,  514,  514,
      514,  514, 1802,  508,  511,  515,  510,  503,  503,  510,
      504,  724, 1801,  724,  860,  505,  511,  860,  579,  580,

     1951,  579,  504,  512,  950,  950,  950,  505, 1951, 1951,
     1951, 1951, 1800,  591,  592, 1951,  591,  562,  562,  562,
      562,  725,  724,  741,  563,  726,  741, 1799,  741,  741,
      742,  741,  741,  742,  741,  743,  742,  744,  742,  744,
      745,  746,  747,  747,  747,  748,  741,  742,  742,  742,
      742,  749,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  741,
      742,  741,  742,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  741,  741,

      741,  742,  741, 1951, 1798, 1797, 1951, 1951,  536, 1951,
     1951, 1951,  536, 1951, 1951, 1796,  607,  608, 1951,  607,
     1951, 1951, 1951, 1951, 1951,  509,  509,  509,  509, 1795,
      613,  614,  506,  613,  535,  536, 1040,  536,  725,  536,
     1037,  504,  726, 1951,  770, 1951,  505,  770,  541,  541,
      541,  541,  717,  717,  717,  542,  541,  541,  541,  541,
      616,  617, 1037,  616,  536,  543,  544,  544,  544,  545,
      630,  631, 1018,  630, 1951,  724, 1019,  545,  724,  893,
      686,  724,  724,  724,  724,  724,  725, 1567,  635,  636,
      726,  635,  724,  724,  724,  724,  724,  562,  562,  562,

      562, 1261,  508, 1794,  563,  770,  618, 1065,  770,  541,
      541,  541,  541, 1793, 1792,  724,  542,  724,  541,  541,
      541,  541, 1791, 1261,  768,  542,  543,  544,  544,  544,
      545,  639,  640, 1790,  639,  897,  898,  898,  898,  545,
     1789,  550,  550,  550,  550, 1042,  769,  770,  642,  643,
      770,  642, 1788, 1951, 1951, 1951, 1951,  551,  646,  647,
     1787, 1044,  552,  649,  556,  556,  556,  556,  652,  653,
     1951,  553, 1951,  655, 1951, 1951, 1951, 1951, 1951, 1265,
      551, 1034, 1951, 1042, 1034,  552,  550,  550,  550,  550,
     1018, 1951,  770, 1951, 1019,  770, 1951,  556,  556,  556,

      556, 1265,  551,  557,  553, 1786,  760,  552, 1951, 1951,
     1951, 1951, 1042,  551, 1785, 1951,  691,  691,  552,  691,
      691, 1951, 1784, 1951, 1951,  724,  686,  686,  724,  617,
     1782,  724,  724,  724,  724,  724,  725,  985,  687, 1781,
      726,  555,  724,  724,  724,  724,  724,  550,  550,  550,
      550, 1242, 1951,  652,  653, 1243,  967, 1051,  655,  967,
     1013, 1013, 1013,  551,  557,  724,  686,  724,  552,  691,
     1244,  724,  691,  968,  555, 1780, 1018,  969,  971,  686,
     1019,  971, 1004, 1005,  770, 1004,  972,  770, 1951,  770,
      973,  770,  770, 1779,  770, 1951,  769,  724,  770, 1951,

      724,  770, 1778,  724,  724,  724,  810,  724,  725, 1777,
      691, 1776,  726,  691,  724,  724,  724,  724,  724,  691,
      686, 1775,  691,  704,  705,  860,  704,  968,  860,  686,
      691,  969, 1200,  691,  977, 1200,  968,  724,  770,  724,
      969,  770, 1049,  977,  757,  977, 1774,  706,  977,  977,
      977,  977, 1045,  996, 1047,  997,  977,  977,  998, 1046,
     1773,  770,  999, 1000,  770, 1771,  757, 1001,  724,  490,
      490, 1664,  490,  490,  490,  877, 1041,  490,  490, 1041,
      490,  490,  490, 1042,  490,  691,  878,  493,  691,  977,
     1066,  493,  490,  490,  490,  494,  490,  725,  977,  770,

      977,  726,  770,  977,  977,  977,  977,  770,  707,  707,
      770,  977,  977,  707, 1770,  490,  493,  490,  490, 1769,
     1438, 1042,  707,  707, 1768,  770, 1767,  707,  770, 1048,
      709,  734,  717,  717,  717,  726,  770,  770, 1766,  770,
      770,  707, 1438, 1765,  490,  490,  490,  490,  490,  490,
     1042,  490,  490,  490,  877,  707,  490,  490, 1764,  490,
      490,  490, 1763,  490,  757,  490,  493, 1050, 1762, 1067,
      493,  490,  490,  490,  490,  490,  724,  770, 1760, 1759,
      770, 1020,  717,  717,  717, 1019,  757, 1054,  770, 1053,
     1758,  770, 1755, 1052,  490,  493,  490,  490,  851, 1754,

      852,  852,  852,  838,  770,  798,  770,  770,  459,  770,
      866,  866,  866,  462, 1144, 1144, 1144,  975, 1227,  884,
      975, 1227,  884,  490,  490,  490,  490,  675, 1079,  511,
      675,  960,  694,  961,  770,  694,  961,  770, 1057,  961,
      962,  963,  962,  961,  964,  681,  681,  681,  962,  965,
      961,  961,  961,  962,  962,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683, 1061,  961, 1068,  961,  683,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966, 1070, 1711,  770,  961,  971,  770,  770,  971,  770,
      770,  970,  770,  770,  970, 1710,  770,  970,  970,  970,
      970,  970,  970, 1440,  770, 1708,  970,  770,  970,  970,
      970,  970,  970,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
     1707,  970, 1706,  970,  683, 1058,  770,  770, 1704,  770,
      770, 1071, 1703,  770, 1422, 1075,  770, 1076, 1702,  770,
     1701, 1059,  770, 1060,  770, 1069, 1700,  770, 1150, 1150,
     1150,  699,  970,  979,  699,  980,  770, 1077,  980,  770,
     1699,  980,  980,  981,  980,  980,  982,  887,  887,  887,

      980,  979,  980,  980,  980,  980,  980, 1078,  770,  770,
     1041,  770,  770, 1041, 1698,  812, 1082, 1072, 1073,  770,
      770, 1109,  770,  770, 1074,  980, 1697,  980, 1086,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983, 1080, 1696,  770,  980,  691,  770, 1695,
      691,  770,  770,  987,  770,  770,  987,  686, 1694,  987,
      987,  988,  987,  987,  989, 1081, 1083, 1693,  990, 1692,
      987,  987,  987,  987,  987, 1084, 1085,  770,  451,  863,
      770,  770,  884,  863,  770,  884,  770,  770, 1691,  770,

      770,  812,  511,  987, 1690,  987, 1689,  812,  812,  885,
     1951,  863, 1688, 1088, 1687,  863, 1686, 1089,  863,  770,
     1685,  770,  770,  770,  770, 1684,  770, 1683,  770,  770,
     1090,  770,  770,  812,  987,  694, 1681,  812,  694,  991,
      863,  992,  812,  812,  992, 1680, 1677,  992,  992,  993,
      992,  992,  994, 1092, 1108, 1091,  992,  991,  992,  992,
      992,  992,  992,  770, 1093,  812,  770,  812, 1676,  812,
      770,  770, 1094,  770,  770,  812, 1098, 1238, 1239, 1099,
     1238,  992, 1271,  992, 1120,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,

      995,  995,  995,  995,  995,  995,  995,  995,  995,  812,
     1675, 1063,  992,  718, 1063, 1009,  812,  812, 1009, 1674,
     1673, 1009, 1009, 1010, 1009, 1009, 1011, 1672, 1096, 1671,
     1009,  718, 1009, 1009, 1009, 1009, 1009,  770, 1095, 1097,
      770, 1253,  770,  770, 1253,  770,  770, 1160, 1160, 1160,
     1163, 1163, 1163, 1187, 1254, 1009, 1187, 1009, 1670,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  812, 1669, 1668, 1009,  735,  812,  812,
      735, 1664, 1101,  735,  735,  736,  735,  735,  737, 1100,

      770, 1667,  738,  770,  735,  735,  735,  735,  735,  770,
      770, 1105,  770,  770,  770, 1666, 1188,  770,  770, 1238,
     1239,  770, 1238,  485,  875, 1665, 1662,  735,  875,  735,
      566, 1661,  907,  907,  907,  770, 1660,  770,  770,  770,
      770, 1659,  770, 1658,  770,  770,  812,  770,  770,  770,
     1657, 1656,  770,  875, 1114,  812,  812, 1655,  735,  724,
      812, 1122,  724, 1654,  812,  724,  730,  724,  730,  730,
      725, 1110,  770, 1653,  726,  770,  724,  724,  724,  724,
      731,  812, 1111,  812, 1112,  812, 1650, 1102, 1649, 1121,
      812,  812,  913,  913,  913,  812, 1118,  770, 1119,  724,

      770,  724, 1648, 1103, 1113, 1104, 1115, 1116,  770,  770,
     1645,  770,  770, 1117,  770, 1644, 1123,  770,  812, 1034,
      770, 1589, 1034,  770,  573, 1125,  910,  910,  910, 1588,
      724,  724,  853,  854,  724,  853, 1267,  724,  724,  724,
      732,  724,  725,  812,  760, 1584,  726, 1130,  724,  724,
      724,  724,  724,  857,  812,  812,  770, 1951,  875,  770,
      812, 1583,  875, 1124,  853,  854,  812,  853, 1582,  853,
      854,  724,  853,  724, 1129, 1127, 1126, 1579,  445, 1131,
     1128,  445, 1578,  445, 1132,  857,  445,  875, 1238, 1239,
      856, 1238, 1577,  861, 1200,  725, 1422, 1200, 1135,  859,

      451,  452,  724,  724, 1136,  452,  724,  857, 1295,  724,
      724,  724,  732, 1015,  725, 1576,  853,  854,  726,  853,
      724,  724,  724,  724,  724,  853,  854, 1575,  853,  975,
      452, 1133,  975,  853,  854,  770,  853, 1134,  770,  857,
     1131, 1574, 1138,  724,  857,  724,  857, 1572, 1137,  466,
      466,  466,  466,  436,  856,  918,  918,  918,  436, 1140,
     1140, 1140, 1140, 1251, 1252,  467, 1251,  868,  868,  868,
      468,  686,  475, 1565,  724, 1951, 1004, 1005, 1951, 1004,
     1564, 1951, 1951, 1951, 1141, 1016, 1951,  937,  937,  937,
     1951,  857, 1951, 1951, 1951, 1951, 1951, 1278,  495, 1563,

      857, 1142, 1142, 1142, 1142, 1562,  485,  486,  857,  497,
      880,  486, 1561,  770,  880, 1951,  770, 1951,  495,  950,
      950,  950, 1951, 1560,  770,  770, 1141,  770,  770,  495,
      535,  892, 1559, 1951,  880,  892,  486, 1558,  880,  880,
      497,  498, 1951, 1557, 1556,  498, 1951, 1021, 1145,  495,
     1021, 1555, 1554, 1021, 1021, 1022, 1021, 1021, 1023, 1551,
      892, 1550, 1024,  880, 1021, 1021, 1021, 1021, 1021,  770,
      498, 1277,  770, 1549,  510,  503,  503,  510, 1951,  892,
     1546, 1272, 1148,  892,  511, 1545, 1280, 1021,  770, 1021,
      504,  770,  883,  883,  883,  505,  541,  541,  541,  541,

     1544,  535,  536, 1155, 1543, 1541,  536,  646,  892,  942,
      942,  942,  649, 1156, 1157, 1157, 1157,  545, 1021,  724,
     1540,  770,  724, 1044,  770,  724,  730,  724,  730,  730,
      725,  536, 1266, 1539,  726, 1266,  724,  724,  724,  724,
      731, 1538, 1044, 1154,  541,  541,  541,  541, 1355, 1355,
     1355,  542, 1537, 1159, 1159, 1159, 1159, 1267, 1534,  724,
      542,  724,  895,  895,  895,  545,  550,  550,  550,  550,
     1533, 1951, 1951, 1951,  545,  652, 1530,  945,  945,  945,
      655, 1529,  551, 1528,  901,  901,  901,  552, 1527, 1288,
      724,  741, 1414, 1526,  741, 1414,  741,  741,  742,  741,

      741,  742,  741,  743,  742,  744,  742,  744, 1025,  746,
      747,  747,  747,  748,  741,  742,  742,  742,  742,  749,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  741, 1026,  741,
      742,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  741,  741,  741,  742,
      741, 1951, 1525,  967, 1951,  691,  967, 1951,  691, 1951,
     1524, 1523, 1951,  686,  770,  686, 1951,  770, 1951, 1951,
     1951, 1951,  366, 1522,  687, 1521,  692,  541,  541,  541,

      541, 1163, 1163, 1163,  542,  541,  541,  541,  541, 1520,
     1519, 1951,  542, 1951,  897,  898,  898,  898,  545, 1358,
     1358, 1358,  897,  898,  898,  898,  545,  691, 1518, 1517,
      691, 1207, 1208, 1208, 1208,  691,  770,  686,  691,  770,
     1281, 1512, 1951,  724,  770,  686,  724,  770,  687,  724,
      724,  724,  724,  724,  725, 1511,  687, 1510,  726, 1507,
      724,  724,  724,  724,  724, 1013, 1013, 1013,  729,  691,
     1506, 1951,  691,  977, 1951,  770,  691, 1414,  770,  691,
     1414, 1951,  977,  724,  977,  724,  686,  977,  977,  977,
      977,  691, 1951, 1215,  691,  977,  977, 1216, 1066, 1451,

     1287,  686,  734,  717,  717,  717,  726, 1444, 1217, 1208,
     1208, 1208, 1216, 1443,  724, 1062, 1063, 1062, 1062, 1063,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1292, 1293,  691,  691,  691,  691,
      691,  691,  770, 1437, 1436,  770,  686,  686,  686, 1435,
     1432, 1062, 1062, 1062, 1062,  968, 1429,  985, 1233,  969,
      770, 1428, 1427,  770,  770,  691, 1426,  770,  691, 1064,
     1364, 1364, 1364,  770,  770,  686,  770,  770, 1422, 1425,
     1062, 1062, 1062, 1062, 1062,  724, 1233,  770,  724, 1424,

      770,  724,  724,  724,  810,  724,  725, 1423,  770,  984,
      726,  770,  724,  724,  724,  724,  724,  724, 1275, 1208,
     1208, 1208, 1020,  717,  717,  717, 1019, 1260, 1283,  770,
     1260, 1282,  770, 1284,  686,  724,  686,  724, 1285,  770,
      770, 1951,  770,  770,  725, 1951,  770,  770,  726,  770,
      770, 1286,  770,  770,  770,  770,  770,  770,  770, 1401,
      770,  770, 1286,  770, 1400,  770,  724, 1951,  770,  770,
     1951,  670,  770, 1951, 1951, 1951,  770, 1951, 1951,  770,
     1399, 1398, 1951, 1288, 1951, 1951, 1951, 1951, 1951, 1290,
     1291, 1397, 1144, 1144, 1144,  853,  854,  475,  853, 1140,

     1140, 1140, 1140, 1208, 1208, 1208, 1396, 1951, 1395, 1951,
     1130, 1300, 1414, 1296, 1294, 1414,  857,  694, 1298, 1297,
      694, 1047, 1047, 1299, 1141,  770,  770, 1301,  770,  770,
      770, 1303, 1302,  770,  770, 1394, 1393,  770, 1951, 1062,
     1063, 1062, 1062, 1063, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1392, 1391,
      857,  812,  812, 1390, 1421,  770,  812, 1422,  770, 1305,
      812, 1364, 1364, 1364, 1089, 1062, 1106, 1062, 1062, 1304,
     1389, 1306,  770,  770,  770,  770,  770,  770, 1238, 1239,

     1388, 1238,  770, 1107,  770,  770, 1387,  770,  770,  770,
      770,  770,  770,  770, 1062, 1062, 1062, 1062, 1062,  490,
      490,  812,  490,  490,  490,  877, 1386,  490,  490, 1089,
      490,  490,  490, 1385,  490, 1384,  490, 1147,  812,  812,
      812, 1147,  490,  490,  490,  490,  490, 1109,  812, 1383,
      812, 1382, 1310, 1381,  812,  812,  812, 1380, 1308,  770,
     1313, 1379,  770, 1378, 1311,  490, 1147,  490,  490, 1312,
     1314, 1652, 1652, 1652, 1319, 1142, 1142, 1142, 1142, 1214,
     1238, 1239, 1377, 1238, 1409, 1208, 1208, 1208, 1251, 1252,
      770, 1251, 1367,  770,  490,  490,  490,  490,  971,  770,

     1141,  971,  770,  770,  689,  812,  770,  689, 1366, 1316,
      689,  689,  689,  689,  689,  689, 1365,  770, 1171,  689,
      770,  689,  689,  689,  689,  689,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683, 1363,  689,  812,  689,  683, 1439,  812,
     1362, 1439, 1361, 1315, 1446,  770,  770, 1317,  770,  770,
     1360,  770,  770,  812,  770,  770, 1359,  770, 1357,  691,
      770, 1318,  691, 1440, 1274,  689, 1209, 1274, 1210,  686,
     1442, 1210, 1356, 1442, 1210, 1210, 1211, 1210, 1210, 1212,
      985, 1352, 1351, 1210, 1209, 1210, 1210, 1210, 1210, 1210,

      770,  812,  812,  770, 1350, 1267, 1347,  812,  812, 1318,
     1320, 1322, 1323,  812,  770, 1346, 1321,  770, 1210, 1327,
     1210, 1309, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213,  812,  812,  770, 1210,
      691,  770, 1289,  691,  770,  770, 1218,  770,  770, 1218,
      686, 1279, 1218, 1218, 1219, 1218, 1218, 1220, 1320,  770,
     1276, 1221,  770, 1218, 1218, 1218, 1218, 1218,  770, 1430,
     1456,  770, 1430,  770,  770, 1270,  770,  770,  853,  854,
      445,  853, 1431,  445,  812, 1269, 1218,  760, 1218,  770,

      812,  812,  770, 1336, 1263, 1341, 1262, 1018, 1256,  857,
      770, 1342, 1255,  770, 1250,  812,  770, 1324, 1325,  770,
     1249, 1328, 1326,  770,  812, 1246,  770, 1218,  975,  812,
      812,  975, 1222, 1245, 1223, 1535, 1329, 1223, 1536, 1951,
     1223, 1223, 1224, 1223, 1223, 1225, 1092, 1330, 1092, 1223,
     1222, 1223, 1223, 1223, 1223, 1223,  812,  770,  770,  984,
      770,  770,  812,  857, 1450,  436,  975,  770, 1331,  975,
      770, 1335,  770,  686, 1223,  770, 1223, 1447, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,

     1226, 1226, 1951,  812,  691, 1223,  691,  691, 1332,  691,
      979,  686,  987,  686,  686,  987,  686, 1951,  987,  987,
      988,  987,  987,  989, 1333, 1233, 1461,  990,  979,  987,
      987,  987,  987,  987,  770, 1445, 1455,  770,  770,  770,
     1414,  770,  770, 1414,  770,  770,  770,  770,  770,  770,
      770, 1205,  987,  770,  987, 1204,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      812,  670,  770,  987, 1234,  770,  770, 1234, 1202,  770,
     1234, 1234, 1235, 1234, 1234, 1236, 1448, 1334, 1454, 1237,

     1469, 1234, 1234, 1234, 1234, 1234,  853,  854, 1449,  853,
      853,  854, 1457,  853,  445,  853,  854,  445,  853, 1201,
      953, 1337, 1458, 1018, 1234, 1339, 1234, 1338, 1199, 1343,
     1137, 1340, 1198, 1197,  770, 1344,  856,  770, 1414,  451,
      452, 1414, 1196,  770,  452, 1459,  770,  770,  485,  486,
      770,  691, 1462,  486,  691, 1234,  724,  770, 1195,  724,
      770,  686,  724,  724,  724, 1257,  724,  725,  495,  452,
     1194,  726, 1233,  724,  724,  724,  724,  724,  486,  497,
      498,  857, 1193, 1192,  498,  857, 1345, 1191,  495,  436,
      857, 1190, 1465, 1464,  884, 1348,  724,  884,  724,  541,

      541,  541,  541, 1189,  511, 1472, 1155, 1186, 1185,  498,
      535,  536, 1150, 1150, 1150,  536, 1156, 1157, 1157, 1157,
      545,  770,  770, 1463,  770,  770, 1349,  724, 1951,  770,
      770, 1951,  770,  770, 1951, 1951, 1951, 1184, 1951, 1951,
      536,  770, 1182, 1951,  770, 1951, 1951, 1951, 1951, 1951,
     1570,  770,  691, 1570,  770,  691, 1181, 1353,  541,  541,
      541,  541,  686, 1238, 1239, 1155, 1238, 1180, 1951, 1215,
     1951,  770, 1179, 1216,  770, 1156, 1157, 1157, 1157,  545,
     1159, 1159, 1159, 1159, 1178, 1460,  691,  542, 1452,  691,
     1466, 1288, 1469, 1177, 1453, 1076,  686,  812, 1176, 1951,

      718,  545,  735, 1407, 1175,  735, 1174, 1408,  735,  735,
      736,  735,  735,  737, 1476, 1173, 1171,  738,  718,  735,
      735,  735,  735,  735,  691, 1467, 1170,  691,  770,  770,
      770,  770,  770,  770,  686,  566, 1169, 1358, 1358, 1358,
     1468, 1407,  735, 1168,  735, 1408,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
     1167, 1166, 1587,  735, 1021, 1587,  702, 1021, 1470,  702,
     1021, 1021, 1022, 1021, 1021, 1023, 1471, 1473, 1474, 1024,
     1573, 1021, 1021, 1021, 1021, 1021,  903, 1440, 1162,  541,

      541,  541,  541, 1161,  770,  770,  542,  770,  770, 1442,
      451,  452, 1442, 1153, 1021,  452, 1021, 1160, 1160, 1160,
      545, 1368, 1369, 1152,  770,  770, 1370,  770,  770,  770,
     1371, 1372,  770,  770, 1267, 1373,  770, 1151, 1374, 1375,
      452, 1376, 1149, 1143,  770, 1021,  724,  770, 1505,  724,
      812,  361,  724,  730,  724,  730, 1259,  725, 1475,  691,
     1139,  726,  691,  724,  724,  724,  724,  731,  408,  686,
      812,  812,  383, 1590, 1039,  812, 1217, 1208, 1208, 1208,
     1216, 1414, 1479, 1478, 1414, 1418,  724, 1038,  724, 1477,
      812, 1599, 1580, 1030, 1418, 1580, 1418, 1029, 1027, 1418,

     1418, 1418, 1418,  686,  724, 1581, 1951, 1418, 1418, 1481,
     1568, 1208, 1208, 1208, 1008, 1007, 1006,  724, 1062, 1063,
     1062, 1062, 1063, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383, 1062, 1062, 1062, 1062,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383, 1062, 1062, 1062, 1062, 1062, 1273, 1274,

     1273, 1273, 1274, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1682, 1414,  705,
     1682, 1414,  691,  853,  854,  691,  853,  445, 1951, 1002,
      445, 1951,  686,  959, 1273, 1273, 1273, 1273, 1130, 1215,
      958,  670, 1135, 1216,  857,  956,  770,  770, 1136,  770,
      770,  770,  954,  770,  770,  770,  770,  770,  770,  770,
      770,  951,  770, 1273, 1273, 1273, 1273, 1273, 1062, 1063,
     1062, 1062, 1063, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062,  812,  857,  812,
      661,  812,  436,  812,  947, 1484,  445, 1951, 1592,  445,
     1951, 1591, 1044, 1951, 1062, 1106, 1062, 1062, 1480,  946,
      652, 1343, 1485, 1486,  944,  770,  770, 1344,  770,  770,
      943,  646,  770,  770,  770,  770,  770,  770,  770,  770,
      941,  770,  770, 1062, 1062, 1062, 1062, 1062, 1273, 1274,
     1273, 1273, 1274, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273,  940,  812,  812,
      812,  436, 1214,  939,  812,  812, 1605, 1409, 1208, 1208,

     1208,  938, 1482, 1593, 1273, 1307, 1273, 1273, 1483, 1487,
      770, 1489,  770,  770, 1488,  770,  770, 1491,  634,  770,
      936,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770, 1273, 1273, 1273, 1273, 1273, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062,  812,  812,  812,
     1600, 1594,  935,  812,  812,  812, 1601, 1490, 1494,  770,
     1607, 1119,  770, 1320, 1062, 1062, 1062, 1062, 1492, 1493,
      770,  702,  770,  770,  702,  770,  770, 1496,  932,  770,

      770,  770,  770,  770,  770,  770,  931,  770,  770,  770,
      770,  770,  770, 1062, 1062, 1062, 1062, 1062,  853,  854,
      930,  853,  929,  770,  724,  812,  770,  724,  928,  925,
      724,  730,  724, 1132,  730,  725,  812, 1495,  812,  856,
      619,  724,  724,  724,  724,  731, 1497,  812,  812,  485,
      486, 1499, 1500,  812,  486,  812,  853,  854,  924,  853,
     1501, 1498, 1603, 1595,  724, 1502,  724, 1503,  923,  812,
      922, 1137, 1499,  725,  921,  770, 1611,  856,  770,  486,
      920, 1504,  600,  770,  600,  770,  770, 1508,  770,  770,
      919,  770,  770,  857,  770,  724,  490,  490,  595,  490,

      490,  490,  877,  770,  490,  490,  770,  490,  490,  490,
      917,  490,  770,  878, 1147,  770,  915,  593, 1147,  490,
      490,  490,  494,  490,  770,  535,  536,  770, 1597,  588,
      536,  857,  853,  854,  914,  853,  770,  853,  854,  770,
      853,  583,  490, 1147,  490,  490, 1596, 1337, 1598, 1018,
     1602,  912, 1137, 1338,  725,  536,  770, 1604,  856,  770,
     1608,  911,  909, 1513, 1609,  770,  770,  770,  770,  770,
      770,  490,  490,  490,  490,  490,  490,  908,  490,  490,
      490,  877,  905,  490,  490,  798,  490,  490,  490,  903,
      490, 1705,  490, 1147, 1705,  902,  551, 1147,  490,  490,

      490,  490,  490,  770, 1615,  770,  770,  857,  770,  900,
      445, 1951,  857,  445,  896,  770,  691, 1610,  770,  691,
     1613,  490, 1147,  490,  490, 1341,  686, 1018, 1606,  770,
     1612, 1342,  770, 1217, 1208, 1208, 1208, 1216,  691,  533,
      770,  691,  770,  770, 1853,  770,  890, 1853,  686,  812,
      490,  490,  490,  490,  691, 1407, 1624,  691, 1209, 1408,
     1218,  812, 1587, 1218,  686, 1587, 1218, 1218, 1219, 1218,
     1218, 1220, 1724,  528,  889, 1221, 1209, 1218, 1218, 1218,
     1218, 1218,  523, 1617,  888,  436,  812, 1440,  812,  686,
      770, 1616, 1614,  770, 1618,  518, 1568, 1208, 1208, 1208,

     1218,  504, 1218,  877, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,  877,  877,
      770, 1218, 1410,  770,  770, 1410,  812,  770, 1410, 1410,
     1411, 1410, 1410, 1412,  495,  770,  483, 1413,  770, 1410,
     1410, 1410, 1410, 1410,  770,  497,  498,  770, 1620,  770,
      498,  871,  770,  770,  495,  467,  770,  867,  541,  541,
      541,  541, 1410,  459, 1410, 1155,  812,  541,  541,  541,
      541,  865,  457,  449, 1155,  498, 1355, 1355, 1355,  545,
     1632,  812, 1712, 1509, 1514, 1515, 1515, 1515,  545, 1916,

      812,  861, 1916, 1410,  691,  812,  809,  691,  979,  812,
      987, 1089,  808,  987,  686, 1619,  987,  987,  988,  987,
      987,  989, 1622,  807, 1621,  990,  979,  987,  987,  987,
      987,  987,  691,  770,  806,  691,  770,  770,  797,  785,
      770,  770,  686,  770,  770,  774,  770,  765,  770, 1407,
      987,  770,  987, 1408,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  764,  812,
      751,  987, 1234,  812,  350, 1234,  715,  812, 1234, 1234,
     1235, 1234, 1234, 1236,  812, 1626, 1623, 1237,  711, 1234,

     1234, 1234, 1234, 1234, 1625,  710, 1720, 1951, 1414, 1629,
      770, 1414, 1418,  770,  770, 1934,  770,  770, 1934,  770,
      673, 1418, 1234, 1418, 1234,  671, 1418, 1418, 1418, 1418,
      670,  667,  665,  770, 1418, 1418,  770,  770,  770,  664,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      662,  770,  770, 1234,  724,  770,  812,  724,  770,  661,
      724,  724,  724, 1433, 1015,  725, 1713,  770, 1066,  726,
      770,  724,  724,  724,  724,  724, 1630,  770,  770,  812,
      770,  770,  770,  812,  812,  770,  659,  658,  812,  812,
      812, 1627, 1631,  656,  724,  812,  724, 1628, 1718,  650,

     1633, 1636,  770,  838,  634,  770,  770, 1634,  770,  770,
      619,  770,  770, 1635,  770,  770, 1716,  770,  605,  770,
      604, 1714,  770,  812,  812,  724, 1951,  603, 1637, 1951,
      451,  452, 1951, 1951, 1951,  452, 1016, 1951,  601,  600,
      596, 1951, 1640, 1951, 1951, 1951, 1951, 1951,  812,  595,
      770,  588,  812,  770,  812, 1286,  485,  486,  812,  770,
      452,  486,  770,  584, 1719, 1643, 1951,  583, 1951, 1639,
     1638, 1641,  770, 1066,  770,  770,  551,  770,  533,  770,
     1642,  770,  770,  528,  770,  770,  486,  770,  770,  770,
      770, 1646,  770,  770,  535,  536,  770, 1951,  724,  536,

      523,  724, 1715,  361,  724,  730,  724,  730, 1259,  725,
      495,  770,  518,  726,  770,  724,  724,  724,  724,  731,
     1936,  497,  498, 1936,  536,  504,  498, 1726, 1717, 1651,
      495, 1722, 1723,  770,  770, 1721,  770,  770,  724,  483,
      724,  541,  541,  541,  541, 1729, 1723, 1725, 1155,  770,
      798,  498,  770, 1813,  770,  483, 1647,  770, 1514, 1515,
     1515, 1515,  545,  770,  467,  770,  770, 1730,  770,  724,
     1062, 1063, 1062, 1062, 1063, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,  457,

     1727,  449, 1814,  541,  541,  541,  541, 1728, 1731, 1809,
     1155,  812, 1809, 1951,  352,  350, 1062, 1062, 1062, 1062,
     1514, 1515, 1515, 1515,  545, 1943, 1730, 1936, 1943, 1943,
     1936, 1732, 1943, 1949, 1810, 1087, 1949, 1087, 1087, 1087,
     1087,  340,  335,  333, 1951, 1062, 1062, 1062, 1062, 1062,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1273, 1273, 1273, 1273,

     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1273, 1273, 1273, 1273, 1273,
     1062, 1063, 1062, 1062, 1063, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,  332,
      770,  770,  332,  770,  770, 1861,  770,  133, 1861,  770,
      133,  770, 1827,  345,  770, 1827, 1062, 1106, 1062, 1062,
      770, 1951,  770,  770,  770,  770,  770,  770,  770,  770,
     1810,  770,  770,  770,  770,  770,  770,  770,  770,  770,

     1951,  770,  770, 1951, 1951, 1062, 1062, 1062, 1062, 1062,
      853,  854,  812,  853,  718, 1825,  735,  812, 1828,  735,
     1109, 1816,  735,  735,  736, 1133,  735,  737,  812, 1733,
      812, 1134,  718,  735,  735,  735,  735,  735,  812,  812,
      812, 1818, 1734, 1737,  812,  812,  770, 1735, 1109,  770,
     1736, 1745, 1815, 1738,  770, 1899,  735,  770,  735, 1951,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723, 1951,  857,  770,  735, 1021,  770,
      770, 1021,  812,  770, 1021, 1021, 1022, 1339, 1021, 1023,

      812, 1951, 1951, 1340, 1739, 1021, 1021, 1021, 1021, 1021,
      770, 1951, 1951,  770, 1747,  770,  770, 1951,  770,  770,
      770,  770,  770,  770,  770,  770, 1951, 1951, 1021, 1951,
     1021, 1951,  812, 1951,  770,  770, 1740,  770,  770, 1951,
     1951, 1951,  770,  770,  770,  770,  770,  770, 1951,  770,
     1951,  770,  770,  770,  770, 1822,  770, 1951, 1951, 1021,
      691,  812,  812,  691, 1209, 1951, 1218,  812,  812, 1218,
      686, 1821, 1218, 1218, 1219, 1218, 1218, 1220, 1741, 1742,
      812, 1221, 1209, 1218, 1218, 1218, 1218, 1218,  812, 1748,
      812, 1951, 1743, 1454, 1318,  812, 1746,  770, 1819,  812,

      770, 1750,  770, 1820, 1066,  770, 1218,  838, 1218, 1751,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1951, 1951,  770, 1218, 1410,  770,
     1951, 1410, 1951,  812, 1410, 1410, 1411, 1410, 1410, 1412,
     1744,  770, 1951, 1413,  770, 1410, 1410, 1410, 1410, 1410,
     1824,  451,  452, 1951, 1744,  495,  452, 1951,  770,  770,
      770,  770,  770,  770,  485,  486,  497,  498, 1410,  486,
     1410,  498,  812,  770,  770,  495,  770,  770, 1951,  770,
      770,  452,  770,  770, 1749,  770, 1951,  812,  770,  770,

      770, 1951,  770,  770,  486, 1951,  498,  535,  536, 1410,
      724, 1753,  536,  724, 1751,  812,  724,  724,  724, 1433,
     1015,  725, 1862, 1752, 1756,  726, 1757,  724,  724,  724,
      724,  724, 1469,  451,  452,  812,  812,  536,  452, 1951,
      541,  541,  541,  541, 1826,  812, 1047, 1155,  770, 1951,
      724,  770,  724, 1829, 1454, 1951, 1831, 1761, 1652, 1652,
     1652,  545,  770,  452, 1864,  770,  770, 1830,  770,  770,
     1951,  770,  770,  770,  770,  770,  770,  770, 1951, 1951,
      770,  724, 1951,  770,  770, 1951, 1951,  770, 1951, 1951,
     1951, 1951, 1016, 1951,  812,  770, 1951, 1951,  770, 1951,

     1951, 1951, 1951, 1951, 1951, 1951,  485,  486,  812, 1832,
     1951,  486,  812, 1861,  812, 1951, 1861, 1951,  812,  812,
      812, 1951, 1951, 1951, 1951, 1836,  812, 1834, 1951,  770,
      812, 1835,  770, 1837, 1951, 1484,  486,  770, 1810, 1838,
      770, 1109, 1840,  770, 1951, 1895,  770,  770,  770,  770,
      770,  770,  770, 1951, 1062, 1063, 1062, 1062, 1063, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062,  812, 1951,  535,  536, 1951, 1951,  812,
      536, 1841, 1044,  812,  812,  770,  770, 1951,  770,  770,

     1062, 1062, 1062, 1062,  770, 1499,  770,  770, 1842,  770,
     1092,  770, 1863,  770,  770,  536,  770,  770,  770, 1951,
      770,  770,  770,  770,  770,  770,  770,  770, 1951, 1062,
     1062, 1062, 1062, 1062, 1062, 1063, 1062, 1062, 1063, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1818, 1865, 1866, 1951, 1951, 1288, 1286,
     1869, 1921, 1951,  495, 1867, 1827,  345, 1047, 1827, 1951,
     1062, 1106, 1062, 1062,  497,  498, 1868,  770,  770,  498,
      770,  770, 1870,  495,  770,  770, 1951,  770,  770,  770,

      770,  770,  770,  770,  770,  770, 1951, 1951,  770, 1062,
     1062, 1062, 1062, 1062,  498,  770, 1951,  770,  770,  770,
      770,  346,  770,  770,  770,  770,  770,  770,  770,  770,
     1951, 1951,  770,  812,  812,  770,  770, 1951,  770,  770,
      812,  812, 1872, 1951, 1951,  812,  812,  812, 1951,  770,
     1089,  812,  770,  770, 1951, 1951,  770, 1873, 1875, 1951,
     1951,  812, 1876,  812, 1874,  812, 1951, 1834,  770,  812,
      812,  770, 1320,  770,  770, 1879,  770,  770, 1318, 1951,
     1877, 1878, 1896,  770,  770, 1951,  770,  770, 1897,  770,
     1951,  770,  770, 1880,  770,  770, 1951,  770,  770, 1076,

      770, 1951, 1951, 1951, 1898,  770, 1901,  770,  770,  770,
      770, 1951,  770,  770,  812,  770,  770, 1900,  770,  812,
      812, 1092,  770, 1903, 1951,  770, 1951, 1904,  770,  812,
      812,  770, 1951,  770, 1951,  812,  770,  812, 1951,  770,
     1951,  812,  770,  812,  770,  770, 1905,  770,  770, 1951,
     1909, 1951,  770, 1906, 1119,  770, 1907, 1951,  770,  770,
     1922,  770,  770, 1908,  770, 1951, 1920,  770,  812, 1730,
     1951, 1924, 1936, 1923,  812, 1936, 1951,  770,  770,  812,
      770,  770, 1484, 1926, 1951,  812,  770, 1927, 1951,  770,
      812,  812, 1928,  770, 1951, 1951,  770,  770,  812,  770,

      770,  770,  770, 1930,  770, 1951, 1751, 1951, 1929,  344,
      345,  986,  344, 1286,  986, 1951,  955, 1419,  812, 1951,
     1419, 1937, 1951,  812,  812, 1951,  955, 1951, 1938,  955,
      955,  955, 1318, 1951, 1951,  986, 1951,  986,  955,  812,
     1940, 1419, 1951, 1419, 1951,  812, 1951,  812,  955, 1951,
     1818,  955,  955,  955, 1951, 1828, 1951, 1941, 1951, 1951,
     1076, 1951, 1951, 1834, 1119,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,  334, 1043, 1951,
     1043, 1043, 1043, 1043,  334, 1951, 1951,  334,  334,  334,
     1951,  334,  349,  349, 1951,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  351, 1951,
     1951, 1951, 1951,  351,  351,  351,  351,  351,  351, 1951,

      351,  351,  351,  351,  351,  351, 1087,  351, 1087, 1087,
     1087, 1087, 1951, 1951, 1951,  351,  353, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  353, 1951,  353,  353,  353,  353, 1951,
     1951, 1951, 1951,  353,  355, 1951, 1951, 1951, 1951,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355, 1951, 1951,
     1951,  355,  364, 1951, 1951, 1951,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364, 1951, 1951, 1951,  364,

      407, 1951,  407,  407, 1951,  407, 1951, 1951, 1951, 1951,
     1951,  407,  407, 1951,  407,  407,  407,  407,  430, 1951,
      430,  430,  430,  430,  430, 1951, 1951, 1951, 1951,  430,
      430, 1951,  430,  430,  430,  430,  448,  448, 1951,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  450, 1951, 1951, 1951, 1951, 1951,  450, 1951,
      450,  450,  450,  450,  450, 1951, 1951, 1951, 1951,  450,
      450,  450,  450,  450,  450,  450, 1951, 1951, 1951, 1951,

      450,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  458, 1951,  458,
      458,  458,  458, 1951, 1951, 1951, 1951,  458,  461,  461,
      461,  461, 1951, 1951, 1951, 1951, 1951,  461, 1951,  461,
      461,  461,  461, 1951, 1951, 1951, 1951,  461,  470,  470,
      470,  470, 1951, 1951, 1951,  470, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  470, 1951, 1951,  470, 1951, 1951, 1951,
     1951, 1951,  470, 1951,  470,  470,  470,  470, 1951, 1951,

     1951,  470,  470,  474,  474,  474,  474, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  474,  474,
      474,  474,  474, 1951, 1951, 1951, 1951,  474, 1951,  474,
      474,  474,  474, 1951, 1951, 1951, 1951,  474,  481,  481,
      481,  481, 1951, 1951, 1951,  481, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951,  481, 1951,  481,  481,  481,  481, 1951, 1951,
     1951, 1951,  481,  482,  482, 1951,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  484,
     1951, 1951, 1951, 1951, 1951,  484, 1951,  484,  484,  484,
      484,  484, 1951, 1951, 1951, 1951,  484,  484,  484,  484,
      484,  484,  484, 1951, 1951, 1951, 1951,  484,  492,  492,
     1951,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  496,  496, 1951, 1951, 1951, 1951,
     1951,  496, 1951,  496,  496,  496,  496,  496, 1951, 1951,
      496, 1951,  496,  496,  496,  496,  496,  496,  496, 1951,

     1951, 1951, 1951,  496,  507,  507,  507,  507, 1951, 1951,
     1951,  507, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  507,
     1951, 1951,  507, 1951, 1951, 1951, 1951, 1951,  507, 1951,
      507,  507,  507,  507, 1951, 1951, 1951,  507,  507,  513,
      513,  513,  513, 1951, 1951, 1951, 1951, 1951,  513, 1951,
     1951, 1951, 1951, 1951,  513,  513,  513,  513, 1951, 1951,
     1951, 1951, 1951,  513, 1951,  513,  513,  513,  513, 1951,
     1951, 1951, 1951,  513,  516,  516,  516,  516, 1951, 1951,
     1951,  516, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  516, 1951,

      516,  516,  516,  516, 1951, 1951, 1951, 1951,  516,  517,
     1951,  517,  517, 1951, 1951, 1951, 1951, 1951, 1951,  517,
     1951,  517,  517,  517,  517, 1951, 1951, 1951, 1951,  517,
      522,  522, 1951,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  527,  527, 1951,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  527,  532,  532, 1951,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  534, 1951,
     1951, 1951, 1951, 1951,  534, 1951,  534,  534,  534,  534,
      534, 1951, 1951, 1951, 1951,  534,  534,  534,  534,  534,
      534,  534, 1951, 1951, 1951, 1951,  534,  540, 1951,  540,
      540,  540,  540, 1951, 1951, 1951, 1951,  540,  546,  546,
      546,  546, 1951, 1951, 1951,  546, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  546,  546,  546, 1951, 1951, 1951,

     1951, 1951,  546, 1951,  546,  546,  546,  546, 1951, 1951,
     1951, 1951,  546,  554,  554,  554,  554, 1951, 1951, 1951,
      554, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  554, 1951,
     1951,  554, 1951, 1951, 1951, 1951, 1951,  554, 1951,  554,
      554,  554,  554, 1951, 1951, 1951,  554,  554,  558,  558,
      558,  558, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  558,  558,  558,  558, 1951, 1951, 1951,
     1951, 1951,  558, 1951,  558,  558,  558,  558, 1951, 1951,
     1951, 1951,  558,  564,  564,  564,  564, 1951, 1951, 1951,
      564, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951,  564, 1951,  564,
      564,  564,  564, 1951, 1951, 1951, 1951,  564,  565, 1951,
      565,  565,  565,  565, 1951, 1951, 1951, 1951,  565,  568,
      568,  568, 1951, 1951, 1951, 1951, 1951, 1951,  568, 1951,
      568,  568,  568,  568, 1951, 1951, 1951, 1951,  568,  572,
      572,  572,  572, 1951, 1951, 1951, 1951, 1951, 1951,  572,
     1951,  572,  572,  572,  572, 1951, 1951, 1951, 1951,  572,
      578,  578, 1951,  578,  578,  578,  578,  578,  578,  578,
      578,  578, 1951,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578, 1951,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  582, 1951,  582,  582,
     1951, 1951, 1951, 1951, 1951, 1951,  582, 1951,  582,  582,
      582,  582, 1951, 1951, 1951, 1951,  582,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585, 1951,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  587,  587, 1951,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587, 1951,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  589,

      589, 1951,  589, 1951, 1951,  589,  589,  589, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  589, 1951,
      589, 1951,  589, 1951,  589,  589, 1951, 1951, 1951, 1951,
     1951, 1951,  589,  594, 1951,  594,  594, 1951, 1951, 1951,
     1951, 1951, 1951,  594, 1951,  594,  594,  594,  594, 1951,
     1951, 1951, 1951,  594,  599,  599, 1951,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      602,  602, 1951,  602, 1951,  602,  602,  602,  602,  602,

      602,  602, 1951,  602,  602,  602,  602, 1951,  602,  602,
      602,  602,  602,  602, 1951,  602, 1951,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  612, 1951, 1951,  612,
     1951, 1951, 1951, 1951, 1951,  612, 1951, 1951, 1951, 1951,
      612,  612, 1951,  612, 1951, 1951, 1951, 1951, 1951, 1951,
      612, 1951,  612,  612,  612,  612,  620,  620, 1951,  620,
     1951,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
     1951,  620, 1951,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  624,  624, 1951,  624, 1951,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624, 1951,  624, 1951,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  633, 1951,
      633,  633, 1951, 1951, 1951, 1951, 1951, 1951,  633, 1951,
      633,  633,  633,  633, 1951, 1951, 1951, 1951,  633,  638,
      638, 1951,  638,  638,  638,  638,  638,  638,  638, 1951,
     1951,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638, 1951,  638, 1951,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  645, 1951,  645,  645,  645,
      645, 1951, 1951, 1951, 1951,  645,  648,  648,  648,  648,

     1951, 1951, 1951, 1951, 1951,  648, 1951,  648,  648,  648,
      648, 1951, 1951, 1951, 1951,  648,  651, 1951,  651,  651,
      651,  651, 1951, 1951, 1951, 1951,  651,  654,  654,  654,
      654, 1951, 1951, 1951, 1951, 1951,  654, 1951,  654,  654,
      654,  654, 1951, 1951, 1951, 1951,  654,  657,  657, 1951,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657, 1951,  657, 1951,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  660, 1951,  660,  660, 1951, 1951, 1951,
     1951, 1951, 1951,  660, 1951,  660,  660,  660,  660, 1951,

     1951, 1951, 1951,  660,  663,  663, 1951,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663, 1951,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
     1951,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      666,  666, 1951,  666,  666,  666,  666,  666,  666,  666,
      666,  666, 1951,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666, 1951,  666, 1951,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  669, 1951,  669,  669,
      669,  669,  669, 1951, 1951, 1951, 1951, 1951,  669, 1951,
      669,  669,  669,  669, 1951, 1951, 1951, 1951,  669,  672,

      672, 1951,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672, 1951,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674, 1951, 1951,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  688, 1951, 1951,  688, 1951, 1951, 1951, 1951, 1951,
      688, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  688,
     1951, 1951, 1951, 1951, 1951,  688, 1951,  688,  689, 1951,

     1951, 1951, 1951,  689,  689,  689,  689,  689,  689, 1951,
      689,  689,  689,  689,  689,  689, 1951,  689, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  689,  693,  693, 1951,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  695, 1951, 1951,  695, 1951, 1951, 1951, 1951,
     1951,  695, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  695,
      695, 1951, 1951, 1951, 1951, 1951,  695, 1951,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  708,  708,  708,  708, 1951,  708,
     1951, 1951, 1951,  708, 1951,  708,  708,  708,  708,  383,
      383,  383, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951,  383, 1951,  383, 1951,  383,  383,  383,  383,

      383,  383,  383,  383, 1951,  383,  383,  349,  349, 1951,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  724, 1951, 1951, 1951, 1951,  724,  724,
      724,  724,  724,  724, 1951,  724,  724,  724,  724,  724,
      724, 1951,  724, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
      724,  353, 1951,  353,  353,  353,  353, 1951, 1951, 1951,
     1951,  353,  728,  728,  728, 1951, 1951, 1951, 1951, 1951,
      728, 1951,  728,  728,  728,  728, 1951, 1951, 1951, 1951,

      728,  355, 1951, 1951, 1951, 1951,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355, 1951, 1951, 1951,  355,  733,
     1951, 1951, 1951, 1951,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733, 1951, 1951, 1951,  733,  767, 1951, 1951,
     1951, 1951,  767,  767,  767,  767,  767,  767, 1951,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767, 1951, 1951, 1951,  767,  811, 1951, 1951, 1951, 1951,
      811,  811,  811,  811,  811,  811, 1951,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811, 1951,
     1951, 1951,  811,  407, 1951,  407,  407, 1951,  407, 1951,
     1951, 1951, 1951, 1951,  407,  407, 1951,  407,  407,  407,
      407,  408, 1951, 1951,  408, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  408,  408,  408,  408,  408,
      408,  429, 1951,  429,  429,  429,  429,  429, 1951, 1951,
     1951, 1951,  429,  429, 1951,  429,  429,  429,  429,  430,
     1951,  430,  430,  430,  430,  430, 1951, 1951, 1951, 1951,
      430,  430, 1951,  430,  430,  430,  430,  448,  448, 1951,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  450, 1951, 1951, 1951, 1951, 1951,  450,
     1951,  450,  450,  450,  450,  450, 1951, 1951, 1951, 1951,
      450,  450,  450,  450,  450,  450,  450, 1951, 1951, 1951,
     1951,  450,  862, 1951, 1951, 1951, 1951, 1951,  862, 1951,
      862, 1951,  862,  862,  862, 1951, 1951, 1951, 1951,  862,
      862,  862,  862,  862,  862,  862, 1951, 1951, 1951, 1951,
      862,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  461,  461,  461,
      461, 1951, 1951, 1951, 1951, 1951,  461, 1951,  461,  461,
      461,  461, 1951, 1951, 1951, 1951,  461,  458, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  458, 1951,  458,  458,  458,  458,
     1951, 1951, 1951, 1951,  458,  470,  470,  470,  470, 1951,
     1951, 1951,  470, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
      470, 1951, 1951,  470, 1951, 1951, 1951, 1951, 1951,  470,

     1951,  470,  470,  470,  470, 1951, 1951, 1951,  470,  470,
      474,  474,  474,  474, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  474,  474,  474,  474,  474,
     1951, 1951, 1951, 1951,  474, 1951,  474,  474,  474,  474,
     1951, 1951, 1951, 1951,  474,  481,  481,  481,  481, 1951,
     1951, 1951,  481, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  481,
     1951,  481,  481,  481,  481, 1951, 1951, 1951, 1951,  481,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,

      869,  869, 1951,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  873,  873, 1951,  873,
     1951, 1951, 1951, 1951,  873, 1951,  873,  873,  873,  873,
     1951, 1951, 1951, 1951,  873,  482,  482, 1951,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  484, 1951, 1951, 1951, 1951, 1951,  484, 1951,  484,
      484,  484,  484,  484, 1951, 1951, 1951, 1951,  484,  484,
      484,  484,  484,  484,  484, 1951, 1951, 1951, 1951,  484,

      874, 1951, 1951, 1951, 1951, 1951,  874, 1951,  874, 1951,
      874,  874,  874, 1951, 1951, 1951, 1951,  874,  874,  874,
      874,  874,  874,  874, 1951, 1951, 1951, 1951,  874,  490,
      490, 1951,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  492,  492, 1951,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  496,  496, 1951, 1951, 1951, 1951, 1951,  496, 1951,
      496,  496,  496,  496,  496, 1951, 1951,  496, 1951,  496,
      496,  496,  496,  496,  496,  496, 1951, 1951, 1951, 1951,
      496,  879, 1951, 1951, 1951, 1951, 1951,  879, 1951,  879,
     1951,  879,  879,  879, 1951, 1951, 1951, 1951,  879,  879,
      879,  879,  879,  879,  879, 1951, 1951, 1951, 1951,  879,
      507,  507,  507,  507, 1951, 1951, 1951,  507, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  507, 1951, 1951,  507, 1951,
     1951, 1951, 1951, 1951,  507, 1951,  507,  507,  507,  507,
     1951, 1951, 1951,  507,  507,  513,  513,  513,  513, 1951,

     1951, 1951, 1951, 1951,  513, 1951, 1951, 1951, 1951, 1951,
      513,  513,  513,  513, 1951, 1951, 1951, 1951, 1951,  513,
     1951,  513,  513,  513,  513, 1951, 1951, 1951, 1951,  513,
      516,  516,  516,  516, 1951, 1951, 1951,  516, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  516, 1951,  516,  516,  516,  516,
     1951, 1951, 1951, 1951,  516,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882, 1951,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  886, 1951, 1951,  886, 1951, 1951, 1951, 1951, 1951,
      886, 1951, 1951, 1951, 1951, 1951, 1951,  886,  886, 1951,
     1951, 1951, 1951, 1951, 1951,  886, 1951,  886,  886,  886,
      886, 1951, 1951, 1951, 1951,  886,  517, 1951,  517,  517,
     1951, 1951, 1951, 1951, 1951, 1951,  517, 1951,  517,  517,
      517,  517, 1951, 1951, 1951, 1951,  517,  522,  522, 1951,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  527,  527, 1951,  527,  527,  527,  527,

      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  532,
      532, 1951,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  534, 1951, 1951, 1951, 1951,
     1951,  534, 1951,  534,  534,  534,  534,  534, 1951, 1951,
     1951, 1951,  534,  534,  534,  534,  534,  534,  534, 1951,
     1951, 1951, 1951,  534,  891, 1951, 1951, 1951, 1951, 1951,

      891, 1951,  891, 1951,  891,  891,  891, 1951, 1951, 1951,
     1951,  891,  891,  891,  891,  891,  891,  891, 1951, 1951,
     1951, 1951,  891,  546,  546,  546,  546, 1951, 1951, 1951,
      546, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  546,
      546,  546, 1951, 1951, 1951, 1951, 1951,  546, 1951,  546,
      546,  546,  546, 1951, 1951, 1951, 1951,  546,  894, 1951,
      894,  894,  894,  894, 1951, 1951, 1951, 1951,  894,  899,
      899,  899,  899, 1951, 1951, 1951,  899, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  899,  899,  899, 1951, 1951,
     1951, 1951, 1951,  899, 1951,  899,  899,  899,  899, 1951,

     1951, 1951, 1951,  899,  554,  554,  554,  554, 1951, 1951,
     1951,  554, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  554,
     1951, 1951,  554, 1951, 1951, 1951, 1951, 1951,  554, 1951,
      554,  554,  554,  554, 1951, 1951, 1951,  554,  554,  558,
      558,  558,  558, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  558,  558,  558,  558, 1951, 1951,
     1951, 1951, 1951,  558, 1951,  558,  558,  558,  558, 1951,
     1951, 1951, 1951,  558,  564,  564,  564,  564, 1951, 1951,
     1951,  564, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  564, 1951,

      564,  564,  564,  564, 1951, 1951, 1951, 1951,  564,  904,
      904, 1951, 1951, 1951, 1951, 1951, 1951,  904, 1951,  904,
      904,  904,  904, 1951, 1951, 1951, 1951,  904,  568,  568,
      568, 1951, 1951, 1951, 1951, 1951, 1951,  568, 1951,  568,
      568,  568,  568, 1951, 1951, 1951, 1951,  568,  906, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  906, 1951,  906,  906,  906,
      906, 1951, 1951, 1951, 1951,  906,  572,  572,  572,  572,
     1951, 1951, 1951, 1951, 1951, 1951,  572, 1951,  572,  572,
      572,  572, 1951, 1951, 1951, 1951,  572,  578,  578, 1951,

      578,  578,  578,  578,  578,  578,  578,  578,  578, 1951,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578, 1951,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  582, 1951,  582,  582, 1951, 1951, 1951,
     1951, 1951, 1951,  582, 1951,  582,  582,  582,  582, 1951,
     1951, 1951, 1951,  582,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585, 1951,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      587,  587, 1951,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587, 1951,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  916, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  916, 1951,  916,  916,  916,  916, 1951,
     1951, 1951, 1951,  916,  594, 1951,  594,  594, 1951, 1951,
     1951, 1951, 1951, 1951,  594, 1951,  594,  594,  594,  594,
     1951, 1951, 1951, 1951,  594,  599,  599, 1951,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  602,  602, 1951,  602, 1951,  602,  602,  602,  602,
      602,  602,  602, 1951,  602,  602,  602,  602, 1951,  602,
      602,  602,  602,  602,  602, 1951,  602, 1951,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  612, 1951, 1951,
      612, 1951, 1951, 1951, 1951, 1951,  612, 1951, 1951, 1951,
     1951,  612,  612, 1951,  612, 1951, 1951, 1951, 1951, 1951,
     1951,  612, 1951,  612,  612,  612,  612,  620,  620, 1951,
      620, 1951,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620, 1951,  620, 1951,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  624,  624, 1951,  624, 1951,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624, 1951,  624, 1951,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  633,
     1951,  633,  633, 1951, 1951, 1951, 1951, 1951, 1951,  633,
     1951,  633,  633,  633,  633, 1951, 1951, 1951, 1951,  633,
      638,  638, 1951,  638,  638,  638,  638,  638,  638,  638,
     1951, 1951,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638, 1951,  638, 1951,  638,  638,  638,

      638,  638,  638,  638,  638,  638,  648,  648,  648,  648,
     1951, 1951, 1951, 1951, 1951,  648, 1951,  648,  648,  648,
      648, 1951, 1951, 1951, 1951,  648,  645, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  645, 1951,  645,  645,  645,  645, 1951,
     1951, 1951, 1951,  645,  654,  654,  654,  654, 1951, 1951,
     1951, 1951, 1951,  654, 1951,  654,  654,  654,  654, 1951,
     1951, 1951, 1951,  654,  651, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951,  651, 1951,  651,  651,  651,  651, 1951, 1951, 1951,

     1951,  651,  657,  657, 1951,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657, 1951,  657, 1951,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  660, 1951,
      660,  660, 1951, 1951, 1951, 1951, 1951, 1951,  660, 1951,
      660,  660,  660,  660, 1951, 1951, 1951, 1951,  660,  663,
      663, 1951,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663, 1951,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663, 1951,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  666,  666, 1951,  666,  666,

      666,  666,  666,  666,  666,  666,  666, 1951,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666, 1951,
      666, 1951,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  669, 1951,  669,  669,  669,  669,  669, 1951, 1951,
     1951, 1951, 1951,  669, 1951,  669,  669,  669,  669, 1951,
     1951, 1951, 1951,  669,  957, 1951,  957,  957,  957,  957,
     1951, 1951, 1951, 1951,  957,  672,  672, 1951,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672, 1951,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674, 1951, 1951,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  683, 1951, 1951,
      683, 1951, 1951, 1951, 1951, 1951,  683, 1951, 1951, 1951,
     1951, 1951, 1951,  683, 1951,  683, 1951, 1951, 1951, 1951,
     1951,  683, 1951,  683,  970, 1951, 1951, 1951, 1951,  970,
      970,  970,  970,  970,  970, 1951,  970,  970,  970,  970,
      970,  970, 1951,  970, 1951, 1951, 1951, 1951, 1951, 1951,
     1951,  970,  974,  974, 1951,  974,  974,  974,  974,  974,

      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  976, 1951,
     1951,  976, 1951, 1951, 1951, 1951, 1951,  976, 1951, 1951,
     1951, 1951, 1951, 1951,  976,  976,  976, 1951, 1951, 1951,
     1951, 1951,  976, 1951,  976,  976,  976,  976,  978, 1951,
     1951,  978,  978, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
      978, 1951,  978, 1951, 1951,  978,  978, 1951, 1951, 1951,
      978,  978,  978, 1951,  978,  693,  693, 1951,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  984, 1951, 1951,  984, 1951, 1951,  984, 1951, 1951,
      984, 1951,  984,  984,  984,  984,  984,  984, 1951,  984,
      984,  984,  984,  984,  984, 1951,  984, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  984,  986, 1951, 1951,  986,  986,
     1951, 1951, 1951, 1951, 1951, 1951, 1951,  986, 1951,  986,
     1951, 1951,  986,  986, 1951, 1951, 1951,  986,  986,  986,
     1951,  986,  695, 1951, 1951,  695, 1951, 1951, 1951, 1951,
     1951,  695, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  695,

      695, 1951, 1951, 1951, 1951, 1951,  695, 1951,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  708,  708,  708,  708, 1951, 1951,
     1951, 1951, 1951,  708, 1951,  708,  708,  708,  708,  383,

     1951, 1951,  383, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  383, 1951,  383,  383,  383,  383,  811,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  811,
     1951,  811,  811,  811,  811,  351, 1951, 1951, 1951, 1951,
      351,  351,  351,  351,  351,  351, 1951,  351,  351,  351,
      351,  351,  351, 1951,  351, 1951, 1951, 1951, 1951, 1951,
     1951, 1951,  351, 1012, 1012, 1012, 1951, 1951, 1951, 1951,
     1951, 1012, 1951, 1012, 1012, 1012, 1012,  724, 1951, 1951,
     1951, 1951,  724,  724,  724,  724,  724,  724, 1951,  724,

      724,  724,  724,  724,  724, 1951,  724, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  724,  728,  728,  728, 1951, 1951,
     1951, 1951, 1951,  728, 1951,  728,  728,  728,  728, 1951,
     1951, 1951, 1951,  728, 1014, 1014, 1951, 1014, 1014, 1014,
     1014, 1014, 1951, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
      355, 1951, 1951, 1951, 1951,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355, 1951, 1951, 1951,  355,  733, 1951,

     1951, 1951, 1951,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733, 1951, 1951, 1951,  733, 1017, 1951, 1951, 1951,
     1951, 1017, 1017, 1017, 1017, 1017, 1017, 1951, 1017, 1017,
     1017, 1017, 1017, 1017, 1951, 1017, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1017, 1033, 1033, 1951, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
      767, 1951, 1951,  767, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  767, 1951,  767,  767,  767,  767,
     1043, 1951, 1951, 1951, 1951, 1043, 1043, 1043, 1043, 1043,
     1043, 1951, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1951, 1951, 1951, 1043, 1055, 1055,
     1951, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1951, 1055, 1055,  811, 1951, 1951, 1951, 1951,  811,
      811,  811,  811,  811,  811, 1951,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811, 1951, 1951,
     1951,  811,  408, 1951, 1951,  408, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951,  408,  408,  408,  408,
      408,  408,  862, 1951, 1951, 1951, 1951, 1951,  862, 1951,
      862,  862,  862,  862,  862, 1951, 1951, 1951, 1951,  862,
      862,  862,  862,  862,  862,  862, 1951, 1951, 1951, 1951,
      862,  450, 1951, 1951, 1951, 1951, 1951,  450, 1951,  450,
      450,  450,  450,  450, 1951, 1951, 1951, 1951,  450,  450,
      450,  450,  450,  450,  450, 1951, 1951, 1951, 1951,  450,

      458, 1951,  458,  458,  458,  458, 1951, 1951, 1951, 1951,
      458,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  873,  873, 1951,
      873, 1951, 1951, 1951, 1951,  873, 1951,  873,  873,  873,
      873, 1951, 1951, 1951, 1951,  873,  874, 1951, 1951, 1951,
     1951, 1951,  874, 1951,  874,  874,  874,  874,  874, 1951,
     1951, 1951, 1951,  874,  874,  874,  874,  874,  874,  874,
     1951, 1951, 1951, 1951,  874,  484, 1951, 1951, 1951, 1951,

     1951,  484, 1951,  484,  484,  484,  484,  484, 1951, 1951,
     1951, 1951,  484,  484,  484,  484,  484,  484,  484, 1951,
     1951, 1951, 1951,  484, 1146, 1146, 1951, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
      879,  879, 1951, 1951, 1951, 1951, 1951,  879, 1951,  879,
      879,  879,  879,  879, 1951, 1951,  879, 1951,  879,  879,
      879,  879,  879,  879,  879, 1951, 1951, 1951, 1951,  879,
      496,  496, 1951, 1951, 1951, 1951, 1951,  496, 1951,  496,

      496,  496,  496,  496, 1951, 1951,  496, 1951,  496,  496,
      496,  496,  496,  496,  496, 1951, 1951, 1951, 1951,  496,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  886, 1951, 1951,  886,
     1951, 1951, 1951, 1951, 1951,  886, 1951, 1951, 1951, 1951,
     1951, 1951,  886,  886, 1951, 1951, 1951, 1951, 1951, 1951,
      886, 1951,  886,  886,  886,  886, 1951, 1951, 1951, 1951,
      886,  891, 1951, 1951, 1951, 1951, 1951,  891, 1951,  891,

      891,  891,  891,  891, 1951, 1951, 1951, 1951,  891,  891,
      891,  891,  891,  891,  891, 1951, 1951, 1951, 1951,  891,
      534, 1951, 1951, 1951, 1951, 1951,  534, 1951,  534,  534,
      534,  534,  534, 1951, 1951, 1951, 1951,  534,  534,  534,
      534,  534,  534,  534, 1951, 1951, 1951, 1951,  534, 1158,
     1158, 1158, 1158, 1951, 1951, 1951, 1158, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1158, 1158, 1158, 1951, 1951,
     1951, 1951, 1951, 1158, 1951, 1158, 1158, 1158, 1158, 1951,
     1951, 1951, 1951, 1158,  894,  894,  894,  894, 1951, 1951,
     1951,  894, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951,  894,  894, 1951, 1951, 1951, 1951, 1951,  894, 1951,
      894,  894,  894,  894, 1951, 1951, 1951, 1951,  894,  899,
      899,  899,  899, 1951, 1951, 1951,  899, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  899,  899,  899, 1951, 1951,
     1951, 1951, 1951,  899, 1951,  899,  899,  899,  899, 1951,
     1951, 1951, 1951,  899,  904,  904, 1951, 1951, 1951, 1951,
     1951, 1951,  904, 1951,  904,  904,  904,  904, 1951, 1951,
     1951, 1951,  904,  906, 1951,  906,  906,  906,  906, 1951,
     1951, 1951, 1951,  906, 1165, 1165, 1165, 1951, 1951, 1951,
     1951, 1951, 1951, 1165, 1951, 1165, 1165, 1165, 1165, 1951,

     1951, 1951, 1951, 1165,  916, 1951,  916,  916,  916,  916,
     1951, 1951, 1951, 1951,  916, 1172, 1172, 1951, 1951, 1951,
     1951, 1951, 1951, 1172, 1951, 1172, 1172, 1172, 1172, 1951,
     1951, 1951, 1951, 1172, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1951, 1183, 1183, 1183, 1183, 1183, 1183, 1951,
     1183, 1951, 1951, 1951, 1183, 1183, 1183, 1183, 1183, 1183,
      645, 1951,  645,  645,  645,  645, 1951, 1951, 1951, 1951,
      645,  651, 1951,  651,  651,  651,  651, 1951, 1951, 1951,
     1951,  651, 1203, 1951, 1203, 1203, 1203, 1203, 1203, 1951,

     1951, 1951, 1951, 1951, 1203, 1951, 1203, 1203, 1203, 1203,
     1951, 1951, 1951, 1951, 1203,  683, 1951, 1951,  683, 1951,
     1951, 1951, 1951, 1951,  683, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  683, 1951, 1951, 1951, 1951, 1951,  683,
     1951,  683,  689, 1951, 1951, 1951, 1951,  689,  689,  689,
      689,  689,  689, 1951,  689,  689,  689,  689,  689,  689,
     1951,  689, 1951, 1951, 1951, 1951, 1951, 1951, 1951,  689,
      695, 1951, 1951,  695, 1951, 1951, 1951, 1951, 1951,  695,
     1951, 1951, 1951, 1951, 1951, 1951, 1951,  695,  695, 1951,
     1951, 1951, 1951, 1951,  695, 1951,  695,  695,  695,  695,

     1206, 1951, 1951, 1206, 1206, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1206, 1951, 1206, 1951, 1951, 1206, 1206, 1951,
     1951, 1951, 1206, 1206, 1206, 1951, 1206, 1214, 1951, 1951,
     1214, 1951, 1951, 1214, 1951, 1951, 1214, 1951, 1214, 1214,
     1214, 1214, 1214, 1214, 1951, 1214, 1214, 1214, 1214, 1214,
     1214, 1951, 1214, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1214,  974,  974, 1951,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  976, 1951, 1951,

      976, 1951, 1951, 1951, 1951, 1951,  976, 1951, 1951, 1951,
     1951, 1951, 1951,  976,  976,  976, 1951, 1951, 1951, 1951,
     1951,  976, 1951,  976,  976,  976,  976, 1228, 1228, 1951,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1229, 1951, 1951, 1951, 1951, 1229, 1229,
     1229, 1229, 1229, 1229, 1951, 1229, 1229, 1229, 1229, 1229,
     1229, 1951, 1229, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1229, 1230, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1230,

     1951, 1951, 1951, 1951, 1951, 1951, 1230, 1951, 1230, 1230,
     1230, 1230,  984, 1951, 1951,  984, 1951, 1951,  984, 1951,
     1951,  984, 1951,  984,  984,  984,  984,  984,  984, 1951,
      984,  984,  984,  984,  984,  984, 1951,  984, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  984, 1231, 1951, 1951, 1231,
     1951, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1232, 1951, 1951, 1232, 1951, 1951, 1232, 1951,
     1951, 1232, 1951, 1232, 1232, 1232, 1232, 1232, 1232, 1951,

     1232, 1232, 1232, 1232, 1232, 1232, 1951, 1232, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1232, 1240, 1951, 1951, 1951,
     1951, 1240, 1240, 1240, 1240, 1240, 1240, 1951, 1240, 1240,
     1240, 1240, 1240, 1240, 1951, 1240, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1240, 1241, 1241, 1951, 1241, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1241, 1951, 1951, 1951, 1951, 1951, 1951, 1241, 1951,
     1241, 1241, 1241, 1241,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
     1017, 1951, 1951, 1951, 1951, 1017, 1017, 1017, 1017, 1017,
     1017, 1951, 1017, 1017, 1017, 1017, 1017, 1017, 1951, 1017,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1017, 1012, 1012,
     1012, 1951, 1951, 1951, 1951, 1951, 1012, 1951, 1012, 1012,
     1012, 1012, 1014, 1014, 1951, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1258, 1951,
     1951, 1951, 1951, 1258, 1258, 1258, 1258, 1258, 1258, 1258,

     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1951, 1951, 1951, 1258,  724, 1951, 1951, 1951,
     1951,  724,  724,  724,  724,  724,  724, 1951,  724,  724,
      724,  724,  724,  724, 1951,  724, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  724,  364, 1951, 1951, 1951,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364, 1951, 1951,
     1951,  364, 1033, 1033, 1951, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,

     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,  383, 1951,
     1951,  383, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951,  383, 1951,  383,  383,  383,  383, 1055, 1055,
     1951, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1951,

     1062, 1951, 1951, 1951, 1951, 1062, 1062, 1062, 1062, 1062,
     1087, 1087, 1087, 1087, 1087, 1087,  408, 1951, 1951,  408,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
      408,  408,  408,  408,  408,  408,  355,  355, 1951,  355,
     1951, 1951,  355, 1951, 1951, 1951, 1951,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355, 1951,  355, 1951,  355,
      450, 1951, 1951, 1951, 1951, 1951,  450, 1951,  450,  450,
      450,  450,  450, 1951, 1951, 1951, 1951,  450,  450,  450,

      450,  450,  450,  450, 1951, 1951, 1951, 1951,  450,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  484, 1951, 1951, 1951, 1951,
     1951,  484, 1951,  484,  484,  484,  484,  484, 1951, 1951,
     1951, 1951,  484,  484,  484,  484,  484,  484,  484, 1951,
     1951, 1951, 1951,  484, 1146, 1146, 1951, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
      496,  496, 1951, 1951, 1951, 1951, 1951,  496, 1951,  496,
      496,  496,  496,  496, 1951, 1951,  496, 1951,  496,  496,
      496,  496,  496,  496,  496, 1951, 1951, 1951, 1951,  496,
      534, 1951, 1951, 1951, 1951, 1951,  534, 1951,  534,  534,
      534,  534,  534, 1951, 1951, 1951, 1951,  534,  534,  534,
      534,  534,  534,  534, 1951, 1951, 1951, 1951,  534, 1354,
     1951, 1354, 1354, 1354, 1354, 1951, 1951, 1951, 1951, 1354,
     1158, 1158, 1158, 1158, 1951, 1951, 1951, 1158, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1158, 1158, 1158, 1951,

     1951, 1951, 1951, 1951, 1158, 1951, 1158, 1158, 1158, 1158,
     1951, 1951, 1951, 1951, 1158,  894,  894,  894,  894, 1951,
     1951, 1951,  894, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951,  894, 1951, 1951, 1951, 1951, 1951,  894,
     1951,  894,  894,  894,  894, 1951, 1951, 1951, 1951,  894,
     1165, 1165, 1165, 1951, 1951, 1951, 1951, 1951, 1951, 1165,
     1951, 1165, 1165, 1165, 1165, 1951, 1951, 1951, 1951, 1165,
     1172, 1172, 1951, 1951, 1951, 1951, 1951, 1951, 1172, 1951,
     1172, 1172, 1172, 1172, 1951, 1951, 1951, 1951, 1172, 1203,
     1951, 1203, 1203, 1203, 1203, 1203, 1951, 1951, 1951, 1951,

     1951, 1203, 1951, 1203, 1203, 1203, 1203, 1951, 1951, 1951,
     1951, 1203, 1402, 1402, 1951, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1951,
     1951, 1951, 1951, 1403, 1403, 1403, 1403, 1403, 1403, 1951,
     1403, 1403, 1403, 1403, 1403, 1403, 1951, 1403, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1403, 1405, 1951, 1951, 1951,
     1951, 1951, 1951, 1405, 1405, 1951, 1951, 1951, 1951, 1951,
     1951, 1405, 1951, 1405, 1405, 1405, 1405, 1214, 1951, 1951,

     1214, 1951, 1951, 1214, 1951, 1951, 1214, 1951, 1214, 1214,
     1214, 1214, 1214, 1214, 1951, 1214, 1214, 1214, 1214, 1214,
     1214, 1951, 1214, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1214, 1406, 1951, 1951, 1406, 1951, 1951, 1406, 1951, 1951,
     1406, 1951, 1406, 1406, 1406, 1406, 1406, 1406, 1951, 1406,
     1406, 1406, 1406, 1406, 1406, 1951, 1406, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1406, 1415, 1951, 1951, 1951, 1951,
     1415, 1415, 1415, 1415, 1415, 1415, 1951, 1415, 1415, 1415,
     1415, 1415, 1415, 1951, 1415, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1415, 1416, 1951, 1951, 1416, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1416, 1951, 1951, 1951, 1951, 1951, 1951, 1416, 1951, 1416,
     1416, 1416, 1416, 1228, 1228, 1951, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1417,
     1951, 1951, 1417, 1951, 1417, 1417, 1417, 1417, 1417, 1417,
     1951, 1417, 1417, 1417, 1417, 1417, 1417, 1951, 1417, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1417, 1230, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1230, 1951, 1951, 1951, 1951,

     1951, 1951, 1230, 1951, 1230, 1230, 1230, 1230, 1231, 1951,
     1951, 1231, 1951, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231,  984, 1951, 1951,  984, 1951, 1951,
      984, 1951, 1951,  984, 1951,  984,  984,  984,  984,  984,
      984, 1951,  984,  984,  984,  984,  984,  984, 1951,  984,
     1951, 1951, 1951, 1951, 1951, 1951, 1951,  984, 1232, 1951,
     1951, 1232, 1951, 1951, 1232, 1951, 1951, 1232, 1951, 1232,
     1232, 1232, 1232, 1232, 1232, 1951, 1232, 1232, 1232, 1232,

     1232, 1232, 1951, 1232, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1232, 1419, 1951, 1951, 1419, 1419, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1419, 1951, 1419, 1951, 1951, 1419,
     1419, 1951, 1951, 1951, 1419, 1419, 1419, 1951, 1419, 1420,
     1420, 1951, 1420, 1951, 1951, 1420, 1951, 1951, 1951, 1951,
     1420, 1420, 1420, 1420, 1420, 1420, 1951, 1420, 1420, 1420,
     1420, 1420, 1420, 1951, 1420, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1420, 1241, 1241, 1951, 1241, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1241, 1951, 1951, 1951, 1951, 1951, 1951, 1241, 1951, 1241,

     1241, 1241, 1241,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703, 1434,
     1951, 1951, 1951, 1951, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1951, 1951, 1951, 1434,  364, 1951, 1951,
     1951,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364, 1951, 1951, 1951,  364, 1441, 1441, 1951, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441,  383, 1951, 1951,  383, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951,  383, 1951,  383,  383,  383,
      383, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1951, 1273, 1951, 1951,
     1951, 1951, 1273, 1273, 1273, 1273, 1273,  408, 1951, 1951,

      408, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951,  408,  408,  408,  408,  408,  408,  724,  724, 1951,
      724, 1951, 1951,  724, 1951, 1951, 1951, 1951,  724,  724,
      724,  724,  724,  724, 1951,  724,  724,  724,  724,  724,
      724, 1951,  724, 1951, 1951, 1951, 1951, 1951,  724, 1951,
      724, 1017, 1017, 1951, 1017, 1951, 1951, 1017, 1951, 1951,
     1951, 1951, 1017, 1017, 1017, 1017, 1017, 1017, 1951, 1017,
     1017, 1017, 1017, 1017, 1017, 1951, 1017, 1951, 1951, 1951,
     1951, 1951, 1017, 1951, 1017,  450, 1951, 1951, 1951, 1951,

     1951,  450, 1951,  450,  450,  450,  450,  450, 1951, 1951,
     1951, 1951,  450,  450,  450,  450,  450,  450,  450, 1951,
     1951, 1951, 1951,  450,  484, 1951, 1951, 1951, 1951, 1951,
      484, 1951,  484,  484,  484,  484,  484, 1951, 1951, 1951,
     1951,  484,  484,  484,  484,  484,  484,  484, 1951, 1951,
     1951, 1951,  484,  496,  496, 1951, 1951, 1951, 1951, 1951,
      496, 1951,  496,  496,  496,  496,  496, 1951, 1951,  496,
     1951,  496,  496,  496,  496,  496,  496,  496, 1951, 1951,
     1951, 1951,  496,  534, 1951, 1951, 1951, 1951, 1951,  534,
     1951,  534,  534,  534,  534,  534, 1951, 1951, 1951, 1951,

      534,  534,  534,  534,  534,  534,  534, 1951, 1951, 1951,
     1951,  534, 1516, 1516, 1516, 1516, 1951, 1951, 1951, 1516,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1516, 1516,
     1516, 1951, 1951, 1951, 1951, 1951, 1516, 1951, 1516, 1516,
     1516, 1516, 1951, 1951, 1951, 1951, 1516, 1354, 1354, 1354,
     1354, 1951, 1951, 1951, 1354, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1354, 1354, 1951, 1951, 1951, 1951,
     1951, 1354, 1951, 1354, 1354, 1354, 1354, 1951, 1951, 1951,
     1951, 1354, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,

     1951, 1542, 1542, 1542, 1542, 1542, 1542, 1951, 1542, 1951,
     1951, 1542, 1951, 1542, 1542, 1542, 1542, 1542, 1402, 1402,
     1951, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1566, 1951, 1951, 1566, 1951, 1566,
     1566, 1566, 1566, 1566, 1566, 1951, 1566, 1566, 1566, 1566,
     1566, 1566, 1951, 1566, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1566, 1405, 1951, 1951, 1951, 1951, 1951, 1951, 1405,
     1405, 1951, 1951, 1951, 1951, 1951, 1951, 1405, 1951, 1405,

     1405, 1405, 1405, 1214, 1951, 1951, 1214, 1951, 1951, 1214,
     1951, 1951, 1214, 1951, 1214, 1214, 1214, 1214, 1214, 1214,
     1951, 1214, 1214, 1214, 1214, 1214, 1214, 1951, 1214, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1214, 1406, 1951, 1951,
     1406, 1951, 1951, 1406, 1951, 1951, 1406, 1951, 1406, 1406,
     1406, 1406, 1406, 1406, 1951, 1406, 1406, 1406, 1406, 1406,
     1406, 1951, 1406, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1406, 1419, 1951, 1951, 1419, 1419, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1419, 1951, 1419, 1951, 1951, 1419, 1419,
     1951, 1951, 1951, 1419, 1419, 1419, 1951, 1419, 1569, 1951,

     1951, 1569, 1951, 1951, 1569, 1951, 1951, 1951, 1951, 1569,
     1569, 1569, 1569, 1569, 1569, 1951, 1569, 1569, 1569, 1569,
     1569, 1569, 1951, 1569, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1569, 1416, 1951, 1951, 1416, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1416,
     1951, 1951, 1951, 1951, 1951, 1951, 1416, 1951, 1416, 1416,
     1416, 1416, 1417, 1951, 1951, 1417, 1951, 1417, 1417, 1417,
     1417, 1417, 1417, 1951, 1417, 1417, 1417, 1417, 1417, 1417,
     1951, 1417, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1417,
     1571, 1951, 1951, 1571, 1951, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1420, 1420, 1951, 1420,
     1951, 1951, 1420, 1951, 1951, 1951, 1951, 1420, 1420, 1420,
     1420, 1420, 1420, 1951, 1420, 1420, 1420, 1420, 1420, 1420,
     1951, 1420, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1420,
     1434, 1951, 1951, 1951, 1951, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1951, 1951, 1951, 1434, 1586, 1586,
     1951, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1441, 1441, 1951, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
      383, 1951, 1951,  383, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  383, 1951,  383,  383,  383,  383,
      408, 1951, 1951,  408, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951,  408,  408,  408,  408,  408,  408,
      450, 1951, 1951, 1951, 1951, 1951,  450, 1951,  450,  450,
      450,  450,  450, 1951, 1951, 1951, 1951,  450,  450,  450,
      450,  450,  450,  450, 1951, 1951, 1951, 1951,  450,  484,
     1951, 1951, 1951, 1951, 1951,  484, 1951,  484,  484,  484,
      484,  484, 1951, 1951, 1951, 1951,  484,  484,  484,  484,
      484,  484,  484, 1951, 1951, 1951, 1951,  484,  496,  496,
     1951, 1951, 1951, 1951, 1951,  496, 1951,  496,  496,  496,
      496,  496, 1951, 1951,  496, 1951,  496,  496,  496,  496,

      496,  496,  496, 1951, 1951, 1951, 1951,  496,  534, 1951,
     1951, 1951, 1951, 1951,  534, 1951,  534,  534,  534,  534,
      534, 1951, 1951, 1951, 1951,  534,  534,  534,  534,  534,
      534,  534, 1951, 1951, 1951, 1951,  534, 1516, 1516, 1516,
     1516, 1951, 1951, 1951, 1516, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1516, 1516, 1516, 1951, 1951, 1951, 1951,
     1951, 1516, 1951, 1516, 1516, 1516, 1516, 1951, 1951, 1951,
     1951, 1516, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1951, 1678, 1678, 1678, 1678, 1678, 1678, 1951, 1678, 1951,

     1951, 1951, 1951, 1678, 1678, 1678, 1678, 1678, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1951, 1679, 1679, 1679,
     1679, 1679, 1679, 1951, 1679, 1951, 1951, 1951, 1951, 1679,
     1679, 1679, 1679, 1679, 1566, 1951, 1951, 1566, 1951, 1566,
     1566, 1566, 1566, 1566, 1566, 1951, 1566, 1566, 1566, 1566,
     1566, 1566, 1951, 1566, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1566, 1354, 1354, 1354, 1354, 1951, 1951, 1951, 1354,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1354,
     1354, 1951, 1951, 1951, 1951, 1951, 1354, 1951, 1354, 1354,

     1354, 1354, 1951, 1951, 1951, 1951, 1354, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1951, 1772, 1772, 1772, 1772,
     1772, 1772, 1951, 1772, 1951, 1951, 1951, 1951, 1772, 1772,
     1772, 1772, 1772, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1951, 1783, 1783, 1783, 1783, 1783, 1783, 1951, 1783,
     1951, 1951, 1951, 1951, 1783, 1783, 1783, 1783, 1783, 1860,
     1860, 1951, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,

     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860,   93, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951

    } ;

static yyconst flex_int16_t yy_chk[18697] =
    {   0,
        0,    0,   21,    2,   22,   23,   21,   24,   22,   23,
       35,   24,   36,    1,    2,   47,   39,    2,   40,   43,
       43,   35,   43,   36,   43,    1,    2,   39,   48,   40,
       45,   87,   45,   88,   87,    0,   88,   89,   89,   97,
       89,   45,   39,  664,   40,   98,   45,   21,   98,   22,
       23,   97,   24,   89,  236,   35,   45,   36,   83,  236,
       47,   39,   84,   40,  664,   43,  103,   83,   83,   98,
      103,   84,   84,   48, 1884,   45,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   44,
       44,    4,   44,   57,   44,   46,   53,   46,   53,   58,
        4,    4,   63,    4,    4,   64,   46,    4,    4,    4,
      108,   46,   51,   51,  108,   51,   52,   52, 1528,   52,
      119,   46,   53,  119,  205,  205,   54,  226,   54,   55,

      226,   55,  226,   61, 1528,   44,  208,  208,   57,   75,
       46,   53,   61,   61,   58,   90,   90,   63,   90,   81,
       64,   82,   54,   75,   56,   55,   56,  302,   51,   61,
     1885,   90,   52,    4,    5,    5,    5,    5,    5,    5,
        5,   54,    5,    5,   55,    5,    5,    5,   61,    5,
       56,    5,    5,   62,   75,  302,    5,    5,    5,    5,
        5,    5,   62,   62,   81, 1886,   82,  129,  129,   56,
      120,  121,  129,  120,  121,   69,  120, 1887,   70,   62,
        5,    5,    5,    5,  389,  120,  121,  123,   76,  123,
      123,  123,  121,  389,  137,  137,  253,  129,   62,  137,

      253,   69,   76,   71,   70,  323,   72,  491,  323,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
       69,    6,    6,   70,    6,    6,    6,  491,    6,   71,
        6,    6,   72,   76, 1888,    6,    6,    6,    6,    6,
        6,   77,   78,  621,  325,  621,  121,  325,   71,  130,
      130,   72,   77,   78,  130,  347,  347,  347,  347,    6,
        6,    6,    6,  147,  147,  147,  147,   77,   78,  115,
      147,  115,  115,  254,  115,  115,  115, 1209,  254,  130,
      279,  279,  254,  115, 1209,  279,   77,   78,    6,    6,
        6,    6,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   13,   13,   13,   13,   13,   13,   13,  101,
       13,   13,  101,   13,   13,   13, 1889,   13,  351,   13,
       13, 1891,  351,  370,   13,   13,   13,   13,   13,   13,
      102,  102, 1892,  102,  151,  151,  101, 1893,  117,  151,
      117,  117,  117,  117,  117,  117,  117,  370,   13,   13,

       13,   13,  117,  138,  138,  101,  138,  392,  392,  241,
      146,  146,  241,  146,  151,  152,  152,  185,  185,  241,
      152,  353,  185,  565,  565,  353,  102,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   14,  365,   14,
       14,  365,   14,   14,   14,  152,   14,  185,   14,   14,
     1894,  375,  138,   14,   14,   14,   14,   14,   14,  146,
      140,  140,  140,  140,  186,  186,  706,  124, 1910,  186,
      124,  118,  329,  375,  118,  329,  140,   14,   14,   14,
       14,  140,  124,  118,  118,  158,  118,  118,  124,  706,
      118,  118,  118,  217,  186,  362,  158,  158,  118,  362,

      338,  158, 1911,  338,  217,  158,   14,   14,   14,   14,
       15,   15,   15,   15,   15,   15,   15,  118,   15,   15,
     1912,   15,   15,   15,  338,   15,  158,   15,   15, 1913,
      329,  369,   15,   15,   15,   15,   15,   15,  217,  568,
      568,  395,  124,  369,  244,  125,  118,  244,  125,  141,
      141,  141,  141,  369,  244,  395,   15,   15,   15,   15,
      125,  145,  145,  145,  145,  141,  125,  369,  173,  173,
      141,  173,  169,  169,  169,  169, 1914,  145,  145,  169,
      177,  177,  145,  177,  145,   15,   15,   15,   15,   16,
       16,   16,   16,   16,   16,   16,  379,   16,   16,  379,

       16,   16,   16,  387,   16,  432,   16,   16,  432,  387,
      159,   16,   16,   16,   16,   16,   16,  173,  284,  284,
      125,  159,  159,  284,  332,  332,  159,  332, 1915,  177,
      159,  163,  163,  163,  163,   16,   16,   16,   16,  164,
      164,  164,  164,  201,  201,  201,  201,  163,  332,  388,
      201,  159,  163,  388,  385,  164,  385,  385,  434,  434,
      164,  434, 1918,  388,   16,   16,   16,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   25,   25,
       25,   25,   25,   25,   25, 1919,   25,   25,  372,   25,
       25,   25,  373,   25,  394,   25,   25,  160,  376, 1931,
       25,   25,   25,   25,   25,   25,  393,  331,  160,  160,
      331,  394,  372,  160,  393, 1932,  373,  160,  131,  131,
     1935,  131,  376,  331,   25,   25,   25,   25,  572,  572,
      142,  142,  142,  142,  131,  131,  481,  142,  160,  131,
      181,  181,  481,  181,  334,  334,  142,  192,  192,  334,

      192,  142,  334,   25,   25,   25,   25,   26,   26,   26,
       26,   26,   26,   26,  131,   26,   26,  131,   26,   26,
       26, 1211,   26,  437,   26,   26,  437,  334, 1211,   26,
       26,   26,   26,   26,   26,  247,  247,  399,  247,  181,
      399,  659,  168,  168,  168,  168,  192,  399,  194,  194,
      194,  194,  168,   26,   26,   26,   26,  142,  168,  168,
      873,  258,  259,  168,  194,  258,  873,  259, 1942,  194,
      659,  259,  258,  435,  258,  435,  435,  435,  259, 1944,
      259,  247,   26,   26,   26,   26,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  107,  344,  344,  107,
      344, 1213,  107,  107,  107,  107,  107,  107, 1213,  200,
      200,  107,  200,  107,  107,  107,  107,  107,  143,  143,
      143,  143, 1946,  206,  206,  143,  206,  460,  460,  460,
      165,  165,  165,  165,  143, 1883,  107,  165,  107,  143,
      473,  473,  473,  344,  154,  154,  165,  154, 1882,  458,
      458,  165,  209,  209,  458,  209,  212,  212,  200,  212,
      154,  154, 1881,  221,  221,  154,  221,  107,  109, 1031,

      316,  109,  206,  316,  109,  109,  109,  109,  109,  109,
      316,  239,  239,  109,  239,  109,  109,  109,  109,  109,
      154,  316, 1860,  154, 1031,  143,  390,  166,  166,  166,
      166,  209, 1857,  359,  166,  212,  359,  165,  109,  221,
      109,  443,  221,  166,  443, 1856,  162,  162,  166,  162,
      359,  162,  245,  245,  359,  245,  262,  262,  396,  262,
      239, 1855,  162,  162,  390,  441,  441,  162,  441,  109,
      110,  162,  396,  110,  396,  110,  110,  110,  110,  110,
      110,  110,  877,  266,  266,  110,  266,  110,  110,  110,
      110,  110,  162,  390, 1854,  162,  683,  187,  187,  683,

      187,  245,  877, 1948,  166,  262,  272,  272,  341,  272,
      110,  341,  110,  187,  187,  512,  512,  512,  187,  191,
      191,  191,  191, 1948,  275,  275,  191,  275,  195,  195,
      195,  195,  266,  371,  752,  341,  191,  191,  191,  191,
      191,  110,  112,  187,  195,  112,  187,  718,  112,  195,
      112,  718, 1852,  112,  341,  272,  371,  112,  752,  112,
      112,  112,  112,  112,  628,  196,  196,  196,  196,  755,
      999,  408,  196,  275,  408,  199,  199,  199,  199,  628,
      371,  196,  112,  756,  112,  999,  196,  197,  197,  197,
      197,  199,  199,  755,  197,  381,  199,  319,  381,  321,

      319,  416,  321,  197,  416,  756,  761,  319,  197,  321,
      381, 1851,  688,  112,  113,  688,  113,  408,  319,  113,
      321, 1385,  113,  113,  113,  113,  113,  113,  451, 1385,
      761,  113,  451,  113,  113,  113,  113,  113,  906,  906,
      113,  113,  196,  450,  450,  113,  113,  416,  450,  322,
      113,  113,  322,  113,  113, 1850,  113,  451,  113,  322,
      461,  461,  113,  113,  197,  461, 1849,  113,  113,  416,
      322, 1165, 1165,  450,  113,  113,  113,  113,  113,  113,
     1848,  345,  345,  324,  345, 1403,  324,  113,  114,  114,
      114,  114, 1403,  324,  114,  114,  114,  114,  114,  114,

      518,  518,  518,  114,  324,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  345,  114, 1847,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114, 1389,  114,  114,
      116,  116,  116,  116, 1846, 1845,  116,  116,  116,  116,
      116,  116, 1389,  453,  453,  116,  453,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116, 2131,

      116, 2131,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116, 1844,
      116,  116,  122,  122,  693,  122,  720,  693,  122,  411,
      720,  122,  411,  122,  122,  122,  122,  122,  122,  122,
     1843,  463,  463,  122,  463,  122,  122,  122,  122,  122,
      220,  220,  220,  220,  357,  357,  357,  357,  357,  444,
      485,  444,  444,  444,  485, 1828, 1808,  220,  122,  220,
      122,  220, 1037,  368,  398,  411,  368,  696,  398, 1807,
      696,  407,  398,  407,  407, 1372,  407,  407,  407,  485,

      220,  374,  398,  398,  374,  407, 1037, 1806,  411,  122,
      157,  157, 1372,  157,  157,  157,  157,  409,  157,  157,
      409,  157,  157,  157,  368,  157,  374,  157,  157,  374,
     1871,  220,  157,  157,  157,  157,  157,  157,  429, 1805,
      429,  429,  429,  374,  427, 1871,  429,  427,  368,  368,
      368,  374,  429,  543,  543,  543,  157,  157,  157,  157,
     1925,  433,  739,  409,  433,  739,  430,  374,  430,  430,
      430,  430,  430,  430,  430,  723,  433, 1925,  409,  723,
      430,  610,  433, 1804,  610,  157,  157,  157,  157,  315,
      427,  610,  315,  315,  427,  315,  476,  476,  315,  476,

     1803,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315, 1802,  315,  433,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  557,  557,  557,  315,  318,  410,  702,
      318,  410,  702,  318,  412,  413,  318,  412,  413,  318,
      318,  318,  318,  318,  318,  702,  487,  487,  318,  487,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318, 1945,  318,  410,  318,  318, 1945, 1789,  414,
      412,  413,  414,  415,  417,  413,  415,  417,  420,  413,
      415,  420,  412, 1788,  410, 1438,  410,  410,  412,  413,
      466,  466,  466,  466,  318,  342,  342,  342,  342,  418,
      500,  500,  418,  500,  419,  422,  466,  419,  422, 1438,
      421,  466,  342,  421,  342,  414,  342,  724,  415,  415,
      417,  724,  519,  519,  420,  519,  424,  423,  420,  424,
      423,  436,  414, 1786,  436,  342,  417,  417,  567,  567,
      567,  414,  420,  342,  342,  418,  436,  415, 1785,  418,

      419,  422,  436, 1779,  419,  425,  421,  418,  425,  422,
      421,  524,  524,  342,  524,  342,  342,  343,  343,  343,
      343,  419,  424,  423,  421,  426,  421,  423,  426,  428,
      424,  423,  428,  424,  343,  423,  343,  728,  343,  438,
      424,  728,  438,  452,  452,  423,  423,  758,  452,  439,
      439,  425,  439, 1939,  438,  701,  436,  343,  701,  440,
      438, 1939,  440,  497,  439,  343,  343,  497,  425,  758,
      439,  426, 1778,  452,  440,  428,  574,  574,  574,  426,
      440,  475,  475,  475,  475,  343,  735,  343,  343,  348,
      735,  348,  497,  767,  348,  428,  767,  348,  348,  348,

      348,  348,  348,  583,  583,  583,  348,  348,  348,  348,
      348,  348,  348,  701,  438,  471,  471,  471,  471, 1777,
      529,  529,  471,  529,  439,  479,  479,  479,  479, 1776,
     1775,  348,  479,  348,  440,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  595,
      595,  595,  348,  354,  445,  770,  354,  445,  770,  354,
      354,  354,  354,  354,  354,  585, 1774, 1773,  354,  445,
      354,  354,  354,  354,  354,  445,  585,  447,  455,  455,
      447, 1771, 1902,  455,  431,  484,  484,  431,  537,  537,

      484,  537,  447,  354, 1902,  354,  431,  431,  447,  431,
      431,  645,  645,  431,  431,  431,  645, 1744,  455,  535,
      585,  431,  736,  535,  713,  484,  736,  713,  470,  470,
      470,  470,  742,  455,  354,  355,  742, 1585,  355,  445,
      431,  355, 1738,  355,  470,  470,  355, 1723,  535,  470,
      355,  470,  355,  355,  355,  355,  355,  467,  467,  467,
      467, 1585,  447, 1405,  467,  469,  469,  469,  469,  431,
     1405,  597,  469,  467,  597,  355,  597,  355,  467, 1717,
     1711,  469,  472,  472,  472,  472,  469,  713, 1710,  472,
      480,  480,  480,  480,  634,  634,  634,  480,  472,  647,

      647,  647,  516,  472, 1708,  516,  355,  356,  547,  547,
      356,  547,  516,  356,  356,  356,  356,  356,  356,  516,
      559,  559,  356,  559,  356,  356,  356,  356,  356,  474,
      474,  474,  474, 1009,  467,  486,  486, 1009,  489,  489,
      486,  757,  469,  489,  757,  474,  474,  356,  762,  356,
      474,  496,  474,  503,  503,  503,  503,  569,  569,  472,
      569,  498,  496,  496,  502,  486,  757,  496,  489,  503,
      762,  496,  498,  498,  503,  502,  502,  498,  356,  358,
      502,  498,  358,  489,  502,  358,  358,  358,  358,  358,
      358, 1010,  496, 1707,  358, 1010,  358,  358,  358,  358,

      358,  785,  498, 1706,  785,  502,  504,  504,  504,  504,
      534,  534, 2231,  504, 2231,  534,  653,  653,  653,  358,
      502,  358,  504,  506,  506,  506,  506,  504, 1704, 1703,
      506,  507,  507,  507,  507,  508,  508,  508,  508,  506,
      534,  507,  508,  612,  506, 1012,  612,  507,  507, 1012,
      358,  360,  507,  612,  360, 1702, 1701,  360,  360,  360,
      360,  360,  360,  785,  575,  575,  360,  575,  360,  360,
      360,  360,  360, 1700,  510,  510,  510,  510,  514,  514,
      514,  514, 1699,  504,  510,  514,  513,  513,  513,  513,
      510,  360, 1698,  360,  851,  510,  513,  851,  579,  579,

      506,  579,  513,  513,  661,  661,  661,  513,  515,  515,
      515,  515, 1697,  591,  591,  515,  591,  555,  555,  555,
      555, 1017,  360,  363,  555, 1017,  363, 1696,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  366, 1695, 1694,  366,  536,  536,  366,
      366,  366,  536,  366,  366, 1693,  607,  607,  366,  607,
      366,  366,  366,  366,  366,  509,  509,  509,  509, 1692,
      613,  613,  509,  613,  539,  539,  766,  536,  766,  539,
      763,  509,  766,  366,  790,  366,  509,  790,  540,  540,
      540,  540,  716,  716,  716,  540,  541,  541,  541,  541,
      616,  616,  763,  616,  539,  540,  540,  540,  540,  540,
      630,  630, 1021,  630,  366,  382, 1021,  541,  382,  539,
     1566,  382,  382,  382,  382,  382,  382, 1566,  635,  635,
      382,  635,  382,  382,  382,  382,  382,  562,  562,  562,

      562, 1028,  509, 1691,  562,  771,  616,  790,  771,  544,
      544,  544,  544, 1690, 1689,  382,  544,  382,  546,  546,
      546,  546, 1688, 1028,  382,  546,  544,  544,  544,  544,
      544,  639,  639, 1687,  639,  546,  546,  546,  546,  546,
     1686,  550,  550,  550,  550, 1007,  382,  383,  642,  642,
      383,  642, 1685,  383,  383,  383,  383,  550,  648,  648,
     1684,  771,  550,  648,  551,  551,  551,  551,  651,  651,
      383,  551,  383,  651,  383,  553,  553,  553,  553, 1032,
      551,  759,  553, 1007,  759,  551,  554,  554,  554,  554,
     1022,  553,  778,  383, 1022,  778,  553,  556,  556,  556,

      556, 1032,  554,  554,  556, 1683,  759,  554,  563,  563,
      563,  563, 1007,  556, 1681,  563,  689,  695,  556,  689,
      695,  383, 1680,  383,  383,  384,  689,  695,  384, 1676,
     1675,  384,  384,  384,  384,  384,  384,  689,  695, 1674,
      384,  551,  384,  384,  384,  384,  384,  558,  558,  558,
      558,  996,  553,  654,  654,  996,  676,  778,  654,  676,
      727,  727,  727,  558,  558,  384,  676,  384,  558,  679,
      996, 1011,  679,  676,  556, 1673, 1011,  676,  681,  679,
     1011,  681,  710,  710,  772,  710,  679,  772,  681,  776,
      679,  773,  776, 1672,  773,  681,  384,  406,  774,  681,

      406,  774, 1671,  406,  406,  406,  406,  406,  406, 1670,
      682, 1668,  406,  682,  406,  406,  406,  406,  406,  684,
      682, 1667,  684,  704,  704,  860,  704,  682,  860,  684,
      685,  682,  953,  685,  685,  953,  684,  406,  791,  406,
      684,  791,  776,  685, 1035,  685, 1666,  704,  685,  685,
      685,  685,  772,  699,  774,  699,  685,  685,  699,  773,
     1665,  775,  699,  699,  775, 1663, 1035,  699,  406,  492,
      492, 1662,  492,  492,  492,  492,  768,  492,  492,  768,
      492,  492,  492,  768,  492,  691,  492,  492,  691,  691,
      791,  492,  492,  492,  492,  492,  492, 1040,  691,  777,

      691, 1040,  777,  691,  691,  691,  691,  792,  707,  707,
      792,  691,  691,  707, 1661,  492,  492,  492,  492, 1660,
     1264,  768,  708,  708, 1659,  779, 1658,  708,  779,  775,
      708,  725,  725,  725,  725,  725,  780,  781, 1657,  780,
      781,  707, 1264, 1656,  492,  492,  492,  492,  493,  493,
      768,  493,  493,  493,  493,  708,  493,  493, 1655,  493,
      493,  493, 1654,  493, 1268,  493,  493,  777, 1653,  792,
      493,  493,  493,  493,  493,  493,  737,  802, 1650, 1649,
      802,  737,  737,  737,  737,  737, 1268,  781,  786,  780,
     1648,  786, 1645,  779,  493,  493,  493,  493,  852, 1644,

      852,  852,  852, 1633,  788, 1606,  793,  788,  866,  793,
      866,  866,  866,  866,  872,  872,  872,  974,  977,  884,
      974,  977,  884,  493,  493,  493,  493,  675,  802,  884,
      675,  675,  978,  675,  795,  978,  675,  795,  786,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  788,  675,  793,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,

      675,  795, 1589,  787,  675,  678,  787,  796,  678,  794,
      796,  678,  794,  799,  678, 1588,  799,  678,  678,  678,
      678,  678,  678, 1586,  800, 1584,  678,  800,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
     1583,  678, 1582,  678,  678,  787,  797,  801, 1579,  797,
      801,  796, 1578,  805, 1577,  799,  805,  799, 1576,  831,
     1575,  787,  831,  787,  809,  794, 1574,  809,  885,  885,
      885, 1002,  678,  687, 1002,  687,  803,  800,  687,  803,
     1572,  687,  687,  687,  687,  687,  687,  887,  887,  887,

      687,  687,  687,  687,  687,  687,  687,  801,  806,  804,
     1041,  806,  804, 1041, 1565,  831,  805,  797,  797,  807,
      808,  831,  807,  808,  797,  687, 1564,  687,  809,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  803, 1563,  813,  687,  692,  813, 1562,
      692,  814,  815,  692,  814,  815,  692,  692, 1561,  692,
      692,  692,  692,  692,  692,  804,  806, 1560,  692, 1559,
      692,  692,  692,  692,  692,  807,  808,  816,  862,  862,
      816,  830,  886,  862,  830,  886,  818,  817, 1558,  818,

      817,  813,  886,  692, 1557,  692, 1556,  814,  815,  886,
      863,  863, 1555,  813, 1554,  863, 1553,  814,  862,  819,
     1552,  840,  819,  823,  840, 1551,  823, 1550, 1045,  824,
      815, 1045,  824,  816,  692,  694, 1548,  830,  694,  694,
      863,  694,  818,  817,  694, 1546, 1543,  694,  694,  694,
      694,  694,  694,  817,  830,  816,  694,  694,  694,  694,
      694,  694,  694,  821,  818,  819,  821,  840, 1541,  823,
      820,  822,  819,  820,  822,  824,  823,  991,  991,  824,
      991,  694, 1045,  694,  840,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  821,
     1540, 1063,  694,  722, 1063,  722,  820,  822,  722, 1539,
     1538,  722,  722,  722,  722,  722,  722, 1537,  821, 1536,
      722,  722,  722,  722,  722,  722,  722,  825,  820,  822,
      825, 1006,  826,  828, 1006,  826,  828,  897,  897,  897,
      903,  903,  903,  931, 1006,  722,  931,  722, 1535,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  825, 1534, 1533,  722,  726,  826,  828,
      726, 1532,  826,  726,  726,  726,  726,  726,  726,  825,

      836, 1531,  726,  836,  726,  726,  726,  726,  726,  832,
      842,  828,  832,  842,  833, 1530,  931,  833,  834,  993,
      993,  834,  993,  874,  874, 1529, 1527,  726,  874,  726,
      907, 1526,  907,  907,  907,  827, 1525,  835,  827,  841,
      835, 1524,  841, 1523,  839,  837,  836,  839,  837,  843,
     1522, 1521,  843,  874,  836,  832,  842, 1519,  726,  730,
      833,  842,  730, 1518,  834,  730,  730,  730,  730,  730,
      730,  832,  845, 1517,  730,  845,  730,  730,  730,  730,
      730,  827,  833,  835,  834,  841, 1512,  827, 1511,  841,
      839,  837,  913,  913,  913,  843,  839,  844,  839,  730,

      844,  730, 1510,  827,  835,  827,  837,  837,  846,  847,
     1507,  846,  847,  837,  848, 1506,  843,  848,  845, 1034,
      849, 1444, 1034,  849,  910,  845,  910,  910,  910, 1443,
      730,  731,  850,  850,  731,  850, 1441,  731,  731,  731,
      731,  731,  731,  844, 1034, 1437,  731,  850,  731,  731,
      731,  731,  731,  850,  846,  847, 1077,  875,  875, 1077,
      848, 1436,  875,  844,  853,  853,  849,  853, 1432,  855,
      855,  731,  855,  731,  849,  847,  846, 1429,  858,  853,
      848,  858, 1428,  859,  855,  853,  859,  875,  995,  995,
      855,  995, 1427,  858, 1200,  858, 1426, 1200,  859,  858,

      864,  864,  731,  732,  859,  864,  732,  850, 1077,  732,
      732,  732,  732,  732,  732, 1425,  856,  856,  732,  856,
      732,  732,  732,  732,  732,  857,  857, 1424,  857, 1206,
      864,  856, 1206,  861,  861, 1054,  861,  856, 1054,  853,
      857, 1423,  864,  732,  855,  732,  857, 1421,  861,  868,
      868,  868,  868,  858,  861,  918,  918,  918,  859,  869,
      869,  869,  869, 1003, 1003,  868, 1003,  868,  868,  868,
      868, 1417,  868, 1401,  732,  733, 1004, 1004,  733, 1004,
     1400,  733,  733,  733,  869,  733,  733,  937,  937,  937,
      733,  856,  733,  733,  733,  733,  733, 1054,  879, 1399,

      857,  870,  870,  870,  870, 1398,  876,  876,  861,  879,
      879,  876, 1397, 1053,  879,  733, 1053,  733,  879,  950,
      950,  950,  880, 1396, 1046, 1056,  870, 1046, 1056,  881,
      891,  891, 1395,  880,  880,  891,  876, 1394,  880,  879,
      881,  881,  880, 1393, 1392,  881,  733,  738,  876,  881,
      738, 1391, 1390,  738,  738,  738,  738,  738,  738, 1388,
      891, 1387,  738,  880,  738,  738,  738,  738,  738, 1048,
      881, 1053, 1048, 1386,  883,  883,  883,  883,  892,  892,
     1384, 1046,  881,  892,  883, 1383, 1056,  738, 1049,  738,
      883, 1049,  883,  883,  883,  883,  894,  894,  894,  894,

     1382,  893,  893,  894, 1381, 1380,  893,  942,  892,  942,
      942,  942,  942,  894,  894,  894,  894,  894,  738,  740,
     1379, 1070,  740, 1048, 1070,  740,  740,  740,  740,  740,
      740,  893, 1036, 1378,  740, 1036,  740,  740,  740,  740,
      740, 1377, 1049,  893,  895,  895,  895,  895, 1156, 1156,
     1156,  895, 1376,  896,  896,  896,  896, 1036, 1374,  740,
      896,  740,  895,  895,  895,  895,  901,  901,  901,  901,
     1373,  896,  896,  896,  896,  945, 1371,  945,  945,  945,
      945, 1370,  901, 1369,  901,  901,  901,  901, 1368, 1070,
      740,  745, 1222, 1367,  745, 1222,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  747, 1366,  960,  747,  963,  960,  747,  963,  747,
     1365, 1363,  747,  960, 1057,  963,  747, 1057,  747,  747,
      747,  747,  747, 1362,  960, 1361,  963,  898,  898,  898,

      898, 1163, 1163, 1163,  898,  899,  899,  899,  899, 1360,
     1359,  747,  899,  747,  898,  898,  898,  898,  898, 1164,
     1164, 1164,  899,  899,  899,  899,  899,  965, 1357, 1356,
      965,  968,  968,  968,  968,  966, 1065,  965,  966, 1065,
     1057, 1352,  747,  769, 1050,  966,  769, 1050,  965,  769,
      769,  769,  769,  769,  769, 1351,  966, 1350,  769, 1347,
      769,  769,  769,  769,  769, 1013, 1013, 1013, 1013,  967,
     1346,  971,  967,  967,  971, 1074,  970, 1224, 1074,  970,
     1224,  971,  967,  769,  967,  769,  970,  967,  967,  967,
      967,  972,  971,  970,  972,  967,  967,  970, 1050, 1279,

     1065,  972, 1018, 1018, 1018, 1018, 1018, 1270,  972,  972,
      972,  972,  972, 1269,  769,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789, 1074, 1074,  984,  987,  976,  984,
      987,  976, 1051, 1263, 1262, 1051,  984,  987,  976, 1261,
     1255,  789,  789,  789,  789,  976, 1250,  984,  987,  976,
     1058, 1249, 1248, 1058, 1059,  988, 1247, 1059,  988,  789,
     1171, 1171, 1171, 1060, 1061,  988, 1060, 1061, 1246, 1245,
      789,  789,  789,  789,  789,  810,  988, 1064,  810, 1244,

     1064,  810,  810,  810,  810,  810,  810, 1243, 1067, 1236,
      810, 1067,  810,  810,  810,  810,  810, 1023, 1051, 1207,
     1207, 1207, 1023, 1023, 1023, 1023, 1023, 1026, 1059, 1068,
     1026, 1058, 1068, 1060, 1230,  810, 1229,  810, 1061, 1072,
     1073, 1225, 1072, 1073, 1026, 1212, 1075, 1078, 1026, 1075,
     1078, 1064, 1079, 1080, 1081, 1079, 1080, 1081, 1082, 1205,
     1084, 1082, 1067, 1084, 1204, 1083,  810,  811, 1083, 1085,
      811, 1203, 1085,  811,  811,  811, 1086,  811,  811, 1086,
     1202, 1201,  811, 1068,  811,  811,  811,  811,  811, 1072,
     1073, 1199, 1144, 1144, 1144, 1130, 1130, 1144, 1130, 1140,

     1140, 1140, 1140, 1208, 1208, 1208, 1198,  811, 1197,  811,
     1130, 1084, 1226, 1078, 1075, 1226, 1130, 1228, 1081, 1079,
     1228, 1080, 1082, 1083, 1140, 1090, 1088, 1084, 1090, 1088,
     1093, 1086, 1085, 1093, 1091, 1196, 1195, 1091,  811,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829, 1194, 1193,
     1130, 1090, 1088, 1192, 1242, 1094, 1093, 1242, 1094, 1090,
     1091, 1364, 1364, 1364, 1093,  829,  829,  829,  829, 1088,
     1191, 1091, 1096, 1095, 1098, 1096, 1095, 1098, 1240, 1240,

     1190, 1240, 1099,  829, 1101, 1099, 1189, 1101, 1100, 1102,
     1108, 1100, 1102, 1108,  829,  829,  829,  829,  829,  878,
      878, 1094,  878,  878,  878,  878, 1188,  878,  878, 1094,
      878,  878,  878, 1186,  878, 1185,  878,  878, 1096, 1095,
     1098,  878,  878,  878,  878,  878,  878, 1095, 1099, 1184,
     1101, 1182, 1098, 1181, 1100, 1102, 1108, 1180, 1096, 1104,
     1101, 1179, 1104, 1178, 1099,  878,  878,  878,  878, 1100,
     1102, 1514, 1514, 1514, 1108, 1142, 1142, 1142, 1142, 1220,
     1241, 1241, 1177, 1241, 1220, 1220, 1220, 1220, 1251, 1251,
     1272, 1251, 1175, 1272,  878,  878,  878,  878,  962, 1103,

     1142,  962, 1103, 1105,  962, 1104, 1105,  962, 1174, 1104,
      962,  962,  962,  962,  962,  962, 1173, 1107, 1172,  962,
     1107,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962, 1170,  962, 1103,  962,  962, 1265, 1105,
     1169, 1265, 1168, 1103, 1272, 1110, 1111, 1105, 1110, 1111,
     1167, 1115, 1116, 1107, 1115, 1116, 1166, 1120, 1162, 1232,
     1120, 1107, 1232, 1265, 1274,  962,  969, 1274,  969, 1232,
     1266,  969, 1161, 1266,  969,  969,  969,  969,  969,  969,
     1232, 1153, 1152,  969,  969,  969,  969,  969,  969,  969,

     1113, 1110, 1111, 1113, 1151, 1266, 1143, 1115, 1116, 1110,
     1111, 1115, 1116, 1120, 1283, 1139, 1112, 1283,  969, 1120,
      969, 1097,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969, 1113, 1087, 1117,  969,
      973, 1117, 1069,  973, 1118, 1121,  973, 1118, 1121,  973,
      973, 1055,  973,  973,  973,  973,  973,  973, 1113, 1122,
     1052,  973, 1122,  973,  973,  973,  973,  973, 1123, 1254,
     1283, 1123, 1254, 1124, 1125, 1039, 1124, 1125, 1131, 1131,
     1135, 1131, 1254, 1135, 1117, 1038,  973, 1033,  973, 1278,

     1118, 1121, 1278, 1131, 1030, 1135, 1029, 1135, 1014, 1131,
     1126, 1135, 1008, 1126, 1001, 1122, 1129, 1117, 1117, 1129,
     1000, 1121, 1118, 1275, 1123,  998, 1275,  973,  975, 1124,
     1125,  975,  975,  997,  975, 1375, 1122,  975, 1375,  994,
      975,  975,  975,  975,  975,  975, 1123, 1124, 1125,  975,
      975,  975,  975,  975,  975,  975, 1126, 1127, 1290,  989,
     1127, 1290, 1129, 1131, 1278, 1135, 1402, 1282, 1126, 1402,
     1282, 1129, 1271,  983,  975, 1271,  975, 1275,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,

      975,  975,  982, 1127, 1234,  975,  985, 1234, 1127,  985,
      985,  981,  985,  979, 1234,  985,  985,  964,  985,  985,
      985,  985,  985,  985, 1127, 1234, 1290,  985,  985,  985,
      985,  985,  985,  985, 1128, 1271, 1282, 1128, 1276, 1299,
     1415, 1276, 1299, 1415, 1281, 1277, 1284, 1281, 1277, 1284,
     1285,  959,  985, 1285,  985,  958,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
     1128,  957, 1287,  985,  990, 1287, 1291,  990,  956, 1291,
      990,  990,  990,  990,  990,  990, 1276, 1128, 1281,  990,

     1299,  990,  990,  990,  990,  990, 1133, 1133, 1277, 1133,
     1134, 1134, 1284, 1134, 1136, 1137, 1137, 1136, 1137,  954,
      952, 1133, 1285, 1133,  990, 1134,  990, 1133,  951, 1136,
     1137, 1134,  946,  943, 1294, 1136, 1137, 1294, 1416, 1138,
     1138, 1416,  940, 1293, 1138, 1287, 1293, 1301, 1145, 1145,
     1301, 1235, 1291, 1145, 1235,  990, 1015, 1292,  939, 1015,
     1292, 1235, 1015, 1015, 1015, 1015, 1015, 1015, 1148, 1138,
      938, 1015, 1235, 1015, 1015, 1015, 1015, 1015, 1145, 1148,
     1148, 1133,  936,  935, 1148, 1134, 1138,  934, 1148, 1136,
     1137,  933, 1294, 1293, 1150, 1145, 1015, 1150, 1015, 1157,

     1157, 1157, 1157,  932, 1150, 1301, 1157,  930,  929, 1148,
     1154, 1154, 1150, 1150, 1150, 1154, 1157, 1157, 1157, 1157,
     1157, 1298, 1296, 1292, 1298, 1296, 1148, 1015, 1016, 1289,
     1280, 1016, 1289, 1280, 1016, 1016, 1016,  928, 1016, 1016,
     1154, 1295,  927, 1016, 1295, 1016, 1016, 1016, 1016, 1016,
     1418, 1305, 1214, 1418, 1305, 1214,  926, 1154, 1158, 1158,
     1158, 1158, 1214, 1420, 1420, 1158, 1420,  925, 1016, 1214,
     1016, 1297,  924, 1214, 1297, 1158, 1158, 1158, 1158, 1158,
     1159, 1159, 1159, 1159,  923, 1289, 1218, 1159, 1280, 1218,
     1296, 1289, 1298,  922, 1280, 1295, 1218, 1305,  921, 1016,

     1019, 1159, 1019, 1218,  920, 1019,  919, 1218, 1019, 1019,
     1019, 1019, 1019, 1019, 1305,  917,  916, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1219, 1297,  914, 1219, 1300, 1302,
     1303, 1300, 1302, 1303, 1219, 1358,  912, 1358, 1358, 1358,
     1297, 1219, 1019,  911, 1019, 1219, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
      909,  908, 1439, 1019, 1024, 1439, 1422, 1024, 1300, 1422,
     1024, 1024, 1024, 1024, 1024, 1024, 1300, 1302, 1303, 1024,
     1422, 1024, 1024, 1024, 1024, 1024,  904, 1439,  902, 1160,

     1160, 1160, 1160,  900, 1304, 1445, 1160, 1304, 1445, 1442,
     1345, 1345, 1442,  890, 1024, 1345, 1024, 1160, 1160, 1160,
     1160, 1176, 1176,  889, 1309, 1306, 1176, 1309, 1306, 1308,
     1176, 1176, 1308, 1457, 1442, 1176, 1457,  888, 1176, 1176,
     1345, 1176,  882,  871, 1311, 1024, 1025, 1311, 1345, 1025,
     1304, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1304, 1215,
      867, 1025, 1215, 1025, 1025, 1025, 1025, 1025,  838, 1215,
     1309, 1306,  798, 1445,  765, 1308, 1215, 1215, 1215, 1215,
     1215, 1238, 1309, 1308, 1238, 1238, 1025,  764, 1025, 1306,
     1311, 1457, 1431,  754, 1238, 1431, 1238,  753,  751, 1238,

     1238, 1238, 1238, 1404,  749, 1431,  721, 1238, 1238, 1311,
     1404, 1404, 1404, 1404,  715,  712,  711, 1025, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1047, 1047,

     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1549, 1569,  703,
     1549, 1569, 1406, 1336, 1336, 1406, 1336, 1342, 1342,  700,
     1342,  680, 1406,  673, 1047, 1047, 1047, 1047, 1336, 1406,
      671,  669, 1342, 1406, 1336,  668, 1446, 1448, 1342, 1446,
     1448, 1313,  665, 1314, 1313, 1310, 1314, 1315, 1310, 1447,
     1315,  662, 1447, 1047, 1047, 1047, 1047, 1047, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1313, 1336, 1314,
      660, 1310, 1342, 1315,  658, 1313, 1344, 1344, 1448, 1344,
     1570, 1447, 1446, 1570, 1089, 1089, 1089, 1089, 1310,  656,
      655, 1344, 1314, 1315,  652, 1449, 1462, 1344, 1449, 1462,
      650,  649, 1317, 1316, 1312, 1317, 1316, 1312, 1319, 1322,
      646, 1319, 1322, 1089, 1089, 1089, 1089, 1089, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092,  644, 1317, 1316,
     1312, 1344, 1412,  641, 1319, 1322, 1462, 1412, 1412, 1412,

     1412,  637, 1312, 1449, 1092, 1092, 1092, 1092, 1312, 1316,
     1450, 1319, 1458, 1450, 1317, 1458, 1465, 1322,  633, 1465,
      632, 1321, 1323, 1324, 1321, 1323, 1324, 1327, 1325, 1328,
     1327, 1325, 1328, 1092, 1092, 1092, 1092, 1092, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1321, 1323, 1324,
     1458, 1450,  629, 1327, 1325, 1328, 1458, 1321, 1325, 1326,
     1465, 1327, 1326, 1321, 1106, 1106, 1106, 1106, 1323, 1324,
     1331, 1573, 1329, 1331, 1573, 1329, 1460, 1328,  627, 1460,

     1452, 1330, 1332, 1452, 1330, 1332,  626, 1333, 1470, 1334,
     1333, 1470, 1334, 1106, 1106, 1106, 1106, 1106, 1132, 1132,
      625, 1132,  623, 1335, 1132, 1326, 1335, 1132,  622,  619,
     1132, 1132, 1132, 1132, 1132, 1132, 1331, 1326, 1329, 1132,
      618, 1132, 1132, 1132, 1132, 1132, 1329, 1330, 1332, 1348,
     1348, 1331, 1332, 1333, 1348, 1334, 1337, 1337,  615, 1337,
     1332, 1329, 1460, 1452, 1132, 1333, 1132, 1334,  609, 1335,
      606, 1337, 1330, 1337,  605, 1455, 1470, 1337, 1455, 1348,
      601, 1335,  599, 1453,  598, 1456, 1453, 1348, 1456, 1459,
      596, 1466, 1459, 1132, 1466, 1132, 1146, 1146,  594, 1146,

     1146, 1146, 1146, 1461, 1146, 1146, 1461, 1146, 1146, 1146,
      593, 1146, 1467, 1146, 1146, 1467,  590,  588, 1146, 1146,
     1146, 1146, 1146, 1146, 1464, 1353, 1353, 1464, 1455,  587,
     1353, 1337, 1339, 1339,  584, 1339, 1474, 1341, 1341, 1474,
     1341,  582, 1146, 1146, 1146, 1146, 1453, 1339, 1456, 1339,
     1459,  581, 1341, 1339, 1341, 1353, 1472, 1461, 1341, 1472,
     1466,  577,  573, 1353, 1467, 1463, 1468, 1471, 1463, 1468,
     1471, 1146, 1146, 1146, 1146, 1147, 1147,  571, 1147, 1147,
     1147, 1147,  566, 1147, 1147, 1464, 1147, 1147, 1147,  564,
     1147, 1581, 1147, 1147, 1581,  561,  552, 1147, 1147, 1147,

     1147, 1147, 1147, 1485, 1474, 1605, 1485, 1339, 1605,  549,
     1343, 1343, 1341, 1343,  545, 1476, 1407, 1468, 1476, 1407,
     1472, 1147, 1147, 1147, 1147, 1343, 1407, 1343, 1463, 1473,
     1471, 1343, 1473, 1407, 1407, 1407, 1407, 1407, 1410,  532,
     1475, 1410, 1478, 1475, 1787, 1478,  531, 1787, 1410, 1485,
     1147, 1147, 1147, 1147, 1216, 1410, 1485, 1216, 1216, 1410,
     1216, 1476, 1587, 1216, 1216, 1587, 1216, 1216, 1216, 1216,
     1216, 1216, 1605,  527,  526, 1216, 1216, 1216, 1216, 1216,
     1216, 1216,  522, 1476,  521, 1343, 1475, 1587, 1478, 1567,
     1480, 1475, 1473, 1480, 1478,  517, 1567, 1567, 1567, 1567,

     1216,  505, 1216,  499, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,  494,  490,
     1492, 1216, 1221, 1492, 1590, 1221, 1480, 1590, 1221, 1221,
     1221, 1221, 1221, 1221, 1349, 1477,  482, 1221, 1477, 1221,
     1221, 1221, 1221, 1221, 1479, 1349, 1349, 1479, 1480, 1482,
     1349,  478, 1482, 1481, 1349,  468, 1481,  465, 1355, 1355,
     1355, 1355, 1221,  462, 1221, 1355, 1492, 1354, 1354, 1354,
     1354,  459,  456,  448, 1354, 1349, 1355, 1355, 1355, 1355,
     1492, 1477, 1590, 1349, 1354, 1354, 1354, 1354, 1354, 1890,

     1479,  446, 1890, 1221, 1233, 1482,  403, 1233, 1233, 1481,
     1233, 1477,  402, 1233, 1233, 1479, 1233, 1233, 1233, 1233,
     1233, 1233, 1482,  401, 1481, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1411, 1483,  400, 1411, 1483, 1487,  397,  391,
     1487, 1486, 1411, 1600, 1486,  386, 1600,  378, 1489, 1411,
     1233, 1489, 1233, 1411, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,  377, 1483,
      367, 1233, 1237, 1487,  349, 1237,  346, 1486, 1237, 1237,
     1237, 1237, 1237, 1237, 1489, 1487, 1483, 1237,  340, 1237,

     1237, 1237, 1237, 1237, 1486,  339, 1600,  320, 1414, 1489,
     1490, 1414, 1414, 1490, 1592, 1917, 1591, 1592, 1917, 1591,
      309, 1414, 1237, 1414, 1237,  306, 1414, 1414, 1414, 1414,
      305,  301,  297, 1488, 1414, 1414, 1488, 1493, 1491,  296,
     1493, 1491, 1494, 1495, 1496, 1494, 1495, 1496, 1598, 1497,
      293, 1598, 1497, 1237, 1257, 1596, 1490, 1257, 1596,  292,
     1257, 1257, 1257, 1257, 1257, 1257, 1591, 1593, 1592, 1257,
     1593, 1257, 1257, 1257, 1257, 1257, 1490, 1498, 1502, 1488,
     1498, 1502, 1602, 1493, 1491, 1602,  289,  288, 1494, 1495,
     1496, 1488, 1491,  285, 1257, 1497, 1257, 1488, 1598,  280,

     1493, 1497, 1500, 1494,  265, 1500, 1501, 1495, 1503, 1501,
      249, 1503, 1504, 1496, 1599, 1504, 1596, 1599,  235, 1594,
      234, 1593, 1594, 1498, 1502, 1257, 1258,  233, 1498, 1258,
     1505, 1505, 1258, 1258, 1258, 1505, 1258, 1258,  229,  228,
      224, 1258, 1502, 1258, 1258, 1258, 1258, 1258, 1500,  223,
     1595,  219, 1501, 1595, 1503, 1602, 1508, 1508, 1504, 1609,
     1505, 1508, 1609,  216, 1599, 1505, 1258,  215, 1258, 1501,
     1500, 1503, 1601, 1594, 1597, 1601,  198, 1597,  184, 1604,
     1504, 1603, 1604,  180, 1603, 1608, 1508, 1607, 1608, 1712,
     1607, 1508, 1712, 1612, 1513, 1513, 1612, 1258, 1259, 1513,

      176, 1259, 1595, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1509, 1614,  172, 1259, 1614, 1259, 1259, 1259, 1259, 1259,
     1920, 1509, 1509, 1920, 1513,  167, 1509, 1609, 1597, 1513,
     1509, 1603, 1604, 1610, 1713, 1601, 1610, 1713, 1259,  153,
     1259, 1515, 1515, 1515, 1515, 1612, 1604, 1608, 1515, 1611,
     1607, 1509, 1611, 1712, 1615,  150, 1509, 1615, 1515, 1515,
     1515, 1515, 1515, 1613,  144, 1616, 1613, 1614, 1616, 1259,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,  132,

     1610,  128, 1713, 1516, 1516, 1516, 1516, 1611, 1615, 1709,
     1516, 1616, 1709,  111,  106,  104, 1286, 1286, 1286, 1286,
     1516, 1516, 1516, 1516, 1516, 1933, 1613, 1936, 1933, 1943,
     1936, 1616, 1943, 1947, 1709, 2152, 1947, 2152, 2152, 2152,
     2152,   99,   96,   95,   93, 1286, 1286, 1286, 1286, 1286,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,

     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,   92,
     1715, 1727,   91, 1715, 1727, 1809, 1619,    8, 1809, 1619,
        7, 1617, 1732, 1732, 1617, 1732, 1318, 1318, 1318, 1318,
     1718,    0, 1623, 1718, 1632, 1623, 1714, 1632, 1867, 1714,
     1809, 1867, 1618, 1620, 1621, 1618, 1620, 1621, 1622, 1624,

        0, 1622, 1624,    0,    0, 1318, 1318, 1318, 1318, 1318,
     1338, 1338, 1619, 1338, 1338, 1727, 1338, 1617, 1732, 1338,
     1619, 1715, 1338, 1338, 1338, 1338, 1338, 1338, 1623, 1617,
     1632, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1618, 1620,
     1621, 1718, 1618, 1623, 1622, 1624, 1636, 1620, 1621, 1636,
     1622, 1632, 1714, 1624, 1625, 1867, 1338, 1625, 1338,    0,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,    0, 1338, 1626, 1338, 1340, 1626,
     1722, 1340, 1636, 1722, 1340, 1340, 1340, 1340, 1340, 1340,

     1625,    0,    0, 1340, 1625, 1340, 1340, 1340, 1340, 1340,
     1721,    0,    0, 1721, 1636, 1627, 1628,    0, 1627, 1628,
     1716, 1629, 1637, 1716, 1629, 1637,    0,    0, 1340,    0,
     1340,    0, 1626,    0, 1635, 1719, 1626, 1635, 1719,    0,
        0,    0, 1630, 1725, 1634, 1630, 1725, 1634,    0, 1639,
        0, 1720, 1639, 1641, 1720, 1722, 1641,    0,    0, 1340,
     1408, 1627, 1628, 1408, 1408,    0, 1408, 1629, 1637, 1408,
     1408, 1721, 1408, 1408, 1408, 1408, 1408, 1408, 1627, 1628,
     1635, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1630, 1637,
     1634,    0, 1630, 1716, 1629, 1639, 1635, 1631, 1719, 1641,

     1631, 1639, 1726, 1720, 1725, 1726, 1408, 1634, 1408, 1641,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408,    0,    0, 1638, 1408, 1413, 1638,
        0, 1413,    0, 1631, 1413, 1413, 1413, 1413, 1413, 1413,
     1631, 1640,    0, 1413, 1640, 1413, 1413, 1413, 1413, 1413,
     1726, 1643, 1643,    0, 1631, 1647, 1643,    0, 1814, 1642,
     1728, 1814, 1642, 1728, 1646, 1646, 1647, 1647, 1413, 1646,
     1413, 1647, 1638, 1729, 1731, 1647, 1729, 1731,    0, 1733,
     1735, 1643, 1733, 1735, 1638, 1816,    0, 1640, 1816, 1734,

     1896,    0, 1734, 1896, 1646,    0, 1647, 1651, 1651, 1413,
     1433, 1643, 1651, 1433, 1640, 1642, 1433, 1433, 1433, 1433,
     1433, 1433, 1814, 1642, 1646, 1433, 1647, 1433, 1433, 1433,
     1433, 1433, 1728, 1753, 1753, 1733, 1735, 1651, 1753,    0,
     1652, 1652, 1652, 1652, 1729, 1734, 1731, 1652, 1736,    0,
     1433, 1736, 1433, 1733, 1896,    0, 1735, 1651, 1652, 1652,
     1652, 1652, 1737, 1753, 1816, 1737, 1739, 1734, 1740, 1739,
        0, 1740, 1742, 1741, 1743, 1742, 1741, 1743,    0,    0,
     1746, 1433, 1434, 1746, 1747, 1434,    0, 1747, 1434, 1434,
     1434,    0, 1434, 1434, 1736, 1863,    0, 1434, 1863, 1434,

     1434, 1434, 1434, 1434,    0,    0, 1756, 1756, 1737, 1736,
        0, 1756, 1739, 1861, 1740,    0, 1861,    0, 1742, 1741,
     1743,    0, 1434,    0, 1434, 1741, 1746, 1739,    0, 1813,
     1747, 1740, 1813, 1742,    0, 1737, 1756, 1748, 1861, 1743,
     1748, 1746, 1747, 1749,    0, 1863, 1749, 1750, 1752, 1815,
     1750, 1752, 1815, 1434, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1748,    0, 1761, 1761,    0,    0, 1749,
     1761, 1748, 1813, 1750, 1752, 1819, 1821,    0, 1819, 1821,

     1454, 1454, 1454, 1454, 1820, 1749, 1817, 1820, 1750, 1817,
     1752, 1822, 1815, 1823, 1822, 1761, 1823, 1897, 1825,    0,
     1897, 1825, 1824, 1826, 1862, 1824, 1826, 1862,    0, 1454,
     1454, 1454, 1454, 1454, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1819, 1817, 1820,    0,    0, 1822, 1821,
     1825, 1897,    0, 1757, 1823, 1827, 1827, 1862, 1827,    0,
     1484, 1484, 1484, 1484, 1757, 1757, 1824, 1829, 1830, 1757,
     1829, 1830, 1826, 1757, 1831, 1832,    0, 1831, 1832, 1835,

     1833, 1836, 1835, 1833, 1836, 1837,    0,    0, 1837, 1484,
     1484, 1484, 1484, 1484, 1757, 1838,    0, 1840, 1838, 1839,
     1840, 1827, 1839, 1841, 1842, 1865, 1841, 1842, 1865, 1864,
        0,    0, 1864, 1829, 1830, 1866, 1868,    0, 1866, 1868,
     1831, 1832, 1830,    0,    0, 1835, 1833, 1836,    0, 1869,
     1829, 1837, 1869, 1870,    0,    0, 1870, 1831, 1833,    0,
        0, 1838, 1836, 1840, 1832, 1839,    0, 1835, 1872, 1841,
     1842, 1872, 1838, 1873, 1874, 1841, 1873, 1874, 1837,    0,
     1839, 1840, 1864, 1875, 1876,    0, 1875, 1876, 1865, 1877,
        0, 1878, 1877, 1842, 1878, 1879,    0, 1880, 1879, 1868,

     1880,    0,    0,    0, 1866, 1895, 1870, 1898, 1895, 1899,
     1898,    0, 1899, 1900, 1872, 1901, 1900, 1869, 1901, 1873,
     1874, 1872, 1903, 1873,    0, 1903,    0, 1874, 1904, 1875,
     1876, 1904,    0, 1905,    0, 1877, 1905, 1878,    0, 1906,
        0, 1879, 1906, 1880, 1907, 1908, 1875, 1907, 1908,    0,
     1880,    0, 1909, 1876, 1878, 1909, 1877,    0, 1921, 1922,
     1898, 1921, 1922, 1879, 1924,    0, 1895, 1924, 1903, 1901,
        0, 1900, 1926, 1899, 1904, 1926,    0, 1927, 1928, 1905,
     1927, 1928, 1904, 1903,    0, 1906, 1937, 1905,    0, 1937,
     1907, 1908, 1906, 1930,    0,    0, 1930, 1938, 1909, 1940,

     1938, 1941, 1940, 1908, 1941,    0, 1909,    0, 1907, 1950,
     1950, 2188, 1950, 1922, 2188,    0, 2119, 2266, 1926,    0,
     2266, 1921,    0, 1927, 1928,    0, 2119,    0, 1924, 2119,
     2119, 2119, 1928,    0,    0, 2188,    0, 2188, 2179, 1930,
     1927, 2266,    0, 2266,    0, 1940,    0, 1941, 2179,    0,
     1937, 2179, 2179, 2179,    0, 1950,    0, 1930,    0,    0,
     1938,    0,    0, 1940, 1941, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1953, 1953, 1953, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,

     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
     1957, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,

     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1959, 1959, 1959,
     1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959,
     1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959,
     1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959,
     1959, 1959, 1959, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1962, 1962, 1962, 1962, 1962,
     1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962,
     1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962,
     1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962,
     1962, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1963, 1963, 1963, 1963, 1963, 1964, 1964, 1964,

     1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964,
     1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964,
     1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964,
     1964, 1964, 1964, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,

     1966, 1966, 1966, 1966, 1966, 1967, 1967, 1967, 1967, 1967,
     1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1969, 1969, 1969,
     1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969,
     1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969,

     1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969,
     1969, 1969, 1969, 1970, 1970, 1970, 1970, 1970, 1970, 1970,
     1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970,
     1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970,
     1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1972, 1972, 1972, 1972, 1972,
     1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,

     1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
     1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
     1972, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1974, 1974, 1974,
     1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974,
     1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974,
     1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974,
     1974, 1974, 1974, 1975, 1975, 1975, 1975, 1975, 1975, 1975,

     1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,
     1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,
     1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1976,
     1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976,
     1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976,
     1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976,
     1976, 1976, 1976, 1976, 1976, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,

     1977, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1979, 2205,    0,
     2205, 2205, 2205, 2205, 1979,    0,    0, 1979, 1979, 1979,
        0, 1979, 1980, 1980,    0, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1981,    0,
        0,    0,    0, 1981, 1981, 1981, 1981, 1981, 1981,    0,

     1981, 1981, 1981, 1981, 1981, 1981, 2286, 1981, 2286, 2286,
     2286, 2286,    0,    0,    0, 1981, 1982,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1982,    0, 1982, 1982, 1982, 1982,    0,
        0,    0,    0, 1982, 1983,    0,    0,    0,    0, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,    0,    0,
        0, 1983, 1984,    0,    0,    0, 1984, 1984, 1984, 1984,
     1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984,
     1984, 1984, 1984, 1984, 1984, 1984,    0,    0,    0, 1984,

     1985,    0, 1985, 1985,    0, 1985,    0,    0,    0,    0,
        0, 1985, 1985,    0, 1985, 1985, 1985, 1985, 1986,    0,
     1986, 1986, 1986, 1986, 1986,    0,    0,    0,    0, 1986,
     1986,    0, 1986, 1986, 1986, 1986, 1987, 1987,    0, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1988,    0,    0,    0,    0,    0, 1988,    0,
     1988, 1988, 1988, 1988, 1988,    0,    0,    0,    0, 1988,
     1988, 1988, 1988, 1988, 1988, 1988,    0,    0,    0,    0,

     1988, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1990,    0, 1990,
     1990, 1990, 1990,    0,    0,    0,    0, 1990, 1991, 1991,
     1991, 1991,    0,    0,    0,    0,    0, 1991,    0, 1991,
     1991, 1991, 1991,    0,    0,    0,    0, 1991, 1992, 1992,
     1992, 1992,    0,    0,    0, 1992,    0,    0,    0,    0,
        0,    0,    0, 1992,    0,    0, 1992,    0,    0,    0,
        0,    0, 1992,    0, 1992, 1992, 1992, 1992,    0,    0,

        0, 1992, 1992, 1993, 1993, 1993, 1993,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1993, 1993,
     1993, 1993, 1993,    0,    0,    0,    0, 1993,    0, 1993,
     1993, 1993, 1993,    0,    0,    0,    0, 1993, 1994, 1994,
     1994, 1994,    0,    0,    0, 1994,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1994,    0, 1994, 1994, 1994, 1994,    0,    0,
        0,    0, 1994, 1995, 1995,    0, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,

     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1996,
        0,    0,    0,    0,    0, 1996,    0, 1996, 1996, 1996,
     1996, 1996,    0,    0,    0,    0, 1996, 1996, 1996, 1996,
     1996, 1996, 1996,    0,    0,    0,    0, 1996, 1997, 1997,
        0, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1998, 1998,    0,    0,    0,    0,
        0, 1998,    0, 1998, 1998, 1998, 1998, 1998,    0,    0,
     1998,    0, 1998, 1998, 1998, 1998, 1998, 1998, 1998,    0,

        0,    0,    0, 1998, 1999, 1999, 1999, 1999,    0,    0,
        0, 1999,    0,    0,    0,    0,    0,    0,    0, 1999,
        0,    0, 1999,    0,    0,    0,    0,    0, 1999,    0,
     1999, 1999, 1999, 1999,    0,    0,    0, 1999, 1999, 2000,
     2000, 2000, 2000,    0,    0,    0,    0,    0, 2000,    0,
        0,    0,    0,    0, 2000, 2000, 2000, 2000,    0,    0,
        0,    0,    0, 2000,    0, 2000, 2000, 2000, 2000,    0,
        0,    0,    0, 2000, 2001, 2001, 2001, 2001,    0,    0,
        0, 2001,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2001,    0,

     2001, 2001, 2001, 2001,    0,    0,    0,    0, 2001, 2002,
        0, 2002, 2002,    0,    0,    0,    0,    0,    0, 2002,
        0, 2002, 2002, 2002, 2002,    0,    0,    0,    0, 2002,
     2003, 2003,    0, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2004, 2004,    0, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,

     2004, 2004, 2005, 2005,    0, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2006,    0,
        0,    0,    0,    0, 2006,    0, 2006, 2006, 2006, 2006,
     2006,    0,    0,    0,    0, 2006, 2006, 2006, 2006, 2006,
     2006, 2006,    0,    0,    0,    0, 2006, 2007,    0, 2007,
     2007, 2007, 2007,    0,    0,    0,    0, 2007, 2008, 2008,
     2008, 2008,    0,    0,    0, 2008,    0,    0,    0,    0,
        0,    0,    0,    0, 2008, 2008, 2008,    0,    0,    0,

        0,    0, 2008,    0, 2008, 2008, 2008, 2008,    0,    0,
        0,    0, 2008, 2009, 2009, 2009, 2009,    0,    0,    0,
     2009,    0,    0,    0,    0,    0,    0,    0, 2009,    0,
        0, 2009,    0,    0,    0,    0,    0, 2009,    0, 2009,
     2009, 2009, 2009,    0,    0,    0, 2009, 2009, 2010, 2010,
     2010, 2010,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2010, 2010, 2010, 2010,    0,    0,    0,
        0,    0, 2010,    0, 2010, 2010, 2010, 2010,    0,    0,
        0,    0, 2010, 2011, 2011, 2011, 2011,    0,    0,    0,
     2011,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 2011,    0, 2011,
     2011, 2011, 2011,    0,    0,    0,    0, 2011, 2012,    0,
     2012, 2012, 2012, 2012,    0,    0,    0,    0, 2012, 2013,
     2013, 2013,    0,    0,    0,    0,    0,    0, 2013,    0,
     2013, 2013, 2013, 2013,    0,    0,    0,    0, 2013, 2014,
     2014, 2014, 2014,    0,    0,    0,    0,    0,    0, 2014,
        0, 2014, 2014, 2014, 2014,    0,    0,    0,    0, 2014,
     2015, 2015,    0, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015,    0, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015,    0, 2015, 2015, 2015,

     2015, 2015, 2015, 2015, 2015, 2015, 2016,    0, 2016, 2016,
        0,    0,    0,    0,    0,    0, 2016,    0, 2016, 2016,
     2016, 2016,    0,    0,    0,    0, 2016, 2017, 2017, 2017,
     2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,
     2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,
     2017,    0, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,
     2017, 2017, 2017, 2018, 2018,    0, 2018, 2018, 2018, 2018,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
     2018, 2018, 2018, 2018, 2018, 2018, 2018,    0, 2018, 2018,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2019,

     2019,    0, 2019,    0,    0, 2019, 2019, 2019,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2019,    0,
     2019,    0, 2019,    0, 2019, 2019,    0,    0,    0,    0,
        0,    0, 2019, 2020,    0, 2020, 2020,    0,    0,    0,
        0,    0,    0, 2020,    0, 2020, 2020, 2020, 2020,    0,
        0,    0,    0, 2020, 2021, 2021,    0, 2021, 2021, 2021,
     2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021,
     2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021,
     2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021,
     2022, 2022,    0, 2022,    0, 2022, 2022, 2022, 2022, 2022,

     2022, 2022,    0, 2022, 2022, 2022, 2022,    0, 2022, 2022,
     2022, 2022, 2022, 2022,    0, 2022,    0, 2022, 2022, 2022,
     2022, 2022, 2022, 2022, 2022, 2022, 2023,    0,    0, 2023,
        0,    0,    0,    0,    0, 2023,    0,    0,    0,    0,
     2023, 2023,    0, 2023,    0,    0,    0,    0,    0,    0,
     2023,    0, 2023, 2023, 2023, 2023, 2024, 2024,    0, 2024,
        0, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
        0, 2024,    0, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2025, 2025,    0, 2025,    0, 2025, 2025, 2025,

     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025,
     2025, 2025, 2025, 2025, 2025, 2025,    0, 2025,    0, 2025,
     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2026,    0,
     2026, 2026,    0,    0,    0,    0,    0,    0, 2026,    0,
     2026, 2026, 2026, 2026,    0,    0,    0,    0, 2026, 2027,
     2027,    0, 2027, 2027, 2027, 2027, 2027, 2027, 2027,    0,
        0, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027,
     2027, 2027, 2027,    0, 2027,    0, 2027, 2027, 2027, 2027,
     2027, 2027, 2027, 2027, 2027, 2028,    0, 2028, 2028, 2028,
     2028,    0,    0,    0,    0, 2028, 2029, 2029, 2029, 2029,

        0,    0,    0,    0,    0, 2029,    0, 2029, 2029, 2029,
     2029,    0,    0,    0,    0, 2029, 2030,    0, 2030, 2030,
     2030, 2030,    0,    0,    0,    0, 2030, 2031, 2031, 2031,
     2031,    0,    0,    0,    0,    0, 2031,    0, 2031, 2031,
     2031, 2031,    0,    0,    0,    0, 2031, 2032, 2032,    0,
     2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032,
     2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032,
     2032,    0, 2032,    0, 2032, 2032, 2032, 2032, 2032, 2032,
     2032, 2032, 2032, 2033,    0, 2033, 2033,    0,    0,    0,
        0,    0,    0, 2033,    0, 2033, 2033, 2033, 2033,    0,

        0,    0,    0, 2033, 2034, 2034,    0, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,    0,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
        0, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
     2035, 2035,    0, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
     2035, 2035,    0, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
     2035, 2035, 2035, 2035,    0, 2035,    0, 2035, 2035, 2035,
     2035, 2035, 2035, 2035, 2035, 2035, 2036,    0, 2036, 2036,
     2036, 2036, 2036,    0,    0,    0,    0,    0, 2036,    0,
     2036, 2036, 2036, 2036,    0,    0,    0,    0, 2036, 2037,

     2037,    0, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037,    0, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038,    0,    0, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2039,    0,    0, 2039,    0,    0,    0,    0,    0,
     2039,    0,    0,    0,    0,    0,    0,    0,    0, 2039,
        0,    0,    0,    0,    0, 2039,    0, 2039, 2040,    0,

        0,    0,    0, 2040, 2040, 2040, 2040, 2040, 2040,    0,
     2040, 2040, 2040, 2040, 2040, 2040,    0, 2040,    0,    0,
        0,    0,    0,    0,    0, 2040, 2041, 2041,    0, 2041,
     2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041,
     2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041,
     2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041,
     2041, 2041, 2042,    0,    0, 2042,    0,    0,    0,    0,
        0, 2042,    0,    0,    0,    0,    0,    0,    0, 2042,
     2042,    0,    0,    0,    0,    0, 2042,    0, 2042, 2042,
     2042, 2042, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,

     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2045, 2045, 2045, 2045,    0, 2045,
        0,    0,    0, 2045,    0, 2045, 2045, 2045, 2045, 2046,
     2046, 2046,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2046,    0, 2046,    0, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046,    0, 2046, 2046, 2047, 2047,    0,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2048,    0,    0,    0,    0, 2048, 2048,
     2048, 2048, 2048, 2048,    0, 2048, 2048, 2048, 2048, 2048,
     2048,    0, 2048,    0,    0,    0,    0,    0,    0,    0,
     2048, 2049,    0, 2049, 2049, 2049, 2049,    0,    0,    0,
        0, 2049, 2050, 2050, 2050,    0,    0,    0,    0,    0,
     2050,    0, 2050, 2050, 2050, 2050,    0,    0,    0,    0,

     2050, 2051,    0,    0,    0,    0, 2051, 2051, 2051, 2051,
     2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 2051, 2051, 2051,    0,    0,    0, 2051, 2052,
        0,    0,    0,    0, 2052, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2052,    0,    0,    0, 2052, 2053,    0,    0,
        0,    0, 2053, 2053, 2053, 2053, 2053, 2053,    0, 2053,
     2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053,
     2053,    0,    0,    0, 2053, 2054,    0,    0,    0,    0,
     2054, 2054, 2054, 2054, 2054, 2054,    0, 2054, 2054, 2054,

     2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054,    0,
        0,    0, 2054, 2055,    0, 2055, 2055,    0, 2055,    0,
        0,    0,    0,    0, 2055, 2055,    0, 2055, 2055, 2055,
     2055, 2056,    0,    0, 2056,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2056, 2056, 2056, 2056, 2056,
     2056, 2057,    0, 2057, 2057, 2057, 2057, 2057,    0,    0,
        0,    0, 2057, 2057,    0, 2057, 2057, 2057, 2057, 2058,
        0, 2058, 2058, 2058, 2058, 2058,    0,    0,    0,    0,
     2058, 2058,    0, 2058, 2058, 2058, 2058, 2059, 2059,    0,

     2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
     2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
     2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
     2059, 2059, 2059, 2060,    0,    0,    0,    0,    0, 2060,
        0, 2060, 2060, 2060, 2060, 2060,    0,    0,    0,    0,
     2060, 2060, 2060, 2060, 2060, 2060, 2060,    0,    0,    0,
        0, 2060, 2061,    0,    0,    0,    0,    0, 2061,    0,
     2061,    0, 2061, 2061, 2061,    0,    0,    0,    0, 2061,
     2061, 2061, 2061, 2061, 2061, 2061,    0,    0,    0,    0,
     2061, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,

     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2063, 2063, 2063,
     2063,    0,    0,    0,    0,    0, 2063,    0, 2063, 2063,
     2063, 2063,    0,    0,    0,    0, 2063, 2064,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2064,    0, 2064, 2064, 2064, 2064,
        0,    0,    0,    0, 2064, 2065, 2065, 2065, 2065,    0,
        0,    0, 2065,    0,    0,    0,    0,    0,    0,    0,
     2065,    0,    0, 2065,    0,    0,    0,    0,    0, 2065,

        0, 2065, 2065, 2065, 2065,    0,    0,    0, 2065, 2065,
     2066, 2066, 2066, 2066,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2066, 2066, 2066, 2066, 2066,
        0,    0,    0,    0, 2066,    0, 2066, 2066, 2066, 2066,
        0,    0,    0,    0, 2066, 2067, 2067, 2067, 2067,    0,
        0,    0, 2067,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2067,
        0, 2067, 2067, 2067, 2067,    0,    0,    0,    0, 2067,
     2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
     2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,

     2068, 2068,    0, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
     2068, 2068, 2068, 2068, 2068, 2068, 2069, 2069,    0, 2069,
        0,    0,    0,    0, 2069,    0, 2069, 2069, 2069, 2069,
        0,    0,    0,    0, 2069, 2070, 2070,    0, 2070, 2070,
     2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070,
     2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070,
     2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070,
     2070, 2071,    0,    0,    0,    0,    0, 2071,    0, 2071,
     2071, 2071, 2071, 2071,    0,    0,    0,    0, 2071, 2071,
     2071, 2071, 2071, 2071, 2071,    0,    0,    0,    0, 2071,

     2072,    0,    0,    0,    0,    0, 2072,    0, 2072,    0,
     2072, 2072, 2072,    0,    0,    0,    0, 2072, 2072, 2072,
     2072, 2072, 2072, 2072,    0,    0,    0,    0, 2072, 2073,
     2073,    0, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073,
     2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073,
     2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073,
     2073, 2073, 2073, 2073, 2073, 2074, 2074,    0, 2074, 2074,
     2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074,
     2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074,
     2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074,

     2074, 2075, 2075,    0,    0,    0,    0,    0, 2075,    0,
     2075, 2075, 2075, 2075, 2075,    0,    0, 2075,    0, 2075,
     2075, 2075, 2075, 2075, 2075, 2075,    0,    0,    0,    0,
     2075, 2076,    0,    0,    0,    0,    0, 2076,    0, 2076,
        0, 2076, 2076, 2076,    0,    0,    0,    0, 2076, 2076,
     2076, 2076, 2076, 2076, 2076,    0,    0,    0,    0, 2076,
     2077, 2077, 2077, 2077,    0,    0,    0, 2077,    0,    0,
        0,    0,    0,    0,    0, 2077,    0,    0, 2077,    0,
        0,    0,    0,    0, 2077,    0, 2077, 2077, 2077, 2077,
        0,    0,    0, 2077, 2077, 2078, 2078, 2078, 2078,    0,

        0,    0,    0,    0, 2078,    0,    0,    0,    0,    0,
     2078, 2078, 2078, 2078,    0,    0,    0,    0,    0, 2078,
        0, 2078, 2078, 2078, 2078,    0,    0,    0,    0, 2078,
     2079, 2079, 2079, 2079,    0,    0,    0, 2079,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2079,    0, 2079, 2079, 2079, 2079,
        0,    0,    0,    0, 2079, 2080, 2080, 2080, 2080, 2080,
     2080, 2080, 2080, 2080, 2080, 2080,    0, 2080, 2080, 2080,
     2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080,
     2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080,

     2080, 2081,    0,    0, 2081,    0,    0,    0,    0,    0,
     2081,    0,    0,    0,    0,    0,    0, 2081, 2081,    0,
        0,    0,    0,    0,    0, 2081,    0, 2081, 2081, 2081,
     2081,    0,    0,    0,    0, 2081, 2082,    0, 2082, 2082,
        0,    0,    0,    0,    0,    0, 2082,    0, 2082, 2082,
     2082, 2082,    0,    0,    0,    0, 2082, 2083, 2083,    0,
     2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
     2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
     2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
     2083, 2083, 2083, 2084, 2084,    0, 2084, 2084, 2084, 2084,

     2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084,
     2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084,
     2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2084, 2085,
     2085,    0, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2086,    0,    0,    0,    0,
        0, 2086,    0, 2086, 2086, 2086, 2086, 2086,    0,    0,
        0,    0, 2086, 2086, 2086, 2086, 2086, 2086, 2086,    0,
        0,    0,    0, 2086, 2087,    0,    0,    0,    0,    0,

     2087,    0, 2087,    0, 2087, 2087, 2087,    0,    0,    0,
        0, 2087, 2087, 2087, 2087, 2087, 2087, 2087,    0,    0,
        0,    0, 2087, 2088, 2088, 2088, 2088,    0,    0,    0,
     2088,    0,    0,    0,    0,    0,    0,    0,    0, 2088,
     2088, 2088,    0,    0,    0,    0,    0, 2088,    0, 2088,
     2088, 2088, 2088,    0,    0,    0,    0, 2088, 2089,    0,
     2089, 2089, 2089, 2089,    0,    0,    0,    0, 2089, 2090,
     2090, 2090, 2090,    0,    0,    0, 2090,    0,    0,    0,
        0,    0,    0,    0,    0, 2090, 2090, 2090,    0,    0,
        0,    0,    0, 2090,    0, 2090, 2090, 2090, 2090,    0,

        0,    0,    0, 2090, 2091, 2091, 2091, 2091,    0,    0,
        0, 2091,    0,    0,    0,    0,    0,    0,    0, 2091,
        0,    0, 2091,    0,    0,    0,    0,    0, 2091,    0,
     2091, 2091, 2091, 2091,    0,    0,    0, 2091, 2091, 2092,
     2092, 2092, 2092,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2092, 2092, 2092, 2092,    0,    0,
        0,    0,    0, 2092,    0, 2092, 2092, 2092, 2092,    0,
        0,    0,    0, 2092, 2093, 2093, 2093, 2093,    0,    0,
        0, 2093,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2093,    0,

     2093, 2093, 2093, 2093,    0,    0,    0,    0, 2093, 2094,
     2094,    0,    0,    0,    0,    0,    0, 2094,    0, 2094,
     2094, 2094, 2094,    0,    0,    0,    0, 2094, 2095, 2095,
     2095,    0,    0,    0,    0,    0,    0, 2095,    0, 2095,
     2095, 2095, 2095,    0,    0,    0,    0, 2095, 2096,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2096,    0, 2096, 2096, 2096,
     2096,    0,    0,    0,    0, 2096, 2097, 2097, 2097, 2097,
        0,    0,    0,    0,    0,    0, 2097,    0, 2097, 2097,
     2097, 2097,    0,    0,    0,    0, 2097, 2098, 2098,    0,

     2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,    0,
     2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098,    0, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098, 2099,    0, 2099, 2099,    0,    0,    0,
        0,    0,    0, 2099,    0, 2099, 2099, 2099, 2099,    0,
        0,    0,    0, 2099, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,    0, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2101, 2101,    0, 2101, 2101, 2101, 2101, 2101, 2101, 2101,

     2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101,
     2101, 2101, 2101, 2101,    0, 2101, 2101, 2101, 2101, 2101,
     2101, 2101, 2101, 2101, 2101, 2101, 2102,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2102,    0, 2102, 2102, 2102, 2102,    0,
        0,    0,    0, 2102, 2103,    0, 2103, 2103,    0,    0,
        0,    0,    0,    0, 2103,    0, 2103, 2103, 2103, 2103,
        0,    0,    0,    0, 2103, 2104, 2104,    0, 2104, 2104,
     2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104,
     2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104,

     2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104,
     2104, 2105, 2105,    0, 2105,    0, 2105, 2105, 2105, 2105,
     2105, 2105, 2105,    0, 2105, 2105, 2105, 2105,    0, 2105,
     2105, 2105, 2105, 2105, 2105,    0, 2105,    0, 2105, 2105,
     2105, 2105, 2105, 2105, 2105, 2105, 2105, 2106,    0,    0,
     2106,    0,    0,    0,    0,    0, 2106,    0,    0,    0,
        0, 2106, 2106,    0, 2106,    0,    0,    0,    0,    0,
        0, 2106,    0, 2106, 2106, 2106, 2106, 2107, 2107,    0,
     2107,    0, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107,    0, 2107,    0, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2108, 2108,    0, 2108,    0, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2108, 2108, 2108,    0, 2108,    0,
     2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2109,
        0, 2109, 2109,    0,    0,    0,    0,    0,    0, 2109,
        0, 2109, 2109, 2109, 2109,    0,    0,    0,    0, 2109,
     2110, 2110,    0, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
        0,    0, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
     2110, 2110, 2110, 2110,    0, 2110,    0, 2110, 2110, 2110,

     2110, 2110, 2110, 2110, 2110, 2110, 2111, 2111, 2111, 2111,
        0,    0,    0,    0,    0, 2111,    0, 2111, 2111, 2111,
     2111,    0,    0,    0,    0, 2111, 2112,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2112,    0, 2112, 2112, 2112, 2112,    0,
        0,    0,    0, 2112, 2113, 2113, 2113, 2113,    0,    0,
        0,    0,    0, 2113,    0, 2113, 2113, 2113, 2113,    0,
        0,    0,    0, 2113, 2114,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2114,    0, 2114, 2114, 2114, 2114,    0,    0,    0,

        0, 2114, 2115, 2115,    0, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115,    0, 2115,    0, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2116,    0,
     2116, 2116,    0,    0,    0,    0,    0,    0, 2116,    0,
     2116, 2116, 2116, 2116,    0,    0,    0,    0, 2116, 2117,
     2117,    0, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
     2117, 2117, 2117, 2117,    0, 2117, 2117, 2117, 2117, 2117,
     2117, 2117, 2117, 2117, 2117,    0, 2117, 2117, 2117, 2117,
     2117, 2117, 2117, 2117, 2117, 2118, 2118,    0, 2118, 2118,

     2118, 2118, 2118, 2118, 2118, 2118, 2118,    0, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,    0,
     2118,    0, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2120,    0, 2120, 2120, 2120, 2120, 2120,    0,    0,
        0,    0,    0, 2120,    0, 2120, 2120, 2120, 2120,    0,
        0,    0,    0, 2120, 2121,    0, 2121, 2121, 2121, 2121,
        0,    0,    0,    0, 2121, 2122, 2122,    0, 2122, 2122,
     2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
     2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
     2122,    0, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,

     2122, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
     2123,    0,    0, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
     2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
     2123, 2123, 2123, 2123, 2123, 2123, 2123, 2124,    0,    0,
     2124,    0,    0,    0,    0,    0, 2124,    0,    0,    0,
        0,    0,    0, 2124,    0, 2124,    0,    0,    0,    0,
        0, 2124,    0, 2124, 2125,    0,    0,    0,    0, 2125,
     2125, 2125, 2125, 2125, 2125,    0, 2125, 2125, 2125, 2125,
     2125, 2125,    0, 2125,    0,    0,    0,    0,    0,    0,
        0, 2125, 2126, 2126,    0, 2126, 2126, 2126, 2126, 2126,

     2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126,
     2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126,
     2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2127,    0,
        0, 2127,    0,    0,    0,    0,    0, 2127,    0,    0,
        0,    0,    0,    0, 2127, 2127, 2127,    0,    0,    0,
        0,    0, 2127,    0, 2127, 2127, 2127, 2127, 2128,    0,
        0, 2128, 2128,    0,    0,    0,    0,    0,    0,    0,
     2128,    0, 2128,    0,    0, 2128, 2128,    0,    0,    0,
     2128, 2128, 2128,    0, 2128, 2129, 2129,    0, 2129, 2129,
     2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129,

     2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
     2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
     2129, 2130,    0,    0, 2130,    0,    0, 2130,    0,    0,
     2130,    0, 2130, 2130, 2130, 2130, 2130, 2130,    0, 2130,
     2130, 2130, 2130, 2130, 2130,    0, 2130,    0,    0,    0,
        0,    0,    0,    0, 2130, 2132,    0,    0, 2132, 2132,
        0,    0,    0,    0,    0,    0,    0, 2132,    0, 2132,
        0,    0, 2132, 2132,    0,    0,    0, 2132, 2132, 2132,
        0, 2132, 2133,    0,    0, 2133,    0,    0,    0,    0,
        0, 2133,    0,    0,    0,    0,    0,    0,    0, 2133,

     2133,    0,    0,    0,    0,    0, 2133,    0, 2133, 2133,
     2133, 2133, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2136, 2136, 2136, 2136,    0,    0,
        0,    0,    0, 2136,    0, 2136, 2136, 2136, 2136, 2137,

        0,    0, 2137,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2137,    0, 2137, 2137, 2137, 2137, 2138,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2138,
        0, 2138, 2138, 2138, 2138, 2139,    0,    0,    0,    0,
     2139, 2139, 2139, 2139, 2139, 2139,    0, 2139, 2139, 2139,
     2139, 2139, 2139,    0, 2139,    0,    0,    0,    0,    0,
        0,    0, 2139, 2140, 2140, 2140,    0,    0,    0,    0,
        0, 2140,    0, 2140, 2140, 2140, 2140, 2141,    0,    0,
        0,    0, 2141, 2141, 2141, 2141, 2141, 2141,    0, 2141,

     2141, 2141, 2141, 2141, 2141,    0, 2141,    0,    0,    0,
        0,    0,    0,    0, 2141, 2142, 2142, 2142,    0,    0,
        0,    0,    0, 2142,    0, 2142, 2142, 2142, 2142,    0,
        0,    0,    0, 2142, 2143, 2143,    0, 2143, 2143, 2143,
     2143, 2143,    0, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2144,    0,    0,    0,    0, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144,    0,    0,    0, 2144, 2145,    0,

        0,    0,    0, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2145,    0,    0,    0, 2145, 2146,    0,    0,    0,
        0, 2146, 2146, 2146, 2146, 2146, 2146,    0, 2146, 2146,
     2146, 2146, 2146, 2146,    0, 2146,    0,    0,    0,    0,
        0,    0,    0, 2146, 2147, 2147,    0, 2147, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2148,    0,    0, 2148,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2148,    0, 2148, 2148, 2148, 2148,
     2149,    0,    0,    0,    0, 2149, 2149, 2149, 2149, 2149,
     2149,    0, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149,    0,    0,    0, 2149, 2150, 2150,
        0, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,
     2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,
     2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,
     2150,    0, 2150, 2150, 2151,    0,    0,    0,    0, 2151,
     2151, 2151, 2151, 2151, 2151,    0, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,    0,    0,
        0, 2151, 2153,    0,    0, 2153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 2153, 2153, 2153, 2153,
     2153, 2153, 2154,    0,    0,    0,    0,    0, 2154,    0,
     2154, 2154, 2154, 2154, 2154,    0,    0,    0,    0, 2154,
     2154, 2154, 2154, 2154, 2154, 2154,    0,    0,    0,    0,
     2154, 2155,    0,    0,    0,    0,    0, 2155,    0, 2155,
     2155, 2155, 2155, 2155,    0,    0,    0,    0, 2155, 2155,
     2155, 2155, 2155, 2155, 2155,    0,    0,    0,    0, 2155,

     2156,    0, 2156, 2156, 2156, 2156,    0,    0,    0,    0,
     2156, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157,
     2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157,
     2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157,
     2157, 2157, 2157, 2157, 2157, 2157, 2157, 2158, 2158,    0,
     2158,    0,    0,    0,    0, 2158,    0, 2158, 2158, 2158,
     2158,    0,    0,    0,    0, 2158, 2159,    0,    0,    0,
        0,    0, 2159,    0, 2159, 2159, 2159, 2159, 2159,    0,
        0,    0,    0, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
        0,    0,    0,    0, 2159, 2160,    0,    0,    0,    0,

        0, 2160,    0, 2160, 2160, 2160, 2160, 2160,    0,    0,
        0,    0, 2160, 2160, 2160, 2160, 2160, 2160, 2160,    0,
        0,    0,    0, 2160, 2161, 2161,    0, 2161, 2161, 2161,
     2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161,
     2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161,
     2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161, 2161,
     2162, 2162,    0,    0,    0,    0,    0, 2162,    0, 2162,
     2162, 2162, 2162, 2162,    0,    0, 2162,    0, 2162, 2162,
     2162, 2162, 2162, 2162, 2162,    0,    0,    0,    0, 2162,
     2163, 2163,    0,    0,    0,    0,    0, 2163,    0, 2163,

     2163, 2163, 2163, 2163,    0,    0, 2163,    0, 2163, 2163,
     2163, 2163, 2163, 2163, 2163,    0,    0,    0,    0, 2163,
     2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164,
     2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164,
     2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164,
     2164, 2164, 2164, 2164, 2164, 2164, 2165,    0,    0, 2165,
        0,    0,    0,    0,    0, 2165,    0,    0,    0,    0,
        0,    0, 2165, 2165,    0,    0,    0,    0,    0,    0,
     2165,    0, 2165, 2165, 2165, 2165,    0,    0,    0,    0,
     2165, 2166,    0,    0,    0,    0,    0, 2166,    0, 2166,

     2166, 2166, 2166, 2166,    0,    0,    0,    0, 2166, 2166,
     2166, 2166, 2166, 2166, 2166,    0,    0,    0,    0, 2166,
     2167,    0,    0,    0,    0,    0, 2167,    0, 2167, 2167,
     2167, 2167, 2167,    0,    0,    0,    0, 2167, 2167, 2167,
     2167, 2167, 2167, 2167,    0,    0,    0,    0, 2167, 2168,
     2168, 2168, 2168,    0,    0,    0, 2168,    0,    0,    0,
        0,    0,    0,    0,    0, 2168, 2168, 2168,    0,    0,
        0,    0,    0, 2168,    0, 2168, 2168, 2168, 2168,    0,
        0,    0,    0, 2168, 2169, 2169, 2169, 2169,    0,    0,
        0, 2169,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 2169, 2169,    0,    0,    0,    0,    0, 2169,    0,
     2169, 2169, 2169, 2169,    0,    0,    0,    0, 2169, 2170,
     2170, 2170, 2170,    0,    0,    0, 2170,    0,    0,    0,
        0,    0,    0,    0,    0, 2170, 2170, 2170,    0,    0,
        0,    0,    0, 2170,    0, 2170, 2170, 2170, 2170,    0,
        0,    0,    0, 2170, 2171, 2171,    0,    0,    0,    0,
        0,    0, 2171,    0, 2171, 2171, 2171, 2171,    0,    0,
        0,    0, 2171, 2172,    0, 2172, 2172, 2172, 2172,    0,
        0,    0,    0, 2172, 2173, 2173, 2173,    0,    0,    0,
        0,    0,    0, 2173,    0, 2173, 2173, 2173, 2173,    0,

        0,    0,    0, 2173, 2174,    0, 2174, 2174, 2174, 2174,
        0,    0,    0,    0, 2174, 2175, 2175,    0,    0,    0,
        0,    0,    0, 2175,    0, 2175, 2175, 2175, 2175,    0,
        0,    0,    0, 2175, 2176, 2176, 2176, 2176, 2176, 2176,
     2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176,
     2176, 2176,    0, 2176, 2176, 2176, 2176, 2176, 2176,    0,
     2176,    0,    0,    0, 2176, 2176, 2176, 2176, 2176, 2176,
     2177,    0, 2177, 2177, 2177, 2177,    0,    0,    0,    0,
     2177, 2178,    0, 2178, 2178, 2178, 2178,    0,    0,    0,
        0, 2178, 2180,    0, 2180, 2180, 2180, 2180, 2180,    0,

        0,    0,    0,    0, 2180,    0, 2180, 2180, 2180, 2180,
        0,    0,    0,    0, 2180, 2181,    0,    0, 2181,    0,
        0,    0,    0,    0, 2181,    0,    0,    0,    0,    0,
        0,    0,    0, 2181,    0,    0,    0,    0,    0, 2181,
        0, 2181, 2182,    0,    0,    0,    0, 2182, 2182, 2182,
     2182, 2182, 2182,    0, 2182, 2182, 2182, 2182, 2182, 2182,
        0, 2182,    0,    0,    0,    0,    0,    0,    0, 2182,
     2183,    0,    0, 2183,    0,    0,    0,    0,    0, 2183,
        0,    0,    0,    0,    0,    0,    0, 2183, 2183,    0,
        0,    0,    0,    0, 2183,    0, 2183, 2183, 2183, 2183,

     2184,    0,    0, 2184, 2184,    0,    0,    0,    0,    0,
        0,    0, 2184,    0, 2184,    0,    0, 2184, 2184,    0,
        0,    0, 2184, 2184, 2184,    0, 2184, 2185,    0,    0,
     2185,    0,    0, 2185,    0,    0, 2185,    0, 2185, 2185,
     2185, 2185, 2185, 2185,    0, 2185, 2185, 2185, 2185, 2185,
     2185,    0, 2185,    0,    0,    0,    0,    0,    0,    0,
     2185, 2186, 2186,    0, 2186, 2186, 2186, 2186, 2186, 2186,
     2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186,
     2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186,
     2186, 2186, 2186, 2186, 2186, 2186, 2186, 2187,    0,    0,

     2187,    0,    0,    0,    0,    0, 2187,    0,    0,    0,
        0,    0,    0, 2187, 2187, 2187,    0,    0,    0,    0,
        0, 2187,    0, 2187, 2187, 2187, 2187, 2189, 2189,    0,
     2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189,
     2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189,
     2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189,
     2189, 2189, 2189, 2190,    0,    0,    0,    0, 2190, 2190,
     2190, 2190, 2190, 2190,    0, 2190, 2190, 2190, 2190, 2190,
     2190,    0, 2190,    0,    0,    0,    0,    0,    0,    0,
     2190, 2191,    0,    0,    0,    0,    0,    0,    0, 2191,

        0,    0,    0,    0,    0,    0, 2191,    0, 2191, 2191,
     2191, 2191, 2192,    0,    0, 2192,    0,    0, 2192,    0,
        0, 2192,    0, 2192, 2192, 2192, 2192, 2192, 2192,    0,
     2192, 2192, 2192, 2192, 2192, 2192,    0, 2192,    0,    0,
        0,    0,    0,    0,    0, 2192, 2193,    0,    0, 2193,
        0, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193,
     2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193,
     2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193,
     2193, 2193, 2194,    0,    0, 2194,    0,    0, 2194,    0,
        0, 2194,    0, 2194, 2194, 2194, 2194, 2194, 2194,    0,

     2194, 2194, 2194, 2194, 2194, 2194,    0, 2194,    0,    0,
        0,    0,    0,    0,    0, 2194, 2195,    0,    0,    0,
        0, 2195, 2195, 2195, 2195, 2195, 2195,    0, 2195, 2195,
     2195, 2195, 2195, 2195,    0, 2195,    0,    0,    0,    0,
        0,    0,    0, 2195, 2196, 2196,    0, 2196,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2196,    0,    0,    0,    0,    0,    0, 2196,    0,
     2196, 2196, 2196, 2196, 2197, 2197, 2197, 2197, 2197, 2197,
     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197,
     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197,

     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197,
     2198,    0,    0,    0,    0, 2198, 2198, 2198, 2198, 2198,
     2198,    0, 2198, 2198, 2198, 2198, 2198, 2198,    0, 2198,
        0,    0,    0,    0,    0,    0,    0, 2198, 2199, 2199,
     2199,    0,    0,    0,    0,    0, 2199,    0, 2199, 2199,
     2199, 2199, 2200, 2200,    0, 2200, 2200, 2200, 2200, 2200,
     2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200,
     2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200,
     2200, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2201,    0,
        0,    0,    0, 2201, 2201, 2201, 2201, 2201, 2201, 2201,

     2201, 2201, 2201, 2201, 2201, 2201, 2201, 2201, 2201, 2201,
     2201, 2201,    0,    0,    0, 2201, 2202,    0,    0,    0,
        0, 2202, 2202, 2202, 2202, 2202, 2202,    0, 2202, 2202,
     2202, 2202, 2202, 2202,    0, 2202,    0,    0,    0,    0,
        0,    0,    0, 2202, 2203,    0,    0,    0, 2203, 2203,
     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,    0,    0,
        0, 2203, 2204, 2204,    0, 2204, 2204, 2204, 2204, 2204,
     2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204,
     2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204,

     2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204, 2206,    0,
        0, 2206,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2206,    0, 2206, 2206, 2206, 2206, 2207, 2207,
        0, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2207, 2207, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,    0,

     2208,    0,    0,    0,    0, 2208, 2208, 2208, 2208, 2208,
     2209, 2209, 2209, 2209, 2209, 2209, 2210,    0,    0, 2210,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2210, 2210, 2210, 2210, 2210, 2210, 2211, 2211,    0, 2211,
        0,    0, 2211,    0,    0,    0,    0, 2211, 2211, 2211,
     2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211,
     2211, 2211, 2211, 2211, 2211, 2211,    0, 2211,    0, 2211,
     2212,    0,    0,    0,    0,    0, 2212,    0, 2212, 2212,
     2212, 2212, 2212,    0,    0,    0,    0, 2212, 2212, 2212,

     2212, 2212, 2212, 2212,    0,    0,    0,    0, 2212, 2213,
     2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213,
     2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213,
     2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213,
     2213, 2213, 2213, 2213, 2213, 2214,    0,    0,    0,    0,
        0, 2214,    0, 2214, 2214, 2214, 2214, 2214,    0,    0,
        0,    0, 2214, 2214, 2214, 2214, 2214, 2214, 2214,    0,
        0,    0,    0, 2214, 2215, 2215,    0, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2216, 2216,    0,    0,    0,    0,    0, 2216,    0, 2216,
     2216, 2216, 2216, 2216,    0,    0, 2216,    0, 2216, 2216,
     2216, 2216, 2216, 2216, 2216,    0,    0,    0,    0, 2216,
     2217,    0,    0,    0,    0,    0, 2217,    0, 2217, 2217,
     2217, 2217, 2217,    0,    0,    0,    0, 2217, 2217, 2217,
     2217, 2217, 2217, 2217,    0,    0,    0,    0, 2217, 2218,
        0, 2218, 2218, 2218, 2218,    0,    0,    0,    0, 2218,
     2219, 2219, 2219, 2219,    0,    0,    0, 2219,    0,    0,
        0,    0,    0,    0,    0,    0, 2219, 2219, 2219,    0,

        0,    0,    0,    0, 2219,    0, 2219, 2219, 2219, 2219,
        0,    0,    0,    0, 2219, 2220, 2220, 2220, 2220,    0,
        0,    0, 2220,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2220,    0,    0,    0,    0,    0, 2220,
        0, 2220, 2220, 2220, 2220,    0,    0,    0,    0, 2220,
     2221, 2221, 2221,    0,    0,    0,    0,    0,    0, 2221,
        0, 2221, 2221, 2221, 2221,    0,    0,    0,    0, 2221,
     2222, 2222,    0,    0,    0,    0,    0,    0, 2222,    0,
     2222, 2222, 2222, 2222,    0,    0,    0,    0, 2222, 2223,
        0, 2223, 2223, 2223, 2223, 2223,    0,    0,    0,    0,

        0, 2223,    0, 2223, 2223, 2223, 2223,    0,    0,    0,
        0, 2223, 2224, 2224,    0, 2224, 2224, 2224, 2224, 2224,
     2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224,
     2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224,
     2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2225,    0,
        0,    0,    0, 2225, 2225, 2225, 2225, 2225, 2225,    0,
     2225, 2225, 2225, 2225, 2225, 2225,    0, 2225,    0,    0,
        0,    0,    0,    0,    0, 2225, 2226,    0,    0,    0,
        0,    0,    0, 2226, 2226,    0,    0,    0,    0,    0,
        0, 2226,    0, 2226, 2226, 2226, 2226, 2227,    0,    0,

     2227,    0,    0, 2227,    0,    0, 2227,    0, 2227, 2227,
     2227, 2227, 2227, 2227,    0, 2227, 2227, 2227, 2227, 2227,
     2227,    0, 2227,    0,    0,    0,    0,    0,    0,    0,
     2227, 2228,    0,    0, 2228,    0,    0, 2228,    0,    0,
     2228,    0, 2228, 2228, 2228, 2228, 2228, 2228,    0, 2228,
     2228, 2228, 2228, 2228, 2228,    0, 2228,    0,    0,    0,
        0,    0,    0,    0, 2228, 2229,    0,    0,    0,    0,
     2229, 2229, 2229, 2229, 2229, 2229,    0, 2229, 2229, 2229,
     2229, 2229, 2229,    0, 2229,    0,    0,    0,    0,    0,
        0,    0, 2229, 2230,    0,    0, 2230,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2230,    0,    0,    0,    0,    0,    0, 2230,    0, 2230,
     2230, 2230, 2230, 2232, 2232,    0, 2232, 2232, 2232, 2232,
     2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
     2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
     2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2233,
        0,    0, 2233,    0, 2233, 2233, 2233, 2233, 2233, 2233,
        0, 2233, 2233, 2233, 2233, 2233, 2233,    0, 2233,    0,
        0,    0,    0,    0,    0,    0, 2233, 2234,    0,    0,
        0,    0,    0,    0,    0, 2234,    0,    0,    0,    0,

        0,    0, 2234,    0, 2234, 2234, 2234, 2234, 2235,    0,
        0, 2235,    0, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2236,    0,    0, 2236,    0,    0,
     2236,    0,    0, 2236,    0, 2236, 2236, 2236, 2236, 2236,
     2236,    0, 2236, 2236, 2236, 2236, 2236, 2236,    0, 2236,
        0,    0,    0,    0,    0,    0,    0, 2236, 2237,    0,
        0, 2237,    0,    0, 2237,    0,    0, 2237,    0, 2237,
     2237, 2237, 2237, 2237, 2237,    0, 2237, 2237, 2237, 2237,

     2237, 2237,    0, 2237,    0,    0,    0,    0,    0,    0,
        0, 2237, 2238,    0,    0, 2238, 2238,    0,    0,    0,
        0,    0,    0,    0, 2238,    0, 2238,    0,    0, 2238,
     2238,    0,    0,    0, 2238, 2238, 2238,    0, 2238, 2239,
     2239,    0, 2239,    0,    0, 2239,    0,    0,    0,    0,
     2239, 2239, 2239, 2239, 2239, 2239,    0, 2239, 2239, 2239,
     2239, 2239, 2239,    0, 2239,    0,    0,    0,    0,    0,
        0,    0, 2239, 2240, 2240,    0, 2240,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2240,    0,    0,    0,    0,    0,    0, 2240,    0, 2240,

     2240, 2240, 2240, 2241, 2241, 2241, 2241, 2241, 2241, 2241,
     2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241,
     2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241,
     2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2242,
        0,    0,    0,    0, 2242, 2242, 2242, 2242, 2242, 2242,
     2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
     2242, 2242, 2242,    0,    0,    0, 2242, 2243,    0,    0,
        0, 2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243,
     2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243,
     2243,    0,    0,    0, 2243, 2244, 2244,    0, 2244, 2244,

     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244,
     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244,
     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244,
     2244, 2245,    0,    0, 2245,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2245,    0, 2245, 2245, 2245,
     2245, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246,
     2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246,
     2246, 2246, 2246, 2246, 2246, 2246,    0, 2246,    0,    0,
        0,    0, 2246, 2246, 2246, 2246, 2246, 2247,    0,    0,

     2247,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2247, 2247, 2247, 2247, 2247, 2247, 2248, 2248,    0,
     2248,    0,    0, 2248,    0,    0,    0,    0, 2248, 2248,
     2248, 2248, 2248, 2248,    0, 2248, 2248, 2248, 2248, 2248,
     2248,    0, 2248,    0,    0,    0,    0,    0, 2248,    0,
     2248, 2249, 2249,    0, 2249,    0,    0, 2249,    0,    0,
        0,    0, 2249, 2249, 2249, 2249, 2249, 2249,    0, 2249,
     2249, 2249, 2249, 2249, 2249,    0, 2249,    0,    0,    0,
        0,    0, 2249,    0, 2249, 2250,    0,    0,    0,    0,

        0, 2250,    0, 2250, 2250, 2250, 2250, 2250,    0,    0,
        0,    0, 2250, 2250, 2250, 2250, 2250, 2250, 2250,    0,
        0,    0,    0, 2250, 2251,    0,    0,    0,    0,    0,
     2251,    0, 2251, 2251, 2251, 2251, 2251,    0,    0,    0,
        0, 2251, 2251, 2251, 2251, 2251, 2251, 2251,    0,    0,
        0,    0, 2251, 2252, 2252,    0,    0,    0,    0,    0,
     2252,    0, 2252, 2252, 2252, 2252, 2252,    0,    0, 2252,
        0, 2252, 2252, 2252, 2252, 2252, 2252, 2252,    0,    0,
        0,    0, 2252, 2253,    0,    0,    0,    0,    0, 2253,
        0, 2253, 2253, 2253, 2253, 2253,    0,    0,    0,    0,

     2253, 2253, 2253, 2253, 2253, 2253, 2253,    0,    0,    0,
        0, 2253, 2254, 2254, 2254, 2254,    0,    0,    0, 2254,
        0,    0,    0,    0,    0,    0,    0,    0, 2254, 2254,
     2254,    0,    0,    0,    0,    0, 2254,    0, 2254, 2254,
     2254, 2254,    0,    0,    0,    0, 2254, 2255, 2255, 2255,
     2255,    0,    0,    0, 2255,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2255, 2255,    0,    0,    0,    0,
        0, 2255,    0, 2255, 2255, 2255, 2255,    0,    0,    0,
        0, 2255, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256,
     2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256,

        0, 2256, 2256, 2256, 2256, 2256, 2256,    0, 2256,    0,
        0, 2256,    0, 2256, 2256, 2256, 2256, 2256, 2257, 2257,
        0, 2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257,
     2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257,
     2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257, 2257,
     2257, 2257, 2257, 2257, 2258,    0,    0, 2258,    0, 2258,
     2258, 2258, 2258, 2258, 2258,    0, 2258, 2258, 2258, 2258,
     2258, 2258,    0, 2258,    0,    0,    0,    0,    0,    0,
        0, 2258, 2259,    0,    0,    0,    0,    0,    0, 2259,
     2259,    0,    0,    0,    0,    0,    0, 2259,    0, 2259,

     2259, 2259, 2259, 2260,    0,    0, 2260,    0,    0, 2260,
        0,    0, 2260,    0, 2260, 2260, 2260, 2260, 2260, 2260,
        0, 2260, 2260, 2260, 2260, 2260, 2260,    0, 2260,    0,
        0,    0,    0,    0,    0,    0, 2260, 2261,    0,    0,
     2261,    0,    0, 2261,    0,    0, 2261,    0, 2261, 2261,
     2261, 2261, 2261, 2261,    0, 2261, 2261, 2261, 2261, 2261,
     2261,    0, 2261,    0,    0,    0,    0,    0,    0,    0,
     2261, 2262,    0,    0, 2262, 2262,    0,    0,    0,    0,
        0,    0,    0, 2262,    0, 2262,    0,    0, 2262, 2262,
        0,    0,    0, 2262, 2262, 2262,    0, 2262, 2263,    0,

        0, 2263,    0,    0, 2263,    0,    0,    0,    0, 2263,
     2263, 2263, 2263, 2263, 2263,    0, 2263, 2263, 2263, 2263,
     2263, 2263,    0, 2263,    0,    0,    0,    0,    0,    0,
        0, 2263, 2264,    0,    0, 2264,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2264,
        0,    0,    0,    0,    0,    0, 2264,    0, 2264, 2264,
     2264, 2264, 2265,    0,    0, 2265,    0, 2265, 2265, 2265,
     2265, 2265, 2265,    0, 2265, 2265, 2265, 2265, 2265, 2265,
        0, 2265,    0,    0,    0,    0,    0,    0,    0, 2265,
     2267,    0,    0, 2267,    0, 2267, 2267, 2267, 2267, 2267,

     2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
     2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
     2267, 2267, 2267, 2267, 2267, 2267, 2268, 2268,    0, 2268,
        0,    0, 2268,    0,    0,    0,    0, 2268, 2268, 2268,
     2268, 2268, 2268,    0, 2268, 2268, 2268, 2268, 2268, 2268,
        0, 2268,    0,    0,    0,    0,    0,    0,    0, 2268,
     2269,    0,    0,    0,    0, 2269, 2269, 2269, 2269, 2269,
     2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269,
     2269, 2269, 2269, 2269,    0,    0,    0, 2269, 2270, 2270,
        0, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,

     2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 2270, 2270, 2271, 2271,    0, 2271, 2271, 2271,
     2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271,
     2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271,
     2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271, 2271,
     2272,    0,    0, 2272,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2272,    0, 2272, 2272, 2272, 2272,
     2273,    0,    0, 2273,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2273, 2273, 2273, 2273, 2273, 2273,
     2274,    0,    0,    0,    0,    0, 2274,    0, 2274, 2274,
     2274, 2274, 2274,    0,    0,    0,    0, 2274, 2274, 2274,
     2274, 2274, 2274, 2274,    0,    0,    0,    0, 2274, 2275,
        0,    0,    0,    0,    0, 2275,    0, 2275, 2275, 2275,
     2275, 2275,    0,    0,    0,    0, 2275, 2275, 2275, 2275,
     2275, 2275, 2275,    0,    0,    0,    0, 2275, 2276, 2276,
        0,    0,    0,    0,    0, 2276,    0, 2276, 2276, 2276,
     2276, 2276,    0,    0, 2276,    0, 2276, 2276, 2276, 2276,

     2276, 2276, 2276,    0,    0,    0,    0, 2276, 2277,    0,
        0,    0,    0,    0, 2277,    0, 2277, 2277, 2277, 2277,
     2277,    0,    0,    0,    0, 2277, 2277, 2277, 2277, 2277,
     2277, 2277,    0,    0,    0,    0, 2277, 2278, 2278, 2278,
     2278,    0,    0,    0, 2278,    0,    0,    0,    0,    0,
        0,    0,    0, 2278, 2278, 2278,    0,    0,    0,    0,
        0, 2278,    0, 2278, 2278, 2278, 2278,    0,    0,    0,
        0, 2278, 2279, 2279, 2279, 2279, 2279, 2279, 2279, 2279,
     2279, 2279, 2279, 2279, 2279, 2279, 2279, 2279, 2279, 2279,
        0, 2279, 2279, 2279, 2279, 2279, 2279,    0, 2279,    0,

        0,    0,    0, 2279, 2279, 2279, 2279, 2279, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280,    0, 2280, 2280, 2280,
     2280, 2280, 2280,    0, 2280,    0,    0,    0,    0, 2280,
     2280, 2280, 2280, 2280, 2281,    0,    0, 2281,    0, 2281,
     2281, 2281, 2281, 2281, 2281,    0, 2281, 2281, 2281, 2281,
     2281, 2281,    0, 2281,    0,    0,    0,    0,    0,    0,
        0, 2281, 2282, 2282, 2282, 2282,    0,    0,    0, 2282,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2282,
     2282,    0,    0,    0,    0,    0, 2282,    0, 2282, 2282,

     2282, 2282,    0,    0,    0,    0, 2282, 2283, 2283, 2283,
     2283, 2283, 2283, 2283, 2283, 2283, 2283, 2283, 2283, 2283,
     2283, 2283, 2283, 2283, 2283,    0, 2283, 2283, 2283, 2283,
     2283, 2283,    0, 2283,    0,    0,    0,    0, 2283, 2283,
     2283, 2283, 2283, 2284, 2284, 2284, 2284, 2284, 2284, 2284,
     2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284,
     2284,    0, 2284, 2284, 2284, 2284, 2284, 2284,    0, 2284,
        0,    0,    0,    0, 2284, 2284, 2284, 2284, 2284, 2285,
     2285,    0, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285,
     2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285,

     2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285,
     2285, 2285, 2285, 2285, 2285, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951

    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 20 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <qfile.h>

#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"
#include "arguments.h"
#include "prologscanner.h"


#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handlePred(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleHideCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleHideCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);
static bool handleCopyBrief(const QCString &);
static bool handleCopyDetails(const QCString &);
static bool handleParBlock(const QCString &);
static bool handleEndParBlock(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);
Entry *g_old;

static unsigned int g_arity;

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "pred",            &handlePred,             TRUE  },
  { "predicate",       &handlePred,             TRUE  },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "parblock",        &handleParBlock,         TRUE  },
  { "endparblock",     &handleEndParBlock,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             FALSE },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE  },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "startuml",        &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "hidecallgraph",   &handleHideCallgraph,    FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "hidecallergraph", &handleHideCallergraph,  FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },

{ "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       &handleCopyBrief,        FALSE },
  { "copydetails",     &handleCopyDetails,      TRUE  },
  { "copyright",       0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "latexinclude",    0,                       FALSE },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "exception",       0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  err("DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;

bool inInternalDocs = FALSE;

 QCString g_text, g_name;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible)
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }

  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         //
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QCString         g_spaceBeforeCmd;
static QCString         g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
  g_insideParBlock = FALSE;
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::PREDDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default:
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0)
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;

    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si = Doxygen::sectionDict->find(anchorLabel);
    if (si)
    {
      if (si->lineNr != -1)
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel,si->fileName.data(),si->lineNr);
      }
      else
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel,si->fileName.data());
      }
    }
    else
    {
      si=new SectionInfo(listName,yyLineNr,anchorLabel,
                         g_sectionTitle,SectionInfo::Anchor,
                         g_sectionLevel);
      Doxygen::sectionDict->append(anchorLabel,si);
      docEntry->anchors->append(si);
    }
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  SectionInfo *si = Doxygen::sectionDict->find(g_sectionLabel);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",g_sectionLabel.data(),si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",g_sectionLabel.data(),si->fileName.data());
    }
  }
  else
  {
    // create a new section element
    g_sectionTitle+=commentscanYYtext;
    g_sectionTitle=g_sectionTitle.stripWhiteSpace();
    si = new SectionInfo(yyFileName,yyLineNr,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

    // add section to this entry
    current->anchors->append(si);

    // add section to the global dictionary
    Doxygen::sectionDict->append(g_sectionLabel,si);
  }
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentscanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1)
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item ||
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);

  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}


static void addAnchor(const char *anchor)
{
  SectionInfo *si = Doxygen::sectionDict->find(anchor);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",anchor,si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",anchor,si->fileName.data());
    }
  }
  else
  {
    si = new SectionInfo(yyFileName,yyLineNr,anchor,0,SectionInfo::Anchor,0);
    Doxygen::sectionDict->append(anchor,si);
    current->anchors->append(si);
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentscanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */













































#line 6447 "/Users/vsc/github/doxygen-yap/generated_src/commentscan.cpp"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41
#define PredFunctor 42
#define PredArgs 43
#define PredInfo 44
#define SWIInline 45

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

yy_size_t commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1039 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 6697 "/Users/vsc/github/doxygen-yap/generated_src/commentscan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1952 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1951 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1058 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1061 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1064 "commentscan.l"
{ // mail address
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1067 "commentscan.l"
{ // quoted text "
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1070 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentscanYYtext);
					  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1073 "commentscan.l"
{
                      QCString m, n;
                      uint  j;
                      //                      normalizeIndicator( commentscanYYtext, m, n, j ) ;
                      addOutput( QCString("<b>") +  commentscanYYtext + "</b>" );
				  }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1080 "commentscan.l"
{ // xref command
					  if (inContext!=OutputXRef)
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 1089 "commentscan.l"
{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1095 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1100 "commentscan.l"
{ // HTML command that ends a brief description
  if (current->lang==SrcLangExt_CSharp)
                      {
                        setOutput(OutputDoc);
                      }
  // continue with the same input
                      REJECT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1108 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1112 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1116 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentscanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1120 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1123 "commentscan.l"
{
                                          QCString tag=commentscanYYtext;
                                          int s=tag.find("id=");
                                          if (s!=-1) // command has id attribute
                                          {
                                            char c=tag[s+3];
                                            if (c=='\'' || c=='"') // valid start
                                            {
                                              int e=tag.find(c,s+4);
                                              if (e!=-1) // found matching end
                                              {
                                                QCString id=tag.mid(s+4,e-s-4); // extract id
                                                addAnchor(id);
                                              }
                                            }
                                          }
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1141 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1145 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1149 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1153 "commentscan.l"
{
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1156 "commentscan.l"
{
                                          addOutput("\\endinternal ");
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentscanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
                                            int i=0;
                                            while (commentscanYYtext[i]==' ' || commentscanYYtext[i]=='\t') i++;
					    g_spaceBeforeCmd = QCString(commentscanYYtext).left(i);
					    if (cmdPtr->endsBrief && !(inContext==OutputXRef && cmdName=="parblock"))
					    {
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            //if (i>0) addOutput(QCString(commentscanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations,
					      // but we need to know the position in the input buffer where this
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentscanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentscanYYtext);
					  }
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1210 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1213 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentscanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1221 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentscanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1233 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1238 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1243 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1247 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentscanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentscanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1260 "commentscan.l"
{ // escaped character
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1263 "commentscan.l"
{ // normal word
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1266 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentscanYYtext);
					}
	YY_BREAK
case 32:
#line 1270 "commentscan.l"
case 33:
YY_RULE_SETUP
#line 1270 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef)
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentscanYYtext);
                                          }
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1285 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef)
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1293 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1296 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1299 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1302 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1305 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1308 "commentscan.l"
{ // numbered item
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1311 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1314 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentscanYYtext[0]);
  					  addOutput(commentscanYYtext[2]);
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1318 "commentscan.l"
{ // . with comma such as "e.g.,"
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1321 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1324 "commentscan.l"
{ // internal ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1327 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!g_insideParBlock) setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                             {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1358 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentscanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1366 "commentscan.l"
{ // newline
  					  addOutput(*commentscanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1370 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 50:
YY_RULE_SETUP
#line 1377 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1378 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1381 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1383 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 54:
YY_RULE_SETUP
#line 1388 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1393 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1398 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1404 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentscanYYtext;
 					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1407 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentscanYYtext;
					  yyLineNr++;
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1412 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentscanYYtext;
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1418 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1422 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1426 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1434 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1439 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1443 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1447 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1456 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 68:
YY_RULE_SETUP
#line 1461 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1465 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1469 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1478 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/************  Prolog (PlDOC like ) compatibility *********************/
case 72:
YY_RULE_SETUP
#line 1484 "commentscan.l"
{
                      normalizeIndicator( commentscanYYtext, current->name ) ;
                      addOutput( "<b>commentscanYYtext</b>" );
                       BEGIN(Comment);
 }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1490 "commentscan.l"
{
                      // replace by an /
                      g_text = commentscanYYtext;
                      g_name = g_text.left(g_text.size()-1);
                      addOutput( "<b>" + g_name + "</b>(" );
                      g_arity = 1;
                      BEGIN(PredArgs);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1499 "commentscan.l"
{
                      normalizeIndicator(QCString(commentscanYYtext) + "/0", current->name ) ;
                      addOutput( "<b>commentscanYYtext</b>" );
                       BEGIN(PredInfo);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1505 "commentscan.l"
{
                      int i =left_scan(commentscanYYtext);
                      QCString lame = QCString( commentscanYYtext, i);
                      normalizeIndicator( lame+"/1", current->name ) ;
                      addOutput( "<b>"+ lame + "t</b>"+ (commentscanYYtext+i) );
                      BEGIN(PredInfo);
		    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1513 "commentscan.l"
{
                       int i =left_scan(commentscanYYtext);
                       int j =right_scan(commentscanYYtext);
                      QCString lame = QCString( commentscanYYtext, i);
                      QCString mid = QCString( lame, j-i);
                      // the key to the comment
                      normalizeIndicator( mid+"/2", current->name ) ;
                      // embelish
                      addOutput( lame + "<b>"+ lame + "t</b>"+ (commentscanYYtext+j) );
                     BEGIN(PredInfo);
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1525 "commentscan.l"
{
                       int j =right_scan(commentscanYYtext);
                       QCString rame = QCString( commentscanYYtext);
                       int len = rame.size();
                       QCString lame = rame.left( j-1);
                       rame  = rame.right(len - j );
                      normalizeIndicator( rame+"/1", current->name ) ;
                      // embelish
                      addOutput( lame + "<b>"+rame + "</b>" );
                     BEGIN(PredInfo);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1537 "commentscan.l"
{
  addOutput( commentscanYYtext );
        g_text += commentscanYYtext;
                      g_arity++;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1543 "commentscan.l"
{
                      QCString m, n;
                      uint  j = g_arity;
                      addOutput( commentscanYYtext );
                      g_text += commentscanYYtext;
                        
                      normalizeIndicator( g_name + "/" + QCString().setNum(g_arity), current->name ) ;    
                      BEGIN(PredInfo);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1553 "commentscan.l"
{
   setOutput(OutputDoc);
   addOutput( commentscanYYtext );
  BEGIN(Comment);
}
	YY_BREAK

case 81:
YY_RULE_SETUP
#line 1560 "commentscan.l"
{
        addOutput( commentscanYYtext );
    }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1564 "commentscan.l"
{
        addOutput( commentscanYYtext );
        yyLineNr++;
        setOutput(OutputDoc);
        BEGIN(Comment)   ;
    }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1571 "commentscan.l"
{
        addOutput( commentscanYYtext );
    }
	YY_BREAK

case 84:
YY_RULE_SETUP
#line 1577 "commentscan.l"
{
    addOutput( "`" );
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1581 "commentscan.l"
{
    addOutput( "`" );
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1585 "commentscan.l"
{
    addOutput( "## " );
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1589 "commentscan.l"
{
    addOutput( "### " );
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1593 "commentscan.l"
{
    addOutput( "#### " );
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1597 "commentscan.l"
{
    addOutput( "##### " );
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1601 "commentscan.l"
{
   addOutput("*" );
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1605 "commentscan.l"
{
   addOutput("*" );
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1609 "commentscan.l"
{
   if (commentscanYYtext[strlen(commentscanYYtext)-1] == '=')
     commentscanYYtext[strlen(commentscanYYtext)-1] = '\0';
   addOutput( "<code>" );
   addOutput( commentscanYYtext+1 );
   addOutput( "</code>" );
 }
	YY_BREAK
case 93:
/* rule 93 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1618 "commentscan.l"
{
    addOutput( "~~~~{.prolog}" );
   BEGIN(SWIInline);

  }
	YY_BREAK

case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1626 "commentscan.l"
{
    addOutput( "~~~~\n" );
    BEGIN(Comment);
  }
	YY_BREAK
case 95:
/* rule 95 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1631 "commentscan.l"
{
      addOutput( commentscanYYtext );
    }
	YY_BREAK

/* ------ handle argument of class/struct/union command --------------- */
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1638 "commentscan.l"
{
  					  current->name = substitute(removeRedundantWhiteSpace(commentscanYYtext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1642 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1651 "commentscan.l"
{
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1655 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1659 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1668 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1671 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentscanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1675 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1679 "commentscan.l"
{
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1684 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1687 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentscanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1691 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1695 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1699 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 110:
YY_RULE_SETUP
#line 1704 "commentscan.l"
{ // group name
  					  current->name = commentscanYYtext;
					  //lastDefGroup.groupname = commentscanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html")
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1716 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1720 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1729 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1733 "commentscan.l"
{ // title (stored in type)
					  current->type += commentscanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1737 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty()
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 116:
YY_RULE_SETUP
#line 1754 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( PageDocArg2 );
					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1758 "commentscan.l"
{ yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1761 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1770 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1772 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentscanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 1781 "commentscan.l"
{ // no file name specfied
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1786 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1790 "commentscan.l"
{ yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1793 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 125:
YY_RULE_SETUP
#line 1798 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentscanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1803 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1807 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1816 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentscanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1823 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1827 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1836 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1839 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentscanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1844 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1848 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1857 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 137:
YY_RULE_SETUP
#line 1863 "commentscan.l"
{ // argument
		      current->relates = commentscanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP)
                                          //{
                                          //  memberGroupRelates = commentscanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1871 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1875 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1883 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1889 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1894 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1898 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 144:
YY_RULE_SETUP
#line 1904 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentscanYYtext;
                                          addOutput(commentscanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1910 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\section command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1918 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1924 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1929 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1934 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1938 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1942 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentscanYYtext[1];
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1946 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentscanYYtext[1];
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1950 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 154:
YY_RULE_SETUP
#line 1957 "commentscan.l"
{ // first argument
                                          addOutput(commentscanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentscanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1964 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\subpage command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 1972 "commentscan.l"
{ // no title, end command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1976 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1980 "commentscan.l"
{ // no title, end of command
  					  unput(*commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 159:
YY_RULE_SETUP
#line 1987 "commentscan.l"
{ // found argument
                                          addAnchor(commentscanYYtext);
					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1992 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\anchor command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2000 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 162:
/* rule 162 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2010 "commentscan.l"
{ // possible ends
  					  addOutput(commentscanYYtext);
					  if (&commentscanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2017 "commentscan.l"
{
  					  addOutput(commentscanYYtext);
					  if (blockName=="startuml") // found end of the block
					  {
  					    BEGIN(Comment);
					  }
                                        }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 2024 "commentscan.l"
{ // some word
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 2027 "commentscan.l"
{ // new line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2031 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2035 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentscanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2044 "commentscan.l"
{
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 2047 "commentscan.l"
{
                                          QCString endTag = "@end"+blockName;
                                          if (blockName=="startuml") endTag="enduml";
                                          warn(yyFileName,yyLineNr,
	                                    "reached end of comment while inside a @%s block; check for missing @%s tag!",
	                                    blockName.data(),endTag.data()
	                                  );
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 169:
YY_RULE_SETUP
#line 2059 "commentscan.l"
{
                                          g_guardExpr=commentscanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 2064 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                        }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2067 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2071 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 2079 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentscanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2085 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentscanYYtext);
  					}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 2088 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 2094 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2098 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 2101 "commentscan.l"
{
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2105 "commentscan.l"
{
  					  if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
					  {
					    addOutput(g_spaceBeforeIf);
					  }
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2113 "commentscan.l"
{
  					  unput(*commentscanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 181:
/* rule 181 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2120 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2124 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2128 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @endif without matching start command");
					  }
					  else
					  {
					    GuardedSection *s = guards.pop();
                                            bool parentVisible = s->parentVisible();
                                            delete s;
                                            if (parentVisible)
                                            {
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 184:
/* rule 184 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2146 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 185:
/* rule 185 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2163 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
                                              guardType=Guard_If;
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2179 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2183 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2185 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 2191 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 190:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2195 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 191:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2198 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 192:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2201 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 193:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2209 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 194:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2216 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 195:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2223 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 196:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2230 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2237 "commentscan.l"
{
                                          addOutput("\\endinternal ");
					  BEGIN(Comment);
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2241 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2243 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 2249 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 2254 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2259 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentscanYYtext;
					  current->name+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 203:
YY_RULE_SETUP
#line 2266 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentscanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 2272 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 2283 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2287 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 2293 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentscanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 2302 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  functionProto+=' ';
  					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2306 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentscanYYtext;
  					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2309 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2313 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2317 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 2325 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					    addOutput('\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 2339 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  functionProto+=' ';
  					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2343 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 216:
YY_RULE_SETUP
#line 2349 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 2355 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2363 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 219:
YY_RULE_SETUP
#line 2372 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 2378 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 2386 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 222:
YY_RULE_SETUP
#line 2391 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentscanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2399 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 2401 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentscanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2404 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 226:
YY_RULE_SETUP
#line 2409 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentscanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 2414 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\cite command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2422 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2431 "commentscan.l"
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 2432 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2441 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2445 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 2451 "commentscan.l"
ECHO;
	YY_BREAK
#line 9184 "/Users/vsc/github/doxygen-yap/generated_src/commentscan.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(PredFunctor):
			case YY_STATE_EOF(PredArgs):
			case YY_STATE_EOF(PredInfo):
			case YY_STATE_EOF(SWIInline):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1952 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1952 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1951);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2451 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePred(const QCString &)
{
  makeStructuralIndicator(Entry::PREDDOC_SEC);
  current->lang       = SrcLangExt_Prolog;
  BEGIN( PredFunctor );
  return FALSE;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 );
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop)
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop)
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(const QCString &)
{
  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@parblock ");
  g_insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(const QCString &)
{
  if (!g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput("@endparblock");
  setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
  g_insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC &&
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE;
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallgraph(const QCString &)
{
  current->callGraph = FALSE; // OFF
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallergraph(const QCString &)
{
  current->callerGraph = FALSE; // OFF
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool(INTERNAL_DOCS))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    {
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal ");
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE;
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure;
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC ||
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(const QCString &)
{
  if (current->brief.isEmpty() && current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(OutputBrief);
  }
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(const QCString &)
{
  setOutput(OutputDoc);
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  if (!g_spaceBeforeCmd.isEmpty())
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
   //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
     // isBrief,isAutoBriefOn,lineNr);
  //printf("%s\n", comment.data());
  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd.resize(0);
  g_spaceBeforeIf.resize(0);

  printlex(commentscanYY_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",qPrint(fileName),lineNr,qPrint(comment)
              );

  commentscanYYrestart( commentscanYYin );
  BEGIN( Comment );
  commentscanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,lineNr,current,current->brief);
    current->doc        = processMarkdown(fileName,lineNr,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,lineNr,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,qPrint(current->brief),
               current->docLine,qPrint(current->doc),
               current->inbodyLine,qPrint(current->inbodyDocs)
              );

  checkFormula();
  prot = protection;

  groupAddDocs(curEntry);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d newEntryNeeded=%d\n",
  //  position,parseMore,newEntryNeeded);

  printlex(commentscanYY_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1)
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int line,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x,file=%s,line=%d) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,fileName,line,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->docLine = line;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    if (!foundInline) e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info)
    {
      info->doc = g_memberGroupDocs;
      info->docFile = e->docFile;
      info->docLine = e->docLine;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION)
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentscanYYdummy() { yy_flex_realloc(0,0); }
}
#endif

