/* WARNING: This file is generated!
 * Do not edit this file, but edit config.xml instead and run
 * python configgen.py -maps config.xml to regenerate this file!
 */
#include "configvalues.h"
#include "configimpl.h"
#include <unordered_map>

const ConfigValues::Info *ConfigValues::get(const QCString &tag) const
{
  static const std::unordered_map< std::string, Info > configMap =
  {
    { "DOXYFILE_ENCODING",       Info{ Info::String, &ConfigValues::m_DOXYFILE_ENCODING       }},
    { "PROJECT_NAME",            Info{ Info::String, &ConfigValues::m_PROJECT_NAME            }},
    { "PROJECT_NUMBER",          Info{ Info::String, &ConfigValues::m_PROJECT_NUMBER          }},
    { "PROJECT_BRIEF",           Info{ Info::String, &ConfigValues::m_PROJECT_BRIEF           }},
    { "PROJECT_LOGO",            Info{ Info::String, &ConfigValues::m_PROJECT_LOGO            }},
    { "OUTPUT_DIRECTORY",        Info{ Info::String, &ConfigValues::m_OUTPUT_DIRECTORY        }},
    { "CREATE_SUBDIRS",          Info{ Info::Bool,   &ConfigValues::m_CREATE_SUBDIRS          }},
    { "CREATE_SUBDIRS_LEVEL",    Info{ Info::Int,    &ConfigValues::m_CREATE_SUBDIRS_LEVEL    }},
    { "ALLOW_UNICODE_NAMES",     Info{ Info::Bool,   &ConfigValues::m_ALLOW_UNICODE_NAMES     }},
    { "OUTPUT_LANGUAGE",         Info{ Info::String, &ConfigValues::m_OUTPUT_LANGUAGE,        {}}},
    { "BRIEF_MEMBER_DESC",       Info{ Info::Bool,   &ConfigValues::m_BRIEF_MEMBER_DESC       }},
    { "REPEAT_BRIEF",            Info{ Info::Bool,   &ConfigValues::m_REPEAT_BRIEF            }},
    { "ABBREVIATE_BRIEF",        Info{ Info::List,   &ConfigValues::m_ABBREVIATE_BRIEF        }},
    { "ALWAYS_DETAILED_SEC",     Info{ Info::Bool,   &ConfigValues::m_ALWAYS_DETAILED_SEC     }},
    { "INLINE_INHERITED_MEMB",   Info{ Info::Bool,   &ConfigValues::m_INLINE_INHERITED_MEMB   }},
    { "FULL_PATH_NAMES",         Info{ Info::Bool,   &ConfigValues::m_FULL_PATH_NAMES         }},
    { "STRIP_FROM_PATH",         Info{ Info::List,   &ConfigValues::m_STRIP_FROM_PATH         }},
    { "STRIP_FROM_INC_PATH",     Info{ Info::List,   &ConfigValues::m_STRIP_FROM_INC_PATH     }},
    { "SHORT_NAMES",             Info{ Info::Bool,   &ConfigValues::m_SHORT_NAMES             }},
    { "JAVADOC_AUTOBRIEF",       Info{ Info::Bool,   &ConfigValues::m_JAVADOC_AUTOBRIEF       }},
    { "JAVADOC_BANNER",          Info{ Info::Bool,   &ConfigValues::m_JAVADOC_BANNER          }},
    { "QT_AUTOBRIEF",            Info{ Info::Bool,   &ConfigValues::m_QT_AUTOBRIEF            }},
    { "MULTILINE_CPP_IS_BRIEF",  Info{ Info::Bool,   &ConfigValues::m_MULTILINE_CPP_IS_BRIEF  }},
    { "PYTHON_DOCSTRING",        Info{ Info::Bool,   &ConfigValues::m_PYTHON_DOCSTRING        }},
    { "INHERIT_DOCS",            Info{ Info::Bool,   &ConfigValues::m_INHERIT_DOCS            }},
    { "SEPARATE_MEMBER_PAGES",   Info{ Info::Bool,   &ConfigValues::m_SEPARATE_MEMBER_PAGES   }},
    { "TAB_SIZE",                Info{ Info::Int,    &ConfigValues::m_TAB_SIZE                }},
    { "ALIASES",                 Info{ Info::List,   &ConfigValues::m_ALIASES                 }},
    { "OPTIMIZE_OUTPUT_FOR_C",   Info{ Info::Bool,   &ConfigValues::m_OPTIMIZE_OUTPUT_FOR_C   }},
    { "OPTIMIZE_for_Prolog",     Info{ Info::Bool,   &ConfigValues::m_OPTIMIZE_for_Prolog     }},
    { "OPTIMIZE_OUTPUT_JAVA",    Info{ Info::Bool,   &ConfigValues::m_OPTIMIZE_OUTPUT_JAVA    }},
    { "OPTIMIZE_FOR_FORTRAN",    Info{ Info::Bool,   &ConfigValues::m_OPTIMIZE_FOR_FORTRAN    }},
    { "OPTIMIZE_OUTPUT_VHDL",    Info{ Info::Bool,   &ConfigValues::m_OPTIMIZE_OUTPUT_VHDL    }},
    { "OPTIMIZE_OUTPUT_SLICE",   Info{ Info::Bool,   &ConfigValues::m_OPTIMIZE_OUTPUT_SLICE   }},
    { "EXTENSION_MAPPING",       Info{ Info::List,   &ConfigValues::m_EXTENSION_MAPPING       }},
    { "MARKDOWN_SUPPORT",        Info{ Info::Bool,   &ConfigValues::m_MARKDOWN_SUPPORT        }},
    { "TOC_INCLUDE_HEADINGS",    Info{ Info::Int,    &ConfigValues::m_TOC_INCLUDE_HEADINGS    }},
    { "MARKDOWN_ID_STYLE",       Info{ Info::String, &ConfigValues::m_MARKDOWN_ID_STYLE,      {}}},
    { "AUTOLINK_SUPPORT",        Info{ Info::Bool,   &ConfigValues::m_AUTOLINK_SUPPORT        }},
    { "BUILTIN_STL_SUPPORT",     Info{ Info::Bool,   &ConfigValues::m_BUILTIN_STL_SUPPORT     }},
    { "CPP_CLI_SUPPORT",         Info{ Info::Bool,   &ConfigValues::m_CPP_CLI_SUPPORT         }},
    { "SIP_SUPPORT",             Info{ Info::Bool,   &ConfigValues::m_SIP_SUPPORT             }},
    { "IDL_PROPERTY_SUPPORT",    Info{ Info::Bool,   &ConfigValues::m_IDL_PROPERTY_SUPPORT    }},
    { "DISTRIBUTE_GROUP_DOC",    Info{ Info::Bool,   &ConfigValues::m_DISTRIBUTE_GROUP_DOC    }},
    { "GROUP_NESTED_COMPOUNDS",  Info{ Info::Bool,   &ConfigValues::m_GROUP_NESTED_COMPOUNDS  }},
    { "SUBGROUPING",             Info{ Info::Bool,   &ConfigValues::m_SUBGROUPING             }},
    { "INLINE_GROUPED_CLASSES",  Info{ Info::Bool,   &ConfigValues::m_INLINE_GROUPED_CLASSES  }},
    { "INLINE_SIMPLE_STRUCTS",   Info{ Info::Bool,   &ConfigValues::m_INLINE_SIMPLE_STRUCTS   }},
    { "TYPEDEF_HIDES_STRUCT",    Info{ Info::Bool,   &ConfigValues::m_TYPEDEF_HIDES_STRUCT    }},
    { "LOOKUP_CACHE_SIZE",       Info{ Info::Int,    &ConfigValues::m_LOOKUP_CACHE_SIZE       }},
    { "NUM_PROC_THREADS",        Info{ Info::Int,    &ConfigValues::m_NUM_PROC_THREADS        }},
    { "TIMESTAMP",               Info{ Info::String, &ConfigValues::m_TIMESTAMP,              {}}},
    { "EXTRACT_ALL",             Info{ Info::Bool,   &ConfigValues::m_EXTRACT_ALL             }},
    { "EXTRACT_PRIVATE",         Info{ Info::Bool,   &ConfigValues::m_EXTRACT_PRIVATE         }},
    { "EXTRACT_PRIV_VIRTUAL",    Info{ Info::Bool,   &ConfigValues::m_EXTRACT_PRIV_VIRTUAL    }},
    { "EXTRACT_PACKAGE",         Info{ Info::Bool,   &ConfigValues::m_EXTRACT_PACKAGE         }},
    { "EXTRACT_STATIC",          Info{ Info::Bool,   &ConfigValues::m_EXTRACT_STATIC          }},
    { "EXTRACT_LOCAL_CLASSES",   Info{ Info::Bool,   &ConfigValues::m_EXTRACT_LOCAL_CLASSES   }},
    { "EXTRACT_LOCAL_METHODS",   Info{ Info::Bool,   &ConfigValues::m_EXTRACT_LOCAL_METHODS   }},
    { "EXTRACT_ANON_NSPACES",    Info{ Info::Bool,   &ConfigValues::m_EXTRACT_ANON_NSPACES    }},
    { "RESOLVE_UNNAMED_PARAMS",  Info{ Info::Bool,   &ConfigValues::m_RESOLVE_UNNAMED_PARAMS  }},
    { "HIDE_UNDOC_MEMBERS",      Info{ Info::Bool,   &ConfigValues::m_HIDE_UNDOC_MEMBERS      }},
    { "HIDE_UNDOC_CLASSES",      Info{ Info::Bool,   &ConfigValues::m_HIDE_UNDOC_CLASSES      }},
    { "HIDE_FRIEND_COMPOUNDS",   Info{ Info::Bool,   &ConfigValues::m_HIDE_FRIEND_COMPOUNDS   }},
    { "HIDE_IN_BODY_DOCS",       Info{ Info::Bool,   &ConfigValues::m_HIDE_IN_BODY_DOCS       }},
    { "INTERNAL_DOCS",           Info{ Info::Bool,   &ConfigValues::m_INTERNAL_DOCS           }},
    { "CASE_SENSE_NAMES",        Info{ Info::String, &ConfigValues::m_CASE_SENSE_NAMES,       {}}},
    { "HIDE_SCOPE_NAMES",        Info{ Info::Bool,   &ConfigValues::m_HIDE_SCOPE_NAMES        }},
    { "HIDE_COMPOUND_REFERENCE", Info{ Info::Bool,   &ConfigValues::m_HIDE_COMPOUND_REFERENCE }},
    { "SHOW_HEADERFILE",         Info{ Info::Bool,   &ConfigValues::m_SHOW_HEADERFILE         }},
    { "SHOW_INCLUDE_FILES",      Info{ Info::Bool,   &ConfigValues::m_SHOW_INCLUDE_FILES      }},
    { "SHOW_GROUPED_MEMB_INC",   Info{ Info::Bool,   &ConfigValues::m_SHOW_GROUPED_MEMB_INC   }},
    { "FORCE_LOCAL_INCLUDES",    Info{ Info::Bool,   &ConfigValues::m_FORCE_LOCAL_INCLUDES    }},
    { "INLINE_INFO",             Info{ Info::Bool,   &ConfigValues::m_INLINE_INFO             }},
    { "SORT_MEMBER_DOCS",        Info{ Info::Bool,   &ConfigValues::m_SORT_MEMBER_DOCS        }},
    { "SORT_BRIEF_DOCS",         Info{ Info::Bool,   &ConfigValues::m_SORT_BRIEF_DOCS         }},
    { "SORT_MEMBERS_CTORS_1ST",  Info{ Info::Bool,   &ConfigValues::m_SORT_MEMBERS_CTORS_1ST  }},
    { "SORT_GROUP_NAMES",        Info{ Info::Bool,   &ConfigValues::m_SORT_GROUP_NAMES        }},
    { "SORT_BY_SCOPE_NAME",      Info{ Info::Bool,   &ConfigValues::m_SORT_BY_SCOPE_NAME      }},
    { "STRICT_PROTO_MATCHING",   Info{ Info::Bool,   &ConfigValues::m_STRICT_PROTO_MATCHING   }},
    { "GENERATE_TODOLIST",       Info{ Info::Bool,   &ConfigValues::m_GENERATE_TODOLIST       }},
    { "GENERATE_TESTLIST",       Info{ Info::Bool,   &ConfigValues::m_GENERATE_TESTLIST       }},
    { "GENERATE_BUGLIST",        Info{ Info::Bool,   &ConfigValues::m_GENERATE_BUGLIST        }},
    { "GENERATE_DEPRECATEDLIST", Info{ Info::Bool,   &ConfigValues::m_GENERATE_DEPRECATEDLIST }},
    { "ENABLED_SECTIONS",        Info{ Info::List,   &ConfigValues::m_ENABLED_SECTIONS        }},
    { "MAX_INITIALIZER_LINES",   Info{ Info::Int,    &ConfigValues::m_MAX_INITIALIZER_LINES   }},
    { "SHOW_USED_FILES",         Info{ Info::Bool,   &ConfigValues::m_SHOW_USED_FILES         }},
    { "SHOW_FILES",              Info{ Info::Bool,   &ConfigValues::m_SHOW_FILES              }},
    { "SHOW_NAMESPACES",         Info{ Info::Bool,   &ConfigValues::m_SHOW_NAMESPACES         }},
    { "FILE_VERSION_FILTER",     Info{ Info::String, &ConfigValues::m_FILE_VERSION_FILTER     }},
    { "LAYOUT_FILE",             Info{ Info::String, &ConfigValues::m_LAYOUT_FILE             }},
    { "CITE_BIB_FILES",          Info{ Info::List,   &ConfigValues::m_CITE_BIB_FILES          }},
    { "QUIET",                   Info{ Info::Bool,   &ConfigValues::m_QUIET                   }},
    { "WARNINGS",                Info{ Info::Bool,   &ConfigValues::m_WARNINGS                }},
    { "WARN_IF_UNDOCUMENTED",    Info{ Info::Bool,   &ConfigValues::m_WARN_IF_UNDOCUMENTED    }},
    { "WARN_IF_DOC_ERROR",       Info{ Info::Bool,   &ConfigValues::m_WARN_IF_DOC_ERROR       }},
    { "WARN_IF_INCOMPLETE_DOC",  Info{ Info::Bool,   &ConfigValues::m_WARN_IF_INCOMPLETE_DOC  }},
    { "WARN_NO_PARAMDOC",        Info{ Info::Bool,   &ConfigValues::m_WARN_NO_PARAMDOC        }},
    { "WARN_IF_UNDOC_ENUM_VAL",  Info{ Info::Bool,   &ConfigValues::m_WARN_IF_UNDOC_ENUM_VAL  }},
    { "WARN_AS_ERROR",           Info{ Info::String, &ConfigValues::m_WARN_AS_ERROR,          {}}},
    { "WARN_FORMAT",             Info{ Info::String, &ConfigValues::m_WARN_FORMAT             }},
    { "WARN_LINE_FORMAT",        Info{ Info::String, &ConfigValues::m_WARN_LINE_FORMAT        }},
    { "WARN_LOGFILE",            Info{ Info::String, &ConfigValues::m_WARN_LOGFILE            }},
    { "INPUT",                   Info{ Info::List,   &ConfigValues::m_INPUT                   }},
    { "INPUT_ENCODING",          Info{ Info::String, &ConfigValues::m_INPUT_ENCODING          }},
    { "INPUT_FILE_ENCODING",     Info{ Info::List,   &ConfigValues::m_INPUT_FILE_ENCODING     }},
    { "FILE_PATTERNS",           Info{ Info::List,   &ConfigValues::m_FILE_PATTERNS           }},
    { "RECURSIVE",               Info{ Info::Bool,   &ConfigValues::m_RECURSIVE               }},
    { "EXCLUDE",                 Info{ Info::List,   &ConfigValues::m_EXCLUDE                 }},
    { "EXCLUDE_SYMLINKS",        Info{ Info::Bool,   &ConfigValues::m_EXCLUDE_SYMLINKS        }},
    { "EXCLUDE_PATTERNS",        Info{ Info::List,   &ConfigValues::m_EXCLUDE_PATTERNS        }},
    { "EXCLUDE_SYMBOLS",         Info{ Info::List,   &ConfigValues::m_EXCLUDE_SYMBOLS         }},
    { "EXAMPLE_PATH",            Info{ Info::List,   &ConfigValues::m_EXAMPLE_PATH            }},
    { "EXAMPLE_PATTERNS",        Info{ Info::List,   &ConfigValues::m_EXAMPLE_PATTERNS        }},
    { "EXAMPLE_RECURSIVE",       Info{ Info::Bool,   &ConfigValues::m_EXAMPLE_RECURSIVE       }},
    { "IMAGE_PATH",              Info{ Info::List,   &ConfigValues::m_IMAGE_PATH              }},
    { "INPUT_FILTER",            Info{ Info::String, &ConfigValues::m_INPUT_FILTER            }},
    { "FILTER_PATTERNS",         Info{ Info::List,   &ConfigValues::m_FILTER_PATTERNS         }},
    { "FILTER_SOURCE_FILES",     Info{ Info::Bool,   &ConfigValues::m_FILTER_SOURCE_FILES     }},
    { "FILTER_SOURCE_PATTERNS",  Info{ Info::List,   &ConfigValues::m_FILTER_SOURCE_PATTERNS  }},
    { "USE_MDFILE_AS_MAINPAGE",  Info{ Info::String, &ConfigValues::m_USE_MDFILE_AS_MAINPAGE  }},
    { "FORTRAN_COMMENT_AFTER",   Info{ Info::Int,    &ConfigValues::m_FORTRAN_COMMENT_AFTER   }},
    { "SOURCE_BROWSER",          Info{ Info::Bool,   &ConfigValues::m_SOURCE_BROWSER          }},
    { "INLINE_SOURCES",          Info{ Info::Bool,   &ConfigValues::m_INLINE_SOURCES          }},
    { "STRIP_CODE_COMMENTS",     Info{ Info::Bool,   &ConfigValues::m_STRIP_CODE_COMMENTS     }},
    { "REFERENCED_BY_RELATION",  Info{ Info::Bool,   &ConfigValues::m_REFERENCED_BY_RELATION  }},
    { "REFERENCES_RELATION",     Info{ Info::Bool,   &ConfigValues::m_REFERENCES_RELATION     }},
    { "REFERENCES_LINK_SOURCE",  Info{ Info::Bool,   &ConfigValues::m_REFERENCES_LINK_SOURCE  }},
    { "SOURCE_TOOLTIPS",         Info{ Info::Bool,   &ConfigValues::m_SOURCE_TOOLTIPS         }},
    { "USE_HTAGS",               Info{ Info::Bool,   &ConfigValues::m_USE_HTAGS               }},
    { "VERBATIM_HEADERS",        Info{ Info::Bool,   &ConfigValues::m_VERBATIM_HEADERS        }},
#if USE_LIBCLANG
    { "CLANG_ASSISTED_PARSING",  Info{ Info::Bool,   &ConfigValues::m_CLANG_ASSISTED_PARSING  }},
#endif
#if USE_LIBCLANG
    { "CLANG_ADD_INC_PATHS",     Info{ Info::Bool,   &ConfigValues::m_CLANG_ADD_INC_PATHS     }},
#endif
#if USE_LIBCLANG
    { "CLANG_OPTIONS",           Info{ Info::List,   &ConfigValues::m_CLANG_OPTIONS           }},
#endif
#if USE_LIBCLANG
    { "CLANG_DATABASE_PATH",     Info{ Info::String, &ConfigValues::m_CLANG_DATABASE_PATH     }},
#endif
    { "ALPHABETICAL_INDEX",      Info{ Info::Bool,   &ConfigValues::m_ALPHABETICAL_INDEX      }},
    { "IGNORE_PREFIX",           Info{ Info::List,   &ConfigValues::m_IGNORE_PREFIX           }},
    { "GENERATE_HTML",           Info{ Info::Bool,   &ConfigValues::m_GENERATE_HTML           }},
    { "HTML_OUTPUT",             Info{ Info::String, &ConfigValues::m_HTML_OUTPUT             }},
    { "HTML_FILE_EXTENSION",     Info{ Info::String, &ConfigValues::m_HTML_FILE_EXTENSION     }},
    { "HTML_HEADER",             Info{ Info::String, &ConfigValues::m_HTML_HEADER             }},
    { "HTML_FOOTER",             Info{ Info::String, &ConfigValues::m_HTML_FOOTER             }},
    { "HTML_STYLESHEET",         Info{ Info::String, &ConfigValues::m_HTML_STYLESHEET         }},
    { "HTML_EXTRA_STYLESHEET",   Info{ Info::List,   &ConfigValues::m_HTML_EXTRA_STYLESHEET   }},
    { "HTML_EXTRA_FILES",        Info{ Info::List,   &ConfigValues::m_HTML_EXTRA_FILES        }},
    { "HTML_COLORSTYLE",         Info{ Info::String, &ConfigValues::m_HTML_COLORSTYLE,        {}}},
    { "HTML_COLORSTYLE_HUE",     Info{ Info::Int,    &ConfigValues::m_HTML_COLORSTYLE_HUE     }},
    { "HTML_COLORSTYLE_SAT",     Info{ Info::Int,    &ConfigValues::m_HTML_COLORSTYLE_SAT     }},
    { "HTML_COLORSTYLE_GAMMA",   Info{ Info::Int,    &ConfigValues::m_HTML_COLORSTYLE_GAMMA   }},
    { "HTML_DYNAMIC_MENUS",      Info{ Info::Bool,   &ConfigValues::m_HTML_DYNAMIC_MENUS      }},
    { "HTML_DYNAMIC_SECTIONS",   Info{ Info::Bool,   &ConfigValues::m_HTML_DYNAMIC_SECTIONS   }},
    { "HTML_INDEX_NUM_ENTRIES",  Info{ Info::Int,    &ConfigValues::m_HTML_INDEX_NUM_ENTRIES  }},
    { "GENERATE_DOCSET",         Info{ Info::Bool,   &ConfigValues::m_GENERATE_DOCSET         }},
    { "DOCSET_FEEDNAME",         Info{ Info::String, &ConfigValues::m_DOCSET_FEEDNAME         }},
    { "DOCSET_FEEDURL",          Info{ Info::String, &ConfigValues::m_DOCSET_FEEDURL          }},
    { "DOCSET_BUNDLE_ID",        Info{ Info::String, &ConfigValues::m_DOCSET_BUNDLE_ID        }},
    { "DOCSET_PUBLISHER_ID",     Info{ Info::String, &ConfigValues::m_DOCSET_PUBLISHER_ID     }},
    { "DOCSET_PUBLISHER_NAME",   Info{ Info::String, &ConfigValues::m_DOCSET_PUBLISHER_NAME   }},
    { "GENERATE_HTMLHELP",       Info{ Info::Bool,   &ConfigValues::m_GENERATE_HTMLHELP       }},
    { "CHM_FILE",                Info{ Info::String, &ConfigValues::m_CHM_FILE                }},
    { "HHC_LOCATION",            Info{ Info::String, &ConfigValues::m_HHC_LOCATION            }},
    { "GENERATE_CHI",            Info{ Info::Bool,   &ConfigValues::m_GENERATE_CHI            }},
    { "CHM_INDEX_ENCODING",      Info{ Info::String, &ConfigValues::m_CHM_INDEX_ENCODING      }},
    { "BINARY_TOC",              Info{ Info::Bool,   &ConfigValues::m_BINARY_TOC              }},
    { "TOC_EXPAND",              Info{ Info::Bool,   &ConfigValues::m_TOC_EXPAND              }},
    { "SITEMAP_URL",             Info{ Info::String, &ConfigValues::m_SITEMAP_URL             }},
    { "GENERATE_QHP",            Info{ Info::Bool,   &ConfigValues::m_GENERATE_QHP            }},
    { "QCH_FILE",                Info{ Info::String, &ConfigValues::m_QCH_FILE                }},
    { "QHP_NAMESPACE",           Info{ Info::String, &ConfigValues::m_QHP_NAMESPACE           }},
    { "QHP_VIRTUAL_FOLDER",      Info{ Info::String, &ConfigValues::m_QHP_VIRTUAL_FOLDER      }},
    { "QHP_CUST_FILTER_NAME",    Info{ Info::String, &ConfigValues::m_QHP_CUST_FILTER_NAME    }},
    { "QHP_CUST_FILTER_ATTRS",   Info{ Info::String, &ConfigValues::m_QHP_CUST_FILTER_ATTRS   }},
    { "QHP_SECT_FILTER_ATTRS",   Info{ Info::String, &ConfigValues::m_QHP_SECT_FILTER_ATTRS   }},
    { "QHG_LOCATION",            Info{ Info::String, &ConfigValues::m_QHG_LOCATION            }},
    { "GENERATE_ECLIPSEHELP",    Info{ Info::Bool,   &ConfigValues::m_GENERATE_ECLIPSEHELP    }},
    { "ECLIPSE_DOC_ID",          Info{ Info::String, &ConfigValues::m_ECLIPSE_DOC_ID          }},
    { "DISABLE_INDEX",           Info{ Info::Bool,   &ConfigValues::m_DISABLE_INDEX           }},
    { "GENERATE_TREEVIEW",       Info{ Info::Bool,   &ConfigValues::m_GENERATE_TREEVIEW       }},
    { "FULL_SIDEBAR",            Info{ Info::Bool,   &ConfigValues::m_FULL_SIDEBAR            }},
    { "ENUM_VALUES_PER_LINE",    Info{ Info::Int,    &ConfigValues::m_ENUM_VALUES_PER_LINE    }},
    { "TREEVIEW_WIDTH",          Info{ Info::Int,    &ConfigValues::m_TREEVIEW_WIDTH          }},
    { "EXT_LINKS_IN_WINDOW",     Info{ Info::Bool,   &ConfigValues::m_EXT_LINKS_IN_WINDOW     }},
    { "OBFUSCATE_EMAILS",        Info{ Info::Bool,   &ConfigValues::m_OBFUSCATE_EMAILS        }},
    { "HTML_FORMULA_FORMAT",     Info{ Info::String, &ConfigValues::m_HTML_FORMULA_FORMAT,    {}}},
    { "FORMULA_FONTSIZE",        Info{ Info::Int,    &ConfigValues::m_FORMULA_FONTSIZE        }},
    { "FORMULA_MACROFILE",       Info{ Info::String, &ConfigValues::m_FORMULA_MACROFILE       }},
    { "USE_MATHJAX",             Info{ Info::Bool,   &ConfigValues::m_USE_MATHJAX             }},
    { "MATHJAX_VERSION",         Info{ Info::String, &ConfigValues::m_MATHJAX_VERSION,        {}}},
    { "MATHJAX_FORMAT",          Info{ Info::String, &ConfigValues::m_MATHJAX_FORMAT,         {}}},
    { "MATHJAX_RELPATH",         Info{ Info::String, &ConfigValues::m_MATHJAX_RELPATH         }},
    { "MATHJAX_EXTENSIONS",      Info{ Info::List,   &ConfigValues::m_MATHJAX_EXTENSIONS      }},
    { "MATHJAX_CODEFILE",        Info{ Info::String, &ConfigValues::m_MATHJAX_CODEFILE        }},
    { "SEARCHENGINE",            Info{ Info::Bool,   &ConfigValues::m_SEARCHENGINE            }},
    { "SERVER_BASED_SEARCH",     Info{ Info::Bool,   &ConfigValues::m_SERVER_BASED_SEARCH     }},
    { "EXTERNAL_SEARCH",         Info{ Info::Bool,   &ConfigValues::m_EXTERNAL_SEARCH         }},
    { "SEARCHENGINE_URL",        Info{ Info::String, &ConfigValues::m_SEARCHENGINE_URL        }},
    { "SEARCHDATA_FILE",         Info{ Info::String, &ConfigValues::m_SEARCHDATA_FILE         }},
    { "EXTERNAL_SEARCH_ID",      Info{ Info::String, &ConfigValues::m_EXTERNAL_SEARCH_ID      }},
    { "EXTRA_SEARCH_MAPPINGS",   Info{ Info::List,   &ConfigValues::m_EXTRA_SEARCH_MAPPINGS   }},
    { "GENERATE_LATEX",          Info{ Info::Bool,   &ConfigValues::m_GENERATE_LATEX          }},
    { "LATEX_OUTPUT",            Info{ Info::String, &ConfigValues::m_LATEX_OUTPUT            }},
    { "LATEX_CMD_NAME",          Info{ Info::String, &ConfigValues::m_LATEX_CMD_NAME          }},
    { "MAKEINDEX_CMD_NAME",      Info{ Info::String, &ConfigValues::m_MAKEINDEX_CMD_NAME      }},
    { "LATEX_MAKEINDEX_CMD",     Info{ Info::String, &ConfigValues::m_LATEX_MAKEINDEX_CMD     }},
    { "COMPACT_LATEX",           Info{ Info::Bool,   &ConfigValues::m_COMPACT_LATEX           }},
    { "PAPER_TYPE",              Info{ Info::String, &ConfigValues::m_PAPER_TYPE,             {}}},
    { "EXTRA_PACKAGES",          Info{ Info::List,   &ConfigValues::m_EXTRA_PACKAGES          }},
    { "LATEX_HEADER",            Info{ Info::String, &ConfigValues::m_LATEX_HEADER            }},
    { "LATEX_FOOTER",            Info{ Info::String, &ConfigValues::m_LATEX_FOOTER            }},
    { "LATEX_EXTRA_STYLESHEET",  Info{ Info::List,   &ConfigValues::m_LATEX_EXTRA_STYLESHEET  }},
    { "LATEX_EXTRA_FILES",       Info{ Info::List,   &ConfigValues::m_LATEX_EXTRA_FILES       }},
    { "PDF_HYPERLINKS",          Info{ Info::Bool,   &ConfigValues::m_PDF_HYPERLINKS          }},
    { "USE_PDFLATEX",            Info{ Info::Bool,   &ConfigValues::m_USE_PDFLATEX            }},
    { "LATEX_BATCHMODE",         Info{ Info::String, &ConfigValues::m_LATEX_BATCHMODE,        {}}},
    { "LATEX_HIDE_INDICES",      Info{ Info::Bool,   &ConfigValues::m_LATEX_HIDE_INDICES      }},
    { "LATEX_BIB_STYLE",         Info{ Info::String, &ConfigValues::m_LATEX_BIB_STYLE         }},
    { "LATEX_EMOJI_DIRECTORY",   Info{ Info::String, &ConfigValues::m_LATEX_EMOJI_DIRECTORY   }},
    { "GENERATE_RTF",            Info{ Info::Bool,   &ConfigValues::m_GENERATE_RTF            }},
    { "RTF_OUTPUT",              Info{ Info::String, &ConfigValues::m_RTF_OUTPUT              }},
    { "COMPACT_RTF",             Info{ Info::Bool,   &ConfigValues::m_COMPACT_RTF             }},
    { "RTF_HYPERLINKS",          Info{ Info::Bool,   &ConfigValues::m_RTF_HYPERLINKS          }},
    { "RTF_STYLESHEET_FILE",     Info{ Info::String, &ConfigValues::m_RTF_STYLESHEET_FILE     }},
    { "RTF_EXTENSIONS_FILE",     Info{ Info::String, &ConfigValues::m_RTF_EXTENSIONS_FILE     }},
    { "GENERATE_MAN",            Info{ Info::Bool,   &ConfigValues::m_GENERATE_MAN            }},
    { "MAN_OUTPUT",              Info{ Info::String, &ConfigValues::m_MAN_OUTPUT              }},
    { "MAN_EXTENSION",           Info{ Info::String, &ConfigValues::m_MAN_EXTENSION           }},
    { "MAN_SUBDIR",              Info{ Info::String, &ConfigValues::m_MAN_SUBDIR              }},
    { "MAN_LINKS",               Info{ Info::Bool,   &ConfigValues::m_MAN_LINKS               }},
    { "GENERATE_XML",            Info{ Info::Bool,   &ConfigValues::m_GENERATE_XML            }},
    { "XML_OUTPUT",              Info{ Info::String, &ConfigValues::m_XML_OUTPUT              }},
    { "XML_PROGRAMLISTING",      Info{ Info::Bool,   &ConfigValues::m_XML_PROGRAMLISTING      }},
    { "XML_NS_MEMB_FILE_SCOPE",  Info{ Info::Bool,   &ConfigValues::m_XML_NS_MEMB_FILE_SCOPE  }},
    { "GENERATE_DOCBOOK",        Info{ Info::Bool,   &ConfigValues::m_GENERATE_DOCBOOK        }},
    { "DOCBOOK_OUTPUT",          Info{ Info::String, &ConfigValues::m_DOCBOOK_OUTPUT          }},
    { "GENERATE_AUTOGEN_DEF",    Info{ Info::Bool,   &ConfigValues::m_GENERATE_AUTOGEN_DEF    }},
    { "GENERATE_SQLITE3",        Info{ Info::Bool,   &ConfigValues::m_GENERATE_SQLITE3        }},
    { "SQLITE3_OUTPUT",          Info{ Info::String, &ConfigValues::m_SQLITE3_OUTPUT          }},
    { "SQLITE3_RECREATE_DB",     Info{ Info::Bool,   &ConfigValues::m_SQLITE3_RECREATE_DB     }},
    { "GENERATE_PERLMOD",        Info{ Info::Bool,   &ConfigValues::m_GENERATE_PERLMOD        }},
    { "PERLMOD_LATEX",           Info{ Info::Bool,   &ConfigValues::m_PERLMOD_LATEX           }},
    { "PERLMOD_PRETTY",          Info{ Info::Bool,   &ConfigValues::m_PERLMOD_PRETTY          }},
    { "PERLMOD_MAKEVAR_PREFIX",  Info{ Info::String, &ConfigValues::m_PERLMOD_MAKEVAR_PREFIX  }},
    { "ENABLE_PREPROCESSING",    Info{ Info::Bool,   &ConfigValues::m_ENABLE_PREPROCESSING    }},
    { "MACRO_EXPANSION",         Info{ Info::Bool,   &ConfigValues::m_MACRO_EXPANSION         }},
    { "EXPAND_ONLY_PREDEF",      Info{ Info::Bool,   &ConfigValues::m_EXPAND_ONLY_PREDEF      }},
    { "SEARCH_INCLUDES",         Info{ Info::Bool,   &ConfigValues::m_SEARCH_INCLUDES         }},
    { "INCLUDE_PATH",            Info{ Info::List,   &ConfigValues::m_INCLUDE_PATH            }},
    { "INCLUDE_FILE_PATTERNS",   Info{ Info::List,   &ConfigValues::m_INCLUDE_FILE_PATTERNS   }},
    { "PREDEFINED",              Info{ Info::List,   &ConfigValues::m_PREDEFINED              }},
    { "EXPAND_AS_DEFINED",       Info{ Info::List,   &ConfigValues::m_EXPAND_AS_DEFINED       }},
    { "SKIP_FUNCTION_MACROS",    Info{ Info::Bool,   &ConfigValues::m_SKIP_FUNCTION_MACROS    }},
    { "TAGFILES",                Info{ Info::List,   &ConfigValues::m_TAGFILES                }},
    { "GENERATE_TAGFILE",        Info{ Info::String, &ConfigValues::m_GENERATE_TAGFILE        }},
    { "ALLEXTERNALS",            Info{ Info::Bool,   &ConfigValues::m_ALLEXTERNALS            }},
    { "EXTERNAL_GROUPS",         Info{ Info::Bool,   &ConfigValues::m_EXTERNAL_GROUPS         }},
    { "EXTERNAL_PAGES",          Info{ Info::Bool,   &ConfigValues::m_EXTERNAL_PAGES          }},
    { "HIDE_UNDOC_RELATIONS",    Info{ Info::Bool,   &ConfigValues::m_HIDE_UNDOC_RELATIONS    }},
    { "HAVE_DOT",                Info{ Info::Bool,   &ConfigValues::m_HAVE_DOT                }},
    { "DOT_NUM_THREADS",         Info{ Info::Int,    &ConfigValues::m_DOT_NUM_THREADS         }},
    { "DOT_COMMON_ATTR",         Info{ Info::String, &ConfigValues::m_DOT_COMMON_ATTR         }},
    { "DOT_EDGE_ATTR",           Info{ Info::String, &ConfigValues::m_DOT_EDGE_ATTR           }},
    { "DOT_NODE_ATTR",           Info{ Info::String, &ConfigValues::m_DOT_NODE_ATTR           }},
    { "DOT_FONTPATH",            Info{ Info::String, &ConfigValues::m_DOT_FONTPATH            }},
    { "CLASS_GRAPH",             Info{ Info::String, &ConfigValues::m_CLASS_GRAPH,            {{ "NO", false }, { "YES", true }, { "TEXT", true }, { "GRAPH", true }, { "BUILTIN", true }}}},
    { "COLLABORATION_GRAPH",     Info{ Info::Bool,   &ConfigValues::m_COLLABORATION_GRAPH     }},
    { "GROUP_GRAPHS",            Info{ Info::Bool,   &ConfigValues::m_GROUP_GRAPHS            }},
    { "UML_LOOK",                Info{ Info::Bool,   &ConfigValues::m_UML_LOOK                }},
    { "UML_LIMIT_NUM_FIELDS",    Info{ Info::Int,    &ConfigValues::m_UML_LIMIT_NUM_FIELDS    }},
    { "DOT_UML_DETAILS",         Info{ Info::String, &ConfigValues::m_DOT_UML_DETAILS,        {}}},
    { "DOT_WRAP_THRESHOLD",      Info{ Info::Int,    &ConfigValues::m_DOT_WRAP_THRESHOLD      }},
    { "TEMPLATE_RELATIONS",      Info{ Info::Bool,   &ConfigValues::m_TEMPLATE_RELATIONS      }},
    { "INCLUDE_GRAPH",           Info{ Info::Bool,   &ConfigValues::m_INCLUDE_GRAPH           }},
    { "INCLUDED_BY_GRAPH",       Info{ Info::Bool,   &ConfigValues::m_INCLUDED_BY_GRAPH       }},
    { "CALL_GRAPH",              Info{ Info::Bool,   &ConfigValues::m_CALL_GRAPH              }},
    { "CALLER_GRAPH",            Info{ Info::Bool,   &ConfigValues::m_CALLER_GRAPH            }},
    { "GRAPHICAL_HIERARCHY",     Info{ Info::Bool,   &ConfigValues::m_GRAPHICAL_HIERARCHY     }},
    { "DIRECTORY_GRAPH",         Info{ Info::Bool,   &ConfigValues::m_DIRECTORY_GRAPH         }},
    { "DIR_GRAPH_MAX_DEPTH",     Info{ Info::Int,    &ConfigValues::m_DIR_GRAPH_MAX_DEPTH     }},
    { "DOT_IMAGE_FORMAT",        Info{ Info::String, &ConfigValues::m_DOT_IMAGE_FORMAT,       {}}},
    { "INTERACTIVE_SVG",         Info{ Info::Bool,   &ConfigValues::m_INTERACTIVE_SVG         }},
    { "DOT_PATH",                Info{ Info::String, &ConfigValues::m_DOT_PATH                }},
    { "DOTFILE_DIRS",            Info{ Info::List,   &ConfigValues::m_DOTFILE_DIRS            }},
    { "DIA_PATH",                Info{ Info::String, &ConfigValues::m_DIA_PATH                }},
    { "DIAFILE_DIRS",            Info{ Info::List,   &ConfigValues::m_DIAFILE_DIRS            }},
    { "PLANTUML_JAR_PATH",       Info{ Info::String, &ConfigValues::m_PLANTUML_JAR_PATH       }},
    { "PLANTUML_CFG_FILE",       Info{ Info::String, &ConfigValues::m_PLANTUML_CFG_FILE       }},
    { "PLANTUML_INCLUDE_PATH",   Info{ Info::List,   &ConfigValues::m_PLANTUML_INCLUDE_PATH   }},
    { "DOT_GRAPH_MAX_NODES",     Info{ Info::Int,    &ConfigValues::m_DOT_GRAPH_MAX_NODES     }},
    { "MAX_DOT_GRAPH_DEPTH",     Info{ Info::Int,    &ConfigValues::m_MAX_DOT_GRAPH_DEPTH     }},
    { "DOT_MULTI_TARGETS",       Info{ Info::Bool,   &ConfigValues::m_DOT_MULTI_TARGETS       }},
    { "GENERATE_LEGEND",         Info{ Info::Bool,   &ConfigValues::m_GENERATE_LEGEND         }},
    { "DOT_CLEANUP",             Info{ Info::Bool,   &ConfigValues::m_DOT_CLEANUP             }},
    { "MSCGEN_TOOL",             Info{ Info::String, &ConfigValues::m_MSCGEN_TOOL             }},
    { "MSCFILE_DIRS",            Info{ Info::List,   &ConfigValues::m_MSCFILE_DIRS            }},
  };
  auto it = configMap.find(tag.str());
  return it!=configMap.end() ? &it->second : nullptr;
}

void ConfigValues::init()
{
  static bool first = TRUE;
  if (!first) return;
  first = FALSE;

  m_DOXYFILE_ENCODING       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOXYFILE_ENCODING");
  m_PROJECT_NAME            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_NAME");
  m_PROJECT_NUMBER          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_NUMBER");
  m_PROJECT_BRIEF           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_BRIEF");
  m_PROJECT_LOGO            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_LOGO");
  m_OUTPUT_DIRECTORY        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"OUTPUT_DIRECTORY");
  m_CREATE_SUBDIRS          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CREATE_SUBDIRS");
  m_CREATE_SUBDIRS_LEVEL    = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"CREATE_SUBDIRS_LEVEL");
  m_ALLOW_UNICODE_NAMES     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALLOW_UNICODE_NAMES");
  m_OUTPUT_LANGUAGE         = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"OUTPUT_LANGUAGE");
  m_BRIEF_MEMBER_DESC       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"BRIEF_MEMBER_DESC");
  m_REPEAT_BRIEF            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REPEAT_BRIEF");
  m_ABBREVIATE_BRIEF        = ConfigImpl::instance()->getList(__FILE__,__LINE__,"ABBREVIATE_BRIEF");
  m_ALWAYS_DETAILED_SEC     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALWAYS_DETAILED_SEC");
  m_INLINE_INHERITED_MEMB   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_INHERITED_MEMB");
  m_FULL_PATH_NAMES         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FULL_PATH_NAMES");
  m_STRIP_FROM_PATH         = ConfigImpl::instance()->getList(__FILE__,__LINE__,"STRIP_FROM_PATH");
  m_STRIP_FROM_INC_PATH     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"STRIP_FROM_INC_PATH");
  m_SHORT_NAMES             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHORT_NAMES");
  m_JAVADOC_AUTOBRIEF       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"JAVADOC_AUTOBRIEF");
  m_JAVADOC_BANNER          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"JAVADOC_BANNER");
  m_QT_AUTOBRIEF            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"QT_AUTOBRIEF");
  m_MULTILINE_CPP_IS_BRIEF  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MULTILINE_CPP_IS_BRIEF");
  m_PYTHON_DOCSTRING        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PYTHON_DOCSTRING");
  m_INHERIT_DOCS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INHERIT_DOCS");
  m_SEPARATE_MEMBER_PAGES   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SEPARATE_MEMBER_PAGES");
  m_TAB_SIZE                = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"TAB_SIZE");
  m_ALIASES                 = ConfigImpl::instance()->getList(__FILE__,__LINE__,"ALIASES");
  m_OPTIMIZE_OUTPUT_FOR_C   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_FOR_C");
  m_OPTIMIZE_for_Prolog     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_for_Prolog");
  m_OPTIMIZE_OUTPUT_JAVA    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_JAVA");
  m_OPTIMIZE_FOR_FORTRAN    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_FOR_FORTRAN");
  m_OPTIMIZE_OUTPUT_VHDL    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_VHDL");
  m_OPTIMIZE_OUTPUT_SLICE   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_SLICE");
  m_EXTENSION_MAPPING       = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXTENSION_MAPPING");
  m_MARKDOWN_SUPPORT        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MARKDOWN_SUPPORT");
  m_TOC_INCLUDE_HEADINGS    = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"TOC_INCLUDE_HEADINGS");
  m_MARKDOWN_ID_STYLE       = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"MARKDOWN_ID_STYLE");
  m_AUTOLINK_SUPPORT        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"AUTOLINK_SUPPORT");
  m_BUILTIN_STL_SUPPORT     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"BUILTIN_STL_SUPPORT");
  m_CPP_CLI_SUPPORT         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CPP_CLI_SUPPORT");
  m_SIP_SUPPORT             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SIP_SUPPORT");
  m_IDL_PROPERTY_SUPPORT    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"IDL_PROPERTY_SUPPORT");
  m_DISTRIBUTE_GROUP_DOC    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DISTRIBUTE_GROUP_DOC");
  m_GROUP_NESTED_COMPOUNDS  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GROUP_NESTED_COMPOUNDS");
  m_SUBGROUPING             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SUBGROUPING");
  m_INLINE_GROUPED_CLASSES  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_GROUPED_CLASSES");
  m_INLINE_SIMPLE_STRUCTS   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_SIMPLE_STRUCTS");
  m_TYPEDEF_HIDES_STRUCT    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"TYPEDEF_HIDES_STRUCT");
  m_LOOKUP_CACHE_SIZE       = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"LOOKUP_CACHE_SIZE");
  m_NUM_PROC_THREADS        = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"NUM_PROC_THREADS");
  m_TIMESTAMP               = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"TIMESTAMP");
  m_EXTRACT_ALL             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_ALL");
  m_EXTRACT_PRIVATE         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_PRIVATE");
  m_EXTRACT_PRIV_VIRTUAL    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_PRIV_VIRTUAL");
  m_EXTRACT_PACKAGE         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_PACKAGE");
  m_EXTRACT_STATIC          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_STATIC");
  m_EXTRACT_LOCAL_CLASSES   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_LOCAL_CLASSES");
  m_EXTRACT_LOCAL_METHODS   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_LOCAL_METHODS");
  m_EXTRACT_ANON_NSPACES    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_ANON_NSPACES");
  m_RESOLVE_UNNAMED_PARAMS  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"RESOLVE_UNNAMED_PARAMS");
  m_HIDE_UNDOC_MEMBERS      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_UNDOC_MEMBERS");
  m_HIDE_UNDOC_CLASSES      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_UNDOC_CLASSES");
  m_HIDE_FRIEND_COMPOUNDS   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_FRIEND_COMPOUNDS");
  m_HIDE_IN_BODY_DOCS       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_IN_BODY_DOCS");
  m_INTERNAL_DOCS           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INTERNAL_DOCS");
  m_CASE_SENSE_NAMES        = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"CASE_SENSE_NAMES");
  m_HIDE_SCOPE_NAMES        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_SCOPE_NAMES");
  m_HIDE_COMPOUND_REFERENCE = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_COMPOUND_REFERENCE");
  m_SHOW_HEADERFILE         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_HEADERFILE");
  m_SHOW_INCLUDE_FILES      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_INCLUDE_FILES");
  m_SHOW_GROUPED_MEMB_INC   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_GROUPED_MEMB_INC");
  m_FORCE_LOCAL_INCLUDES    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FORCE_LOCAL_INCLUDES");
  m_INLINE_INFO             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_INFO");
  m_SORT_MEMBER_DOCS        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_MEMBER_DOCS");
  m_SORT_BRIEF_DOCS         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_BRIEF_DOCS");
  m_SORT_MEMBERS_CTORS_1ST  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_MEMBERS_CTORS_1ST");
  m_SORT_GROUP_NAMES        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_GROUP_NAMES");
  m_SORT_BY_SCOPE_NAME      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_BY_SCOPE_NAME");
  m_STRICT_PROTO_MATCHING   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"STRICT_PROTO_MATCHING");
  m_GENERATE_TODOLIST       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_TODOLIST");
  m_GENERATE_TESTLIST       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_TESTLIST");
  m_GENERATE_BUGLIST        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_BUGLIST");
  m_GENERATE_DEPRECATEDLIST = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_DEPRECATEDLIST");
  m_ENABLED_SECTIONS        = ConfigImpl::instance()->getList(__FILE__,__LINE__,"ENABLED_SECTIONS");
  m_MAX_INITIALIZER_LINES   = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"MAX_INITIALIZER_LINES");
  m_SHOW_USED_FILES         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_USED_FILES");
  m_SHOW_FILES              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_FILES");
  m_SHOW_NAMESPACES         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_NAMESPACES");
  m_FILE_VERSION_FILTER     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"FILE_VERSION_FILTER");
  m_LAYOUT_FILE             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LAYOUT_FILE");
  m_CITE_BIB_FILES          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"CITE_BIB_FILES");
  m_QUIET                   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"QUIET");
  m_WARNINGS                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARNINGS");
  m_WARN_IF_UNDOCUMENTED    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_IF_UNDOCUMENTED");
  m_WARN_IF_DOC_ERROR       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_IF_DOC_ERROR");
  m_WARN_IF_INCOMPLETE_DOC  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_IF_INCOMPLETE_DOC");
  m_WARN_NO_PARAMDOC        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_NO_PARAMDOC");
  m_WARN_IF_UNDOC_ENUM_VAL  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_IF_UNDOC_ENUM_VAL");
  m_WARN_AS_ERROR           = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"WARN_AS_ERROR");
  m_WARN_FORMAT             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"WARN_FORMAT");
  m_WARN_LINE_FORMAT        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"WARN_LINE_FORMAT");
  m_WARN_LOGFILE            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"WARN_LOGFILE");
  m_INPUT                   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INPUT");
  m_INPUT_ENCODING          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"INPUT_ENCODING");
  m_INPUT_FILE_ENCODING     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INPUT_FILE_ENCODING");
  m_FILE_PATTERNS           = ConfigImpl::instance()->getList(__FILE__,__LINE__,"FILE_PATTERNS");
  m_RECURSIVE               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"RECURSIVE");
  m_EXCLUDE                 = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXCLUDE");
  m_EXCLUDE_SYMLINKS        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXCLUDE_SYMLINKS");
  m_EXCLUDE_PATTERNS        = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXCLUDE_PATTERNS");
  m_EXCLUDE_SYMBOLS         = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXCLUDE_SYMBOLS");
  m_EXAMPLE_PATH            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXAMPLE_PATH");
  m_EXAMPLE_PATTERNS        = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXAMPLE_PATTERNS");
  m_EXAMPLE_RECURSIVE       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXAMPLE_RECURSIVE");
  m_IMAGE_PATH              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"IMAGE_PATH");
  m_INPUT_FILTER            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"INPUT_FILTER");
  m_FILTER_PATTERNS         = ConfigImpl::instance()->getList(__FILE__,__LINE__,"FILTER_PATTERNS");
  m_FILTER_SOURCE_FILES     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FILTER_SOURCE_FILES");
  m_FILTER_SOURCE_PATTERNS  = ConfigImpl::instance()->getList(__FILE__,__LINE__,"FILTER_SOURCE_PATTERNS");
  m_USE_MDFILE_AS_MAINPAGE  = ConfigImpl::instance()->getString(__FILE__,__LINE__,"USE_MDFILE_AS_MAINPAGE");
  m_FORTRAN_COMMENT_AFTER   = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"FORTRAN_COMMENT_AFTER");
  m_SOURCE_BROWSER          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SOURCE_BROWSER");
  m_INLINE_SOURCES          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_SOURCES");
  m_STRIP_CODE_COMMENTS     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"STRIP_CODE_COMMENTS");
  m_REFERENCED_BY_RELATION  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REFERENCED_BY_RELATION");
  m_REFERENCES_RELATION     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REFERENCES_RELATION");
  m_REFERENCES_LINK_SOURCE  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REFERENCES_LINK_SOURCE");
  m_SOURCE_TOOLTIPS         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SOURCE_TOOLTIPS");
  m_USE_HTAGS               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"USE_HTAGS");
  m_VERBATIM_HEADERS        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"VERBATIM_HEADERS");
#if USE_LIBCLANG
  m_CLANG_ASSISTED_PARSING  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CLANG_ASSISTED_PARSING");
#endif
#if USE_LIBCLANG
  m_CLANG_ADD_INC_PATHS     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CLANG_ADD_INC_PATHS");
#endif
#if USE_LIBCLANG
  m_CLANG_OPTIONS           = ConfigImpl::instance()->getList(__FILE__,__LINE__,"CLANG_OPTIONS");
#endif
#if USE_LIBCLANG
  m_CLANG_DATABASE_PATH     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"CLANG_DATABASE_PATH");
#endif
  m_ALPHABETICAL_INDEX      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALPHABETICAL_INDEX");
  m_IGNORE_PREFIX           = ConfigImpl::instance()->getList(__FILE__,__LINE__,"IGNORE_PREFIX");
  m_GENERATE_HTML           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_HTML");
  m_HTML_OUTPUT             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_OUTPUT");
  m_HTML_FILE_EXTENSION     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_FILE_EXTENSION");
  m_HTML_HEADER             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_HEADER");
  m_HTML_FOOTER             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_FOOTER");
  m_HTML_STYLESHEET         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_STYLESHEET");
  m_HTML_EXTRA_STYLESHEET   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"HTML_EXTRA_STYLESHEET");
  m_HTML_EXTRA_FILES        = ConfigImpl::instance()->getList(__FILE__,__LINE__,"HTML_EXTRA_FILES");
  m_HTML_COLORSTYLE         = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"HTML_COLORSTYLE");
  m_HTML_COLORSTYLE_HUE     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_COLORSTYLE_HUE");
  m_HTML_COLORSTYLE_SAT     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_COLORSTYLE_SAT");
  m_HTML_COLORSTYLE_GAMMA   = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_COLORSTYLE_GAMMA");
  m_HTML_DYNAMIC_MENUS      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HTML_DYNAMIC_MENUS");
  m_HTML_DYNAMIC_SECTIONS   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HTML_DYNAMIC_SECTIONS");
  m_HTML_INDEX_NUM_ENTRIES  = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_INDEX_NUM_ENTRIES");
  m_GENERATE_DOCSET         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_DOCSET");
  m_DOCSET_FEEDNAME         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_FEEDNAME");
  m_DOCSET_FEEDURL          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_FEEDURL");
  m_DOCSET_BUNDLE_ID        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_BUNDLE_ID");
  m_DOCSET_PUBLISHER_ID     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_PUBLISHER_ID");
  m_DOCSET_PUBLISHER_NAME   = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_PUBLISHER_NAME");
  m_GENERATE_HTMLHELP       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_HTMLHELP");
  m_CHM_FILE                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"CHM_FILE");
  m_HHC_LOCATION            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HHC_LOCATION");
  m_GENERATE_CHI            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_CHI");
  m_CHM_INDEX_ENCODING      = ConfigImpl::instance()->getString(__FILE__,__LINE__,"CHM_INDEX_ENCODING");
  m_BINARY_TOC              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"BINARY_TOC");
  m_TOC_EXPAND              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"TOC_EXPAND");
  m_SITEMAP_URL             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"SITEMAP_URL");
  m_GENERATE_QHP            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_QHP");
  m_QCH_FILE                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QCH_FILE");
  m_QHP_NAMESPACE           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_NAMESPACE");
  m_QHP_VIRTUAL_FOLDER      = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_VIRTUAL_FOLDER");
  m_QHP_CUST_FILTER_NAME    = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_CUST_FILTER_NAME");
  m_QHP_CUST_FILTER_ATTRS   = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_CUST_FILTER_ATTRS");
  m_QHP_SECT_FILTER_ATTRS   = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_SECT_FILTER_ATTRS");
  m_QHG_LOCATION            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHG_LOCATION");
  m_GENERATE_ECLIPSEHELP    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_ECLIPSEHELP");
  m_ECLIPSE_DOC_ID          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"ECLIPSE_DOC_ID");
  m_DISABLE_INDEX           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DISABLE_INDEX");
  m_GENERATE_TREEVIEW       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_TREEVIEW");
  m_FULL_SIDEBAR            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FULL_SIDEBAR");
  m_ENUM_VALUES_PER_LINE    = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"ENUM_VALUES_PER_LINE");
  m_TREEVIEW_WIDTH          = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"TREEVIEW_WIDTH");
  m_EXT_LINKS_IN_WINDOW     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXT_LINKS_IN_WINDOW");
  m_OBFUSCATE_EMAILS        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OBFUSCATE_EMAILS");
  m_HTML_FORMULA_FORMAT     = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"HTML_FORMULA_FORMAT");
  m_FORMULA_FONTSIZE        = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"FORMULA_FONTSIZE");
  m_FORMULA_MACROFILE       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"FORMULA_MACROFILE");
  m_USE_MATHJAX             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"USE_MATHJAX");
  m_MATHJAX_VERSION         = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"MATHJAX_VERSION");
  m_MATHJAX_FORMAT          = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"MATHJAX_FORMAT");
  m_MATHJAX_RELPATH         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MATHJAX_RELPATH");
  m_MATHJAX_EXTENSIONS      = ConfigImpl::instance()->getList(__FILE__,__LINE__,"MATHJAX_EXTENSIONS");
  m_MATHJAX_CODEFILE        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MATHJAX_CODEFILE");
  m_SEARCHENGINE            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SEARCHENGINE");
  m_SERVER_BASED_SEARCH     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SERVER_BASED_SEARCH");
  m_EXTERNAL_SEARCH         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTERNAL_SEARCH");
  m_SEARCHENGINE_URL        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"SEARCHENGINE_URL");
  m_SEARCHDATA_FILE         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"SEARCHDATA_FILE");
  m_EXTERNAL_SEARCH_ID      = ConfigImpl::instance()->getString(__FILE__,__LINE__,"EXTERNAL_SEARCH_ID");
  m_EXTRA_SEARCH_MAPPINGS   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXTRA_SEARCH_MAPPINGS");
  m_GENERATE_LATEX          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_LATEX");
  m_LATEX_OUTPUT            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_OUTPUT");
  m_LATEX_CMD_NAME          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_CMD_NAME");
  m_MAKEINDEX_CMD_NAME      = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAKEINDEX_CMD_NAME");
  m_LATEX_MAKEINDEX_CMD     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_MAKEINDEX_CMD");
  m_COMPACT_LATEX           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"COMPACT_LATEX");
  m_PAPER_TYPE              = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"PAPER_TYPE");
  m_EXTRA_PACKAGES          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXTRA_PACKAGES");
  m_LATEX_HEADER            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_HEADER");
  m_LATEX_FOOTER            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_FOOTER");
  m_LATEX_EXTRA_STYLESHEET  = ConfigImpl::instance()->getList(__FILE__,__LINE__,"LATEX_EXTRA_STYLESHEET");
  m_LATEX_EXTRA_FILES       = ConfigImpl::instance()->getList(__FILE__,__LINE__,"LATEX_EXTRA_FILES");
  m_PDF_HYPERLINKS          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PDF_HYPERLINKS");
  m_USE_PDFLATEX            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"USE_PDFLATEX");
  m_LATEX_BATCHMODE         = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"LATEX_BATCHMODE");
  m_LATEX_HIDE_INDICES      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"LATEX_HIDE_INDICES");
  m_LATEX_BIB_STYLE         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_BIB_STYLE");
  m_LATEX_EMOJI_DIRECTORY   = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_EMOJI_DIRECTORY");
  m_GENERATE_RTF            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_RTF");
  m_RTF_OUTPUT              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"RTF_OUTPUT");
  m_COMPACT_RTF             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"COMPACT_RTF");
  m_RTF_HYPERLINKS          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"RTF_HYPERLINKS");
  m_RTF_STYLESHEET_FILE     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"RTF_STYLESHEET_FILE");
  m_RTF_EXTENSIONS_FILE     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"RTF_EXTENSIONS_FILE");
  m_GENERATE_MAN            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_MAN");
  m_MAN_OUTPUT              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAN_OUTPUT");
  m_MAN_EXTENSION           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAN_EXTENSION");
  m_MAN_SUBDIR              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAN_SUBDIR");
  m_MAN_LINKS               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MAN_LINKS");
  m_GENERATE_XML            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_XML");
  m_XML_OUTPUT              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"XML_OUTPUT");
  m_XML_PROGRAMLISTING      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"XML_PROGRAMLISTING");
  m_XML_NS_MEMB_FILE_SCOPE  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"XML_NS_MEMB_FILE_SCOPE");
  m_GENERATE_DOCBOOK        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_DOCBOOK");
  m_DOCBOOK_OUTPUT          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCBOOK_OUTPUT");
  m_GENERATE_AUTOGEN_DEF    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_AUTOGEN_DEF");
  m_GENERATE_SQLITE3        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_SQLITE3");
  m_SQLITE3_OUTPUT          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"SQLITE3_OUTPUT");
  m_SQLITE3_RECREATE_DB     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SQLITE3_RECREATE_DB");
  m_GENERATE_PERLMOD        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_PERLMOD");
  m_PERLMOD_LATEX           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PERLMOD_LATEX");
  m_PERLMOD_PRETTY          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PERLMOD_PRETTY");
  m_PERLMOD_MAKEVAR_PREFIX  = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PERLMOD_MAKEVAR_PREFIX");
  m_ENABLE_PREPROCESSING    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ENABLE_PREPROCESSING");
  m_MACRO_EXPANSION         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MACRO_EXPANSION");
  m_EXPAND_ONLY_PREDEF      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXPAND_ONLY_PREDEF");
  m_SEARCH_INCLUDES         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SEARCH_INCLUDES");
  m_INCLUDE_PATH            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INCLUDE_PATH");
  m_INCLUDE_FILE_PATTERNS   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INCLUDE_FILE_PATTERNS");
  m_PREDEFINED              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"PREDEFINED");
  m_EXPAND_AS_DEFINED       = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXPAND_AS_DEFINED");
  m_SKIP_FUNCTION_MACROS    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SKIP_FUNCTION_MACROS");
  m_TAGFILES                = ConfigImpl::instance()->getList(__FILE__,__LINE__,"TAGFILES");
  m_GENERATE_TAGFILE        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"GENERATE_TAGFILE");
  m_ALLEXTERNALS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALLEXTERNALS");
  m_EXTERNAL_GROUPS         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTERNAL_GROUPS");
  m_EXTERNAL_PAGES          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTERNAL_PAGES");
  m_HIDE_UNDOC_RELATIONS    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_UNDOC_RELATIONS");
  m_HAVE_DOT                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HAVE_DOT");
  m_DOT_NUM_THREADS         = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DOT_NUM_THREADS");
  m_DOT_COMMON_ATTR         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_COMMON_ATTR");
  m_DOT_EDGE_ATTR           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_EDGE_ATTR");
  m_DOT_NODE_ATTR           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_NODE_ATTR");
  m_DOT_FONTPATH            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_FONTPATH");
  m_CLASS_GRAPH             = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"CLASS_GRAPH");
  m_COLLABORATION_GRAPH     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"COLLABORATION_GRAPH");
  m_GROUP_GRAPHS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GROUP_GRAPHS");
  m_UML_LOOK                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"UML_LOOK");
  m_UML_LIMIT_NUM_FIELDS    = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"UML_LIMIT_NUM_FIELDS");
  m_DOT_UML_DETAILS         = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"DOT_UML_DETAILS");
  m_DOT_WRAP_THRESHOLD      = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DOT_WRAP_THRESHOLD");
  m_TEMPLATE_RELATIONS      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"TEMPLATE_RELATIONS");
  m_INCLUDE_GRAPH           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INCLUDE_GRAPH");
  m_INCLUDED_BY_GRAPH       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INCLUDED_BY_GRAPH");
  m_CALL_GRAPH              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CALL_GRAPH");
  m_CALLER_GRAPH            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CALLER_GRAPH");
  m_GRAPHICAL_HIERARCHY     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GRAPHICAL_HIERARCHY");
  m_DIRECTORY_GRAPH         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DIRECTORY_GRAPH");
  m_DIR_GRAPH_MAX_DEPTH     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DIR_GRAPH_MAX_DEPTH");
  m_DOT_IMAGE_FORMAT        = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"DOT_IMAGE_FORMAT");
  m_INTERACTIVE_SVG         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INTERACTIVE_SVG");
  m_DOT_PATH                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_PATH");
  m_DOTFILE_DIRS            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"DOTFILE_DIRS");
  m_DIA_PATH                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DIA_PATH");
  m_DIAFILE_DIRS            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"DIAFILE_DIRS");
  m_PLANTUML_JAR_PATH       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PLANTUML_JAR_PATH");
  m_PLANTUML_CFG_FILE       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PLANTUML_CFG_FILE");
  m_PLANTUML_INCLUDE_PATH   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"PLANTUML_INCLUDE_PATH");
  m_DOT_GRAPH_MAX_NODES     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DOT_GRAPH_MAX_NODES");
  m_MAX_DOT_GRAPH_DEPTH     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"MAX_DOT_GRAPH_DEPTH");
  m_DOT_MULTI_TARGETS       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DOT_MULTI_TARGETS");
  m_GENERATE_LEGEND         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_LEGEND");
  m_DOT_CLEANUP             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DOT_CLEANUP");
  m_MSCGEN_TOOL             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MSCGEN_TOOL");
  m_MSCFILE_DIRS            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"MSCFILE_DIRS");
}

StringVector ConfigValues::fields() const
{
  return {
    "DOXYFILE_ENCODING",
    "PROJECT_NAME",
    "PROJECT_NUMBER",
    "PROJECT_BRIEF",
    "PROJECT_LOGO",
    "OUTPUT_DIRECTORY",
    "CREATE_SUBDIRS",
    "CREATE_SUBDIRS_LEVEL",
    "ALLOW_UNICODE_NAMES",
    "OUTPUT_LANGUAGE",
    "BRIEF_MEMBER_DESC",
    "REPEAT_BRIEF",
    "ABBREVIATE_BRIEF",
    "ALWAYS_DETAILED_SEC",
    "INLINE_INHERITED_MEMB",
    "FULL_PATH_NAMES",
    "STRIP_FROM_PATH",
    "STRIP_FROM_INC_PATH",
    "SHORT_NAMES",
    "JAVADOC_AUTOBRIEF",
    "JAVADOC_BANNER",
    "QT_AUTOBRIEF",
    "MULTILINE_CPP_IS_BRIEF",
    "PYTHON_DOCSTRING",
    "INHERIT_DOCS",
    "SEPARATE_MEMBER_PAGES",
    "TAB_SIZE",
    "ALIASES",
    "OPTIMIZE_OUTPUT_FOR_C",
    "OPTIMIZE_for_Prolog",
    "OPTIMIZE_OUTPUT_JAVA",
    "OPTIMIZE_FOR_FORTRAN",
    "OPTIMIZE_OUTPUT_VHDL",
    "OPTIMIZE_OUTPUT_SLICE",
    "EXTENSION_MAPPING",
    "MARKDOWN_SUPPORT",
    "TOC_INCLUDE_HEADINGS",
    "MARKDOWN_ID_STYLE",
    "AUTOLINK_SUPPORT",
    "BUILTIN_STL_SUPPORT",
    "CPP_CLI_SUPPORT",
    "SIP_SUPPORT",
    "IDL_PROPERTY_SUPPORT",
    "DISTRIBUTE_GROUP_DOC",
    "GROUP_NESTED_COMPOUNDS",
    "SUBGROUPING",
    "INLINE_GROUPED_CLASSES",
    "INLINE_SIMPLE_STRUCTS",
    "TYPEDEF_HIDES_STRUCT",
    "LOOKUP_CACHE_SIZE",
    "NUM_PROC_THREADS",
    "TIMESTAMP",
    "EXTRACT_ALL",
    "EXTRACT_PRIVATE",
    "EXTRACT_PRIV_VIRTUAL",
    "EXTRACT_PACKAGE",
    "EXTRACT_STATIC",
    "EXTRACT_LOCAL_CLASSES",
    "EXTRACT_LOCAL_METHODS",
    "EXTRACT_ANON_NSPACES",
    "RESOLVE_UNNAMED_PARAMS",
    "HIDE_UNDOC_MEMBERS",
    "HIDE_UNDOC_CLASSES",
    "HIDE_FRIEND_COMPOUNDS",
    "HIDE_IN_BODY_DOCS",
    "INTERNAL_DOCS",
    "CASE_SENSE_NAMES",
    "HIDE_SCOPE_NAMES",
    "HIDE_COMPOUND_REFERENCE",
    "SHOW_HEADERFILE",
    "SHOW_INCLUDE_FILES",
    "SHOW_GROUPED_MEMB_INC",
    "FORCE_LOCAL_INCLUDES",
    "INLINE_INFO",
    "SORT_MEMBER_DOCS",
    "SORT_BRIEF_DOCS",
    "SORT_MEMBERS_CTORS_1ST",
    "SORT_GROUP_NAMES",
    "SORT_BY_SCOPE_NAME",
    "STRICT_PROTO_MATCHING",
    "GENERATE_TODOLIST",
    "GENERATE_TESTLIST",
    "GENERATE_BUGLIST",
    "GENERATE_DEPRECATEDLIST",
    "ENABLED_SECTIONS",
    "MAX_INITIALIZER_LINES",
    "SHOW_USED_FILES",
    "SHOW_FILES",
    "SHOW_NAMESPACES",
    "FILE_VERSION_FILTER",
    "LAYOUT_FILE",
    "CITE_BIB_FILES",
    "QUIET",
    "WARNINGS",
    "WARN_IF_UNDOCUMENTED",
    "WARN_IF_DOC_ERROR",
    "WARN_IF_INCOMPLETE_DOC",
    "WARN_NO_PARAMDOC",
    "WARN_IF_UNDOC_ENUM_VAL",
    "WARN_AS_ERROR",
    "WARN_FORMAT",
    "WARN_LINE_FORMAT",
    "WARN_LOGFILE",
    "INPUT",
    "INPUT_ENCODING",
    "INPUT_FILE_ENCODING",
    "FILE_PATTERNS",
    "RECURSIVE",
    "EXCLUDE",
    "EXCLUDE_SYMLINKS",
    "EXCLUDE_PATTERNS",
    "EXCLUDE_SYMBOLS",
    "EXAMPLE_PATH",
    "EXAMPLE_PATTERNS",
    "EXAMPLE_RECURSIVE",
    "IMAGE_PATH",
    "INPUT_FILTER",
    "FILTER_PATTERNS",
    "FILTER_SOURCE_FILES",
    "FILTER_SOURCE_PATTERNS",
    "USE_MDFILE_AS_MAINPAGE",
    "FORTRAN_COMMENT_AFTER",
    "SOURCE_BROWSER",
    "INLINE_SOURCES",
    "STRIP_CODE_COMMENTS",
    "REFERENCED_BY_RELATION",
    "REFERENCES_RELATION",
    "REFERENCES_LINK_SOURCE",
    "SOURCE_TOOLTIPS",
    "USE_HTAGS",
    "VERBATIM_HEADERS",
    "CLANG_ASSISTED_PARSING",
    "CLANG_ADD_INC_PATHS",
    "CLANG_OPTIONS",
    "CLANG_DATABASE_PATH",
    "ALPHABETICAL_INDEX",
    "IGNORE_PREFIX",
    "GENERATE_HTML",
    "HTML_OUTPUT",
    "HTML_FILE_EXTENSION",
    "HTML_HEADER",
    "HTML_FOOTER",
    "HTML_STYLESHEET",
    "HTML_EXTRA_STYLESHEET",
    "HTML_EXTRA_FILES",
    "HTML_COLORSTYLE",
    "HTML_COLORSTYLE_HUE",
    "HTML_COLORSTYLE_SAT",
    "HTML_COLORSTYLE_GAMMA",
    "HTML_DYNAMIC_MENUS",
    "HTML_DYNAMIC_SECTIONS",
    "HTML_INDEX_NUM_ENTRIES",
    "GENERATE_DOCSET",
    "DOCSET_FEEDNAME",
    "DOCSET_FEEDURL",
    "DOCSET_BUNDLE_ID",
    "DOCSET_PUBLISHER_ID",
    "DOCSET_PUBLISHER_NAME",
    "GENERATE_HTMLHELP",
    "CHM_FILE",
    "HHC_LOCATION",
    "GENERATE_CHI",
    "CHM_INDEX_ENCODING",
    "BINARY_TOC",
    "TOC_EXPAND",
    "SITEMAP_URL",
    "GENERATE_QHP",
    "QCH_FILE",
    "QHP_NAMESPACE",
    "QHP_VIRTUAL_FOLDER",
    "QHP_CUST_FILTER_NAME",
    "QHP_CUST_FILTER_ATTRS",
    "QHP_SECT_FILTER_ATTRS",
    "QHG_LOCATION",
    "GENERATE_ECLIPSEHELP",
    "ECLIPSE_DOC_ID",
    "DISABLE_INDEX",
    "GENERATE_TREEVIEW",
    "FULL_SIDEBAR",
    "ENUM_VALUES_PER_LINE",
    "TREEVIEW_WIDTH",
    "EXT_LINKS_IN_WINDOW",
    "OBFUSCATE_EMAILS",
    "HTML_FORMULA_FORMAT",
    "FORMULA_FONTSIZE",
    "FORMULA_MACROFILE",
    "USE_MATHJAX",
    "MATHJAX_VERSION",
    "MATHJAX_FORMAT",
    "MATHJAX_RELPATH",
    "MATHJAX_EXTENSIONS",
    "MATHJAX_CODEFILE",
    "SEARCHENGINE",
    "SERVER_BASED_SEARCH",
    "EXTERNAL_SEARCH",
    "SEARCHENGINE_URL",
    "SEARCHDATA_FILE",
    "EXTERNAL_SEARCH_ID",
    "EXTRA_SEARCH_MAPPINGS",
    "GENERATE_LATEX",
    "LATEX_OUTPUT",
    "LATEX_CMD_NAME",
    "MAKEINDEX_CMD_NAME",
    "LATEX_MAKEINDEX_CMD",
    "COMPACT_LATEX",
    "PAPER_TYPE",
    "EXTRA_PACKAGES",
    "LATEX_HEADER",
    "LATEX_FOOTER",
    "LATEX_EXTRA_STYLESHEET",
    "LATEX_EXTRA_FILES",
    "PDF_HYPERLINKS",
    "USE_PDFLATEX",
    "LATEX_BATCHMODE",
    "LATEX_HIDE_INDICES",
    "LATEX_BIB_STYLE",
    "LATEX_EMOJI_DIRECTORY",
    "GENERATE_RTF",
    "RTF_OUTPUT",
    "COMPACT_RTF",
    "RTF_HYPERLINKS",
    "RTF_STYLESHEET_FILE",
    "RTF_EXTENSIONS_FILE",
    "GENERATE_MAN",
    "MAN_OUTPUT",
    "MAN_EXTENSION",
    "MAN_SUBDIR",
    "MAN_LINKS",
    "GENERATE_XML",
    "XML_OUTPUT",
    "XML_PROGRAMLISTING",
    "XML_NS_MEMB_FILE_SCOPE",
    "GENERATE_DOCBOOK",
    "DOCBOOK_OUTPUT",
    "GENERATE_AUTOGEN_DEF",
    "GENERATE_SQLITE3",
    "SQLITE3_OUTPUT",
    "SQLITE3_RECREATE_DB",
    "GENERATE_PERLMOD",
    "PERLMOD_LATEX",
    "PERLMOD_PRETTY",
    "PERLMOD_MAKEVAR_PREFIX",
    "ENABLE_PREPROCESSING",
    "MACRO_EXPANSION",
    "EXPAND_ONLY_PREDEF",
    "SEARCH_INCLUDES",
    "INCLUDE_PATH",
    "INCLUDE_FILE_PATTERNS",
    "PREDEFINED",
    "EXPAND_AS_DEFINED",
    "SKIP_FUNCTION_MACROS",
    "TAGFILES",
    "GENERATE_TAGFILE",
    "ALLEXTERNALS",
    "EXTERNAL_GROUPS",
    "EXTERNAL_PAGES",
    "HIDE_UNDOC_RELATIONS",
    "HAVE_DOT",
    "DOT_NUM_THREADS",
    "DOT_COMMON_ATTR",
    "DOT_EDGE_ATTR",
    "DOT_NODE_ATTR",
    "DOT_FONTPATH",
    "CLASS_GRAPH",
    "COLLABORATION_GRAPH",
    "GROUP_GRAPHS",
    "UML_LOOK",
    "UML_LIMIT_NUM_FIELDS",
    "DOT_UML_DETAILS",
    "DOT_WRAP_THRESHOLD",
    "TEMPLATE_RELATIONS",
    "INCLUDE_GRAPH",
    "INCLUDED_BY_GRAPH",
    "CALL_GRAPH",
    "CALLER_GRAPH",
    "GRAPHICAL_HIERARCHY",
    "DIRECTORY_GRAPH",
    "DIR_GRAPH_MAX_DEPTH",
    "DOT_IMAGE_FORMAT",
    "INTERACTIVE_SVG",
    "DOT_PATH",
    "DOTFILE_DIRS",
    "DIA_PATH",
    "DIAFILE_DIRS",
    "PLANTUML_JAR_PATH",
    "PLANTUML_CFG_FILE",
    "PLANTUML_INCLUDE_PATH",
    "DOT_GRAPH_MAX_NODES",
    "MAX_DOT_GRAPH_DEPTH",
    "DOT_MULTI_TARGETS",
    "GENERATE_LEGEND",
    "DOT_CLEANUP",
    "MSCGEN_TOOL",
    "MSCFILE_DIRS"
  };
}

bool ConfigValues::Info::getBooleanRepresentation() const
{
  if (!m_boolMap.empty())
  {
    auto it = m_boolMap.find((ConfigValues::instance().*(value.s)).str());
    if (it!=m_boolMap.end())
    {
      return it->second;
    }
  }
  return false;
}

