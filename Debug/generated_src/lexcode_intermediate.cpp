#line 1 "/home/vsc/github/doxygen/Debug/generated_src/lexcode_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "/home/vsc/github/doxygen/Debug/generated_src/lexcode_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define lexcodeYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer lexcodeYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define lexcodeYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer lexcodeYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define lexcodeYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer lexcodeYY_scan_buffer
#endif

#ifdef yy_scan_string
#define lexcodeYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string lexcodeYY_scan_string
#endif

#ifdef yy_scan_bytes
#define lexcodeYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes lexcodeYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define lexcodeYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer lexcodeYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define lexcodeYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer lexcodeYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define lexcodeYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state lexcodeYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define lexcodeYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer lexcodeYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define lexcodeYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state lexcodeYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define lexcodeYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state lexcodeYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define lexcodeYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack lexcodeYYensure_buffer_stack
#endif

#ifdef yylex
#define lexcodeYYlex_ALREADY_DEFINED
#else
#define yylex lexcodeYYlex
#endif

#ifdef yyrestart
#define lexcodeYYrestart_ALREADY_DEFINED
#else
#define yyrestart lexcodeYYrestart
#endif

#ifdef yylex_init
#define lexcodeYYlex_init_ALREADY_DEFINED
#else
#define yylex_init lexcodeYYlex_init
#endif

#ifdef yylex_init_extra
#define lexcodeYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra lexcodeYYlex_init_extra
#endif

#ifdef yylex_destroy
#define lexcodeYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy lexcodeYYlex_destroy
#endif

#ifdef yyget_debug
#define lexcodeYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug lexcodeYYget_debug
#endif

#ifdef yyset_debug
#define lexcodeYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug lexcodeYYset_debug
#endif

#ifdef yyget_extra
#define lexcodeYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra lexcodeYYget_extra
#endif

#ifdef yyset_extra
#define lexcodeYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra lexcodeYYset_extra
#endif

#ifdef yyget_in
#define lexcodeYYget_in_ALREADY_DEFINED
#else
#define yyget_in lexcodeYYget_in
#endif

#ifdef yyset_in
#define lexcodeYYset_in_ALREADY_DEFINED
#else
#define yyset_in lexcodeYYset_in
#endif

#ifdef yyget_out
#define lexcodeYYget_out_ALREADY_DEFINED
#else
#define yyget_out lexcodeYYget_out
#endif

#ifdef yyset_out
#define lexcodeYYset_out_ALREADY_DEFINED
#else
#define yyset_out lexcodeYYset_out
#endif

#ifdef yyget_leng
#define lexcodeYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng lexcodeYYget_leng
#endif

#ifdef yyget_text
#define lexcodeYYget_text_ALREADY_DEFINED
#else
#define yyget_text lexcodeYYget_text
#endif

#ifdef yyget_lineno
#define lexcodeYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno lexcodeYYget_lineno
#endif

#ifdef yyset_lineno
#define lexcodeYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno lexcodeYYset_lineno
#endif

#ifdef yyget_column
#define lexcodeYYget_column_ALREADY_DEFINED
#else
#define yyget_column lexcodeYYget_column
#endif

#ifdef yyset_column
#define lexcodeYYset_column_ALREADY_DEFINED
#else
#define yyset_column lexcodeYYset_column
#endif

#ifdef yywrap
#define lexcodeYYwrap_ALREADY_DEFINED
#else
#define yywrap lexcodeYYwrap
#endif

#ifdef yyalloc
#define lexcodeYYalloc_ALREADY_DEFINED
#else
#define yyalloc lexcodeYYalloc
#endif

#ifdef yyrealloc
#define lexcodeYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc lexcodeYYrealloc
#endif

#ifdef yyfree
#define lexcodeYYfree_ALREADY_DEFINED
#else
#define yyfree lexcodeYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define lexcodeYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[669] =
    {   0,
    16497,16497,  150,  149,    1,  149,  149,   19,  149,  149,
       16,  149,    1,   16,   19,  149,   19,  149,   19,  149,
      149,   20,  149,    1,   20,  149,   23,  149,    1,   23,
      149,   22,  149,  149,    1,   22,   23,  149,   22,  149,
       63,  149,   60,   63,  149,   60,  149,    1,   60,   63,
      149,   29,   63,  149,   47,   63,  149,   63,  149,   63,
      149,   35,   63,  149,   63,  149,   63,  149,   59,   60,
       63,  149,   58,   60,  149,    1,   58,   60,   63,  149,
       63,  149,   34,  149,    1,   34,  149,   32,   34,  149,
       34,  149,   33,   34,  149,   42,  149,    1,   42,  149,

       42,  149,   42,  149,   39,   42,  149,   40,   42,  149,
       56,  149,   55,   56,  149,   54,  149,    1,   54,   56,
      149,   50,   56,  149,   52,   56,  149,   53,   56,  149,
       49,   56,  149,   56,  149,   56,  149,   45,  149,   44,
       45,  149,    1,   44,   45,  149,   46,  149,  149,  148,
      149,    1,  148,  149,  149,    5,  149,    1,    5,  149,
      149,  149,    7,  149,    1,    7,  149,  149,   12,   15,
      149,   14,  149,    1,   12,   14,   15,  149,   15,  149,
       12,   15,  149,   75,   80,  149,   75,   80,  149,   86,
      149,    1,   75,   80,  149,   72,   80,  149,   80,  149,

       79,   80,  149,   80,  149,   80,  149,   75,   80,  149,
       75,   80,  149,   75,   80,  149,   68,   80,  149,   70,
       80,  149,   75,   80,  149,   73,   80,  149,  147,  149,
       66,  149,   67,  149,    1,   66,  149,   66,  149,  149,
    16497,  149,16497,  114,  149,    1,  149,16497,  149,16497,
      129,  131,  149,  129,  131,  149,  130,  149,    1,  129,
      131,  149,  131,  149,  131,  149,  129,  131,  149,  131,
      149,  131,  149,  129,  131,  149,  131,  149,  131,  149,
      129,  131,  149,  131,  149,  142,  145,  149,  144,  149,
        1,  142,  145,  149,  145,  149,  145,  149,  145,  149,

      145,  149,  145,  149,  142,  145,  149, 8331,  145,  149,
    16520,16521,16522,16523,  142,  145,  149,  145,  149,   91,
      149,   90,  149,    1,   91,  149,   88,   91,  149,   91,
      149,   91,  149,   91,  149,  108,  109,  149,  110,  149,
        1,  108,  109,  149,  109,  149,  103,  149,  103,  149,
      104,  149,    1,  103,  149,  106,  149,  103,  149,  149,
       93,  149,    1,  149,  149,   99,  101,  149,   94,  101,
      149,   94,  149,    1,   94,  101,  149,  101,  149,  101,
      149,  101,  149,   99,  101,  149,   17,   17,   16,    9,
       20,   20,   20,   23,   24,   24,   57,   60,   43,   62,

       27,   26,   26,   26,   61,   28,   59,   58,   58,   58,
       60,   31,   30,   37,   41,   38,   54,   51,   51,   48,
       44,  148,  148,  148,    5,    5,    5,    4,    5,    4,
        5,    7,    7,    7,   12,   14,   11,   13,   12,   13,
       75,   75,   75,   75,   75,   76,   77,   75,   73,   65,
    16497,  114,16497,16497,16497,  129,  129,  129,  115,  120,
      119,  129,  129,  129,  129,  116,  117,  116,  117,  116,
      116,  116,  117,  116,  117,  118,  119,  129,  142,  143,
      142, 8331,16520,16521,16522,16523,  142, 8328, 8331, 8328,
     8331, 8330, 8330,  142,   89,   87,  108,  107,  103,  103,

      105,  102,  102,  103,   93,   92,   93,   99,   94,  100,
       95,   96,   99,   99,   99,   99,    8,    8,   17,    9,
       18,   18,    3,    3,   24,   21,   21,    4,    5,    6,
        7,    6,    7,   10,   10,   78,   81,   84,   74,16497,
      129,  129,  122,  129,  116,  118,  118,  127,  129,  126,
      134,  142, 8328, 8331, 8329, 8330,  141,  142,  140,  107,
       99,   99,   99,   99,    8,   36,    6,    7,   78,   83,
       85,   85,  111,16497,  129,  129,  121,  121,  129,  127,
      117,  127,  129,  126,  142, 8328, 8331, 8329,  141,  141,
      142,  140,  107,   99,   99,   99,   99,   64,   82,   71,

      146,  111,16497,  112,  114,  123,  129,  129,  125,  127,
     8328, 8331,  141,  107,   97,   99,   99,   99,   99,   99,
       99,    2,    2,   27, 8305,  128,  129,  132,  107,   99,
       99,   99,   99,   99,   25,  133,  107,   99,   99,   99,
       99,   99,   69,  135,  107,   98,   99,   99,   99,   99,
       99,  107,   99,   99,  124,  107,   99,   99,  107,   99,
       99,  107,  107,  107,  107,  107,  107,  107
    } ;

static const flex_int16_t yy_accept[728] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    7,    8,   10,   11,   13,
       17,   19,   21,   22,   24,   27,   29,   32,   34,   35,
       39,   41,   43,   46,   48,   52,   55,   58,   60,   62,
       65,   67,   69,   73,   76,   81,   83,   85,   88,   91,
       93,   96,   98,  101,  103,  105,  108,  111,  113,  116,

      118,  122,  125,  128,  131,  134,  136,  138,  140,  143,
      147,  149,  150,  152,  155,  156,  158,  161,  162,  163,
      165,  168,  169,  172,  174,  179,  181,  184,  187,  190,
      192,  196,  199,  201,  204,  206,  208,  211,  214,  217,
      220,  223,  226,  229,  231,  233,  235,  238,  240,  242,
      244,  246,  249,  251,  254,  257,  259,  263,  265,  267,
      270,  272,  274,  277,  279,  281,  284,  286,  289,  291,
      295,  297,  299,  301,  303,  305,  308,  315,  318,  320,
      322,  324,  327,  330,  332,  334,  336,  339,  341,  345,
      347,  349,  351,  353,  356,  358,  360,  361,  363,  365,

      366,  369,  372,  374,  378,  380,  382,  384,  387,  387,
      387,  387,  388,  389,  389,  390,  390,  390,  390,  391,
      391,  392,  393,  394,  395,  395,  396,  397,  397,  397,
      398,  399,  400,  401,  401,  401,  402,  403,  404,  406,
      406,  407,  408,  409,  410,  412,  413,  414,  414,  415,
      416,  417,  418,  419,  420,  420,  421,  422,  422,  423,
      424,  425,  425,  426,  427,  428,  430,  432,  432,  433,
      434,  435,  435,  436,  437,  438,  439,  441,  442,  443,
      443,  444,  445,  446,  446,  446,  446,  447,  448,  448,
      448,  448,  449,  450,  450,  450,  450,  451,  452,  453,

      454,  455,  455,  455,  456,  457,  458,  459,  459,  460,
      461,  462,  463,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  465,  465,  465,  466,
      466,  468,  470,  471,  472,  474,  476,  478,  479,  479,
      480,  481,  481,  481,  481,  482,  487,  488,  488,  490,
      492,  493,  494,  494,  495,  495,  496,  497,  498,  498,
      499,  500,  501,  501,  502,  503,  505,  505,  506,  506,
      508,  509,  510,  511,  512,  513,  514,  515,  516,  517,
      517,  518,  519,  520,  521,  522,  523,  523,  524,  525,
      526,  527,  528,  528,  528,  528,  530,  532,  534,  534,

      535,  536,  536,  536,  537,  537,  537,  538,  538,  538,
      539,  539,  539,  540,  540,  540,  540,  540,  540,  541,
      542,  543,  543,  543,  543,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  545,  546,  547,  547,  547,
      547,  548,  548,  550,  551,  551,  551,  551,  552,  553,
      555,  556,  557,  557,  559,  560,  560,  561,  562,  563,
      564,  565,  566,  566,  566,  567,  569,  569,  569,  570,
      570,  571,  571,  571,  572,  573,  573,  573,  573,  574,
      575,  576,  577,  578,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  580,  580,  581,

      582,  584,  585,  585,  585,  585,  586,  588,  589,  590,
      592,  593,  593,  594,  595,  596,  597,  598,  598,  598,
      599,  599,  599,  599,  600,  600,  600,  600,  601,  602,
      602,  603,  603,  604,  606,  608,  609,  609,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      613,  614,  614,  615,  617,  618,  619,  620,  621,  622,
      623,  624,  625,  625,  625,  626,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      630,  631,  632,  633,  634,  635,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      638,  639,  640,  641,  642,  643,  643,  644,  644,  644,
      644,  644,  644,  644,  644,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  646,  648,  649,  650,  651,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  653,  654,  655,  655,  655,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  657,  658,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  660,

      661,  662,  662,  662,  662,  662,  663,  663,  663,  663,
      664,  664,  664,  664,  665,  665,  665,  666,  666,  666,
      667,  667,  667,  668,  668,  669,  669
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,   11,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   20,   21,    1,   22,
        1,   23,   24,   25,   26,   26,   27,   28,   29,   30,
       26,   26,   26,   26,   26,   31,   26,   26,   32,   33,
       26,   34,   26,   26,   35,   26,   26,   26,   26,   26,
       36,   37,   38,    1,   26,   39,   40,   41,   42,   43,

       44,   45,   26,   46,   47,   26,   48,   49,   50,   51,
       52,   53,   26,   54,   55,   56,   57,   58,   26,   59,
       60,   26,   61,   62,   63,   64,    1,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    2,    3,    4,    2,    1,    5,    5,    6,    1,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
        1,   15,    1,    1,   16,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,    1,   18,   19,   20,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       21,    1,    5,   22,   23
    } ;

static const flex_int16_t yy_base[818] =
    {   0,
     3154, 3153,    0,    3,    6,    8,   11,   19,   28,   88,
       34,   39,   44,   49,   22,   65,   70,   75,  148,  208,
       15,   59,   51,   63,   79,   81,   84,  111,  113,  115,
      268,  330,   12,   57,  119,  130,  137,  154,  392,  455,
      517,  580,  159,  161,  132,  166,  178,  185,  190,  197,
      214,  221, 3156, 3159, 3159, 3138, 3159,  238, 3159, 3151,
       87,   22,  143, 3159,  200, 3159, 3150, 3159,  202, 3149,
     3141, 3159,  227, 3159, 3147, 3159, 3125, 3134,  185, 3159,
      640, 3084,  245, 3159, 3143, 3135, 3159, 3159, 3159,   20,
     3159, 3159, 3159, 3123,  216, 3159, 3159, 3159, 3159, 3159,

     3140, 3159, 3159, 3159, 3159,  699, 3079, 3159, 3159, 3138,
     3159,  253, 3159,  256,  258, 3159,  260,  262,  264, 3159,
      274,  277,    0, 3159, 3137, 3122,   63,    0,  286, 3159,
        0, 3159,   94, 3101,  114, 3159, 3103, 3129,   15, 3159,
      293,  311,  172,  346, 3159, 3159, 3159, 3128, 3131,  306,
      310, 3130,  169,    0,  282, 3159,    0,  219,  269,  320,
      738, 3159,  364,  797,  322, 3093, 3067,    0, 3159,    0,
     3159, 3113,  340, 3112,  256,  369,  422, 3089, 3063, 3159,
     3159, 3159, 3159, 3109,  342,    0,    0, 3159,    0, 3118,
        0,  370, 3159,    0, 3107,  362,   67, 3159,  289,  321,

        0,  396,  408,  416, 3106, 3159,  363,  388,  385,  401,
      438, 3159,  412,  434, 3159,  419, 3070,  441, 3159,  446,
     3159,  448, 3159, 3159,  450, 3159,  459,  461,  465, 3159,
     3159, 3159, 3159, 3098,  168, 3159, 3159, 3159, 3159, 3057,
     3159,  471, 3159, 3116, 3159, 3159, 3159, 3097, 3159, 3159,
     3159, 3159, 3159, 3159, 3054, 3159, 3159,  475, 3159,  478,
     3159,  480, 3159,  484, 3159, 3159,  486,  492, 3159,  494,
     3159,  496,    0, 3159,  499, 3159,    0,    0,  506,  380,
     3082, 3108,   75,  504, 3103, 3095,  208,  511, 3100,  541,
      454,  530,  505,  545,  498, 3104, 3159, 3107,  551,  569,

      311,  571, 3092,  327,    0,  555,  537,  552, 3159, 3159,
     3159,  336, 3056,    0, 3055, 3054,  587, 3049, 3055, 3063,
      352, 3046, 3045, 3056, 3049,  590,  561, 3081, 3058, 3032,
     3159,  596,    0, 3159, 3056, 3030,  601, 3054, 3028,    0,
     3159,  583, 3040,  611,  625,  629, 3051, 3025,  653,  667,
        0, 3159, 3049, 3048, 3017, 3159, 3159,    0, 3065, 3058,
        0,  677, 3041, 3159, 3159,    0,  488, 3159,  515, 3159,
        0,  681, 3159, 3159, 3159, 2997, 2997, 2993, 2991,  526,
     3159,  605, 3159,  610, 3159, 3023, 2966, 3159, 3009, 3159,
     3159, 3000,  568, 2981, 2958, 3159, 3159,  618,  692, 3159,

     2986,  700, 2969, 3159, 2962,  648, 3159, 2952,  708, 3159,
     2943, 2944, 3159,  268,  620,  479,  634,  644,  625,  507,
     2907,  862, 2900,  631, 3159, 2884, 2880, 2864, 2860, 2868,
     2859, 2857, 2834, 2832,  725,  709,  726,  727, 2835, 2826,
      736, 2850, 2819, 2787,  648,  654, 2799, 3159,  926,  930,
      741,    0, 2796, 2789, 2755, 2811, 2805, 2762, 2753, 2742,
     2728, 3159, 2712,  684, 3159, 3159,  746, 2761, 3159,  698,
     3159,  753, 2752, 3159,  553, 2747, 2728, 2721,  934,  769,
     2713, 2683, 3159,    0,    0, 2682, 2679,    0, 2663, 2653,
     2662, 2638, 2629, 2620, 2626, 2606,  936,  626, 2618, 3159,

     2612, 2580,  706,  725,  953,  763,  958,  943, 2596, 2589,
     2557, 2605, 2604, 2561,  910, 2541, 2553,  695, 2552, 3159,
     2555, 2548,  971, 3159,  764, 2538, 2531, 2536, 3159,  976,
     3159, 2473,  977,  777,    0, 2506, 2468, 3159, 2461, 2462,
     2438, 2445, 2439, 2427, 2434, 2416, 2421,  732, 2428, 2398,
     2392, 2380, 2384, 2390,  909, 2358, 2355, 2354, 2341,  984,
     2337, 2361, 2352,    0, 2306, 2303, 2300, 2297, 2300, 3159,
     2319, 2290, 2294, 2279, 3159,    0, 2219, 2202, 2184, 2178,
     2172, 2171, 2157, 2155, 2161, 2186, 3159, 2165,  717, 2157,
     2158, 2148, 2151, 2159, 2155, 2150, 2144, 2148, 2189, 2182,

     2137, 2126, 2097, 2089, 2072, 3159, 2057, 2053, 2018, 2011,
     2019, 2007, 1960, 1953, 1955, 1949, 1935, 3159, 1945, 1932,
        0, 1918, 1888, 1895, 1885, 1884, 1893, 1881, 1925, 1923,
     1885, 1871, 1884, 1883, 1871, 1903, 3159, 1862, 1852, 1862,
     1860, 1857, 1852, 1847, 3159, 1843, 1847, 1830, 1835, 1832,
     1836, 1779, 1804, 1800,    0, 1758, 1759, 1748, 1746, 1782,
     1737, 1726,    0, 1732, 1717, 1707, 1635, 1620, 1615, 1590,
     1574, 1014, 1013,  965,  962, 1005,  967, 3159,  967,  965,
      969,  957,  946,  945,  957,  933,  985,  984,  945,  937,
      958,  907,  903,  894,  902,  894,  892,  930,  923,  880,

      745,  778,  701,  673,  717,  708,  669,  626,  631,  604,
      581,  520,  498,  459,  435,  424,  395,  348,  315,  311,
      294,  160,  131,   32, 3159, 3159, 1022, 1045, 1068, 1091,
     1114, 1137, 1160, 1183, 1206, 1229, 1252, 1275, 1298, 1321,
     1344, 1367, 1390, 1413, 1436, 1459, 1482, 1505, 1528, 1551,
     1574, 1597, 1620, 1643, 1666, 1689, 1712, 1735, 1758, 1781,
     1804, 1827, 1850, 1873, 1896, 1918, 1941, 1964, 1987, 2010,
     2033, 2056, 2079, 2102, 2125, 2148, 2171,  960, 2189, 2212,
     2235, 2258, 2281, 2304, 2327, 2350, 2373, 2396, 2419, 2442,
     2465, 2488, 2511, 2534, 2557, 2580, 2603, 2626, 2649, 2672,

     2695, 2718, 2741, 2764, 2787, 2810, 2833, 2856, 2879, 2902,
     2925, 2948, 2971, 2994, 3017, 3040, 3063
    } ;

static const flex_int16_t yy_def[818] =
    {   0,
      727,  727,  727,  728,  729,  729,  727,  730,  731,  731,
      732,  732,  732,  732,  733,  733,  733,  733,  734,  734,
      735,  735,  736,  736,  737,  737,  738,  738,  739,  739,
      740,  740,  727,  727,  741,  741,  742,  742,  743,  743,
      744,  744,  745,  745,  746,  746,  747,  747,  748,  748,
      749,  749,  726,  726,  726,  726,  726,  750,  726,  726,
      726,  726,  751,  726,  751,  726,  726,  726,  752,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  753,  726,
      726,  754,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  755,  726,  726,  726,
      726,  756,  726,  756,  757,  726,  757,  757,  758,  726,
      758,  758,  759,  726,  759,  726,  759,  760,  760,  726,
      760,  726,  726,  761,  726,  726,  760,  760,  760,  726,
      726,  760,  726,  726,  726,  726,  726,  762,  763,  763,
      726,  763,  763,  764,  764,  726,  764,  726,  726,  764,
      726,  726,  764,  726,  726,  764,  726,  765,  726,  765,
      726,  726,  726,  726,  726,  765,  766,  765,  726,  726,
      726,  726,  726,  726,  726,  767,  768,  726,  768,  769,
      770,  770,  726,  770,  726,  770,  771,  726,  771,  771,

      772,  726,  726,  726,  726,  726,  726,  772,  773,  750,
      750,  726,  750,  750,  726,  726,  726,  726,  726,  751,
      726,  751,  726,  726,  752,  726,  752,  726,  726,  726,
      726,  726,  726,  753,  753,  726,  726,  726,  726,  754,
      726,  726,  726,  726,  726,  726,  726,  774,  726,  726,
      726,  726,  726,  726,  755,  726,  726,  756,  726,  756,
      726,  757,  726,  757,  726,  726,  757,  758,  726,  758,
      726,  758,  759,  726,  726,  726,  759,  760,  760,  726,
      760,  760,  760,  726,  775,  776,  726,  726,  777,  726,
      726,  760,  726,  726,  726,  762,  726,  763,  726,  763,

      763,  726,  726,  763,  764,  764,  764,  726,  726,  726,
      726,  764,  764,  778,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  764,  164,  726,  764,  726,
      726,  726,  164,  726,  726,  726,  726,  764,  726,  765,
      726,  726,  726,  726,  765,  766,  765,  726,  726,  726,
      779,  726,  726,  765,  726,  726,  726,  768,  780,  780,
      770,  770,  726,  726,  726,  770,  771,  726,  771,  726,
      772,  726,  726,  726,  726,  772,  772,  772,  772,  773,
      726,  773,  726,  750,  726,  726,  726,  726,  726,  726,
      726,  726,  753,  774,  726,  726,  726,  758,  726,  726,

      726,  726,  781,  726,  726,  726,  726,  782,  726,  726,
      783,  784,  726,  726,  726,  726,  726,  726,  763,  764,
      764,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  764,  164,  726,  726,  726,  726,
      726,  785,  764,  726,  726,  726,  726,  726,  765,  726,
      726,  779,  726,  765,  726,  786,  786,  772,  772,  772,
      772,  726,  726,  753,  726,  726,  726,  787,  726,  726,
      726,  726,  726,  726,  726,  788,  726,  726,  726,  763,
      764,  764,  726,  422,  422,  726,  726,  789,  726,  726,
      726,  726,  726,  726,  726,  726,  764,  726,  726,  726,

      764,  726,  726,  726,  726,  765,  726,  726,  726,  765,
      726,  790,  790,  772,  772,  772,  772,  726,  753,  726,
      726,  726,  726,  726,  726,  782,  791,  726,  726,  726,
      726,  726,  763,  726,  764,  764,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  792,  792,  772,  772,  772,  772,  772,  772,  726,
      726,  726,  793,  726,  726,  764,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  794,  794,

      772,  772,  772,  772,  772,  726,  795,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      796,  726,  726,  726,  726,  726,  726,  726,  797,  797,
      772,  772,  772,  772,  772,  798,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  799,  799,  772,  772,  772,  772,  772,  800,
      726,  726,  801,  726,  726,  726,  726,  726,  726,  726,
      726,  802,  802,  772,  772,  803,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  804,  804,  772,  772,
      805,  726,  726,  726,  726,  726,  726,  806,  806,  772,

      772,  807,  726,  726,  808,  808,  809,  726,  810,  810,
      811,  726,  812,  812,  813,  814,  814,  815,  816,  816,
      817,  726,  726,  726,  726,    0,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726
    } ;

static const flex_int16_t yy_nxt[3225] =
    {   0,
      726,  726,  726,   55,   58,   59,   60,   58,   64,   65,
       64,   65,   61,   66,   67,   55,   56,  109,  110,   62,
       69,   66,   70,   69,   54,   93,  246,  111,   71,   73,
       74,   75,   73,  281,   76,  219,   54,   88,  209,   77,
       89,   54,   88,  413,   78,   89,   54,   88,  282,   79,
       91,   54,   88,  113,  114,   91,  247,   94,   95,   96,
       55,  109,  110,   80,   81,  113,  114,   54,   93,  368,
       90,  111,   54,   93,  144,   90,  276,   54,   93,  277,
       90,  116,  117,  116,  117,   90,  120,  121,   82,   83,
       84,   85,   83,  281,   76,  284,  216,   86,  284,   77,

       94,   95,   96,  369,   78,   94,   95,   97,  282,   79,
       94,   95,   97,  120,  121,  124,  125,  124,  125,  144,
      122,  146,  147,   80,   81,  148,  126,  287,  126,  127,
      288,  127,  146,  147,  188,  189,  148,  725,  150,  151,
      152,  150,  217,  118,  190,  221,  222,  218,   82,   99,
      100,  101,   99,  153,  102,  150,  151,  152,  150,  103,
      104,  181,  182,  181,  182,  183,  725,  183,  188,  189,
      153,  299,  184,  284,  184,  185,  284,  185,  190,  192,
      193,  194,  192,  105,  106,  304,  192,  193,  194,  192,
      236,  195,  198,  199,  196,  186,  393,  186,  195,  198,

      199,  196,  223,  222,  226,  227,  235,  236,  107,   99,
      100,  101,   99,  407,  102,  202,  203,  204,  202,  103,
      104,  408,  202,  203,  204,  202,  200,  205,  229,  206,
      207,  229,  308,  200,  205,  309,  206,  207,  208,  211,
      212,  213,  211,  105,  106,  208,  242,  243,  244,  242,
      208,  249,  250,  251,  214,  259,  260,  208,  261,  260,
      263,  264,  265,  264,  266,  267,  269,  270,  107,  129,
      130,  131,  129,  477,  132,  133,  271,  270,  134,  269,
      270,  477,  310,  306,  135,  311,  306,  279,  230,  136,
      279,  368,  136,  280,  290,  290,  290,  290,  137,  343,

      344,  138,  137,  307,  136,  413,  230,  300,  299,  291,
      300,  302,  292,  299,  302,  292,  281,  723,  293,  282,
      281,  723,  301,  370,  139,  369,  303,  304,  140,  299,
      141,  142,  130,  131,  142,  310,  132,  143,  337,  272,
      134,  281,  283,  419,  282,  281,  135,  294,  294,  294,
      294,  136,  312,  341,  136,  356,  341,  369,  356,  413,
      137,  313,  295,  138,  137,  326,  136,  283,  326,  420,
      345,  362,  312,  345,  362,  365,  374,  327,  366,  375,
      328,  284,  346,  363,  284,  307,  139,  381,  382,  420,
      140,  429,  141,  155,  156,  157,  155,  372,  372,  372,

      372,  720,  329,  212,  213,  158,  430,  347,  159,  372,
      372,  372,  372,  160,  383,  213,  161,  372,  372,  372,
      372,  385,  386,  349,  350,  350,  349,  330,  161,  376,
      720,  377,  348,  352,  378,  346,  212,  213,  341,  211,
      212,  213,  211,  388,  389,  379,  413,  384,  221,  222,
      223,  222,  226,  227,  214,  162,  163,  156,  157,  163,
      353,  390,  227,  391,  392,  717,  229,  414,  164,  229,
      415,  165,  242,  243,  244,  242,  160,  259,  260,  161,
      261,  260,  263,  264,  478,  348,  265,  264,  396,  264,
      368,  161,  478,  166,  269,  270,  271,  270,  397,  398,

      399,  400,  401,  399,  717,  284,  284,  279,  284,  284,
      279,  416,  409,  280,  417,  409,  410,  370,  167,  169,
      170,  402,  402,  402,  369,  171,  230,  411,  381,  382,
      172,  292,  230,  173,  292,  481,  281,  293,  174,  282,
      281,  175,  290,  290,  290,  290,  294,  294,  294,  294,
      481,  369,  302,  175,  171,  302,  306,  291,  407,  306,
      281,  295,  283,  282,  281,  308,  526,  303,  309,  312,
      300,  299,  302,  300,  436,  302,  307,  726,  313,  621,
      171,  176,  169,  170,  176,  301,  283,  303,  171,  312,
      236,  435,  413,  177,  435,  425,  173,  438,  425,  464,

      438,  174,  441,  327,  175,  441,  328,  462,  382,  445,
      714,  307,  212,  213,  442,  446,  175,  171,  178,  448,
      466,  270,  425,  448,  445,  477,  449,  299,  329,  449,
      349,  350,  350,  349,  439,  446,  477,  714,  346,  478,
      352,  480,  346,  179,  237,  726,  237,  425,  448,  479,
      478,  237,  238,  330,  450,  350,  350,  450,  469,  330,
      479,  237,  238,  347,  439,  470,  451,  353,  350,  350,
      350,  350,  487,  448,  712,  237,  239,  238,  362,  503,
      413,  362,  372,  372,  372,  372,  488,  504,  348,  330,
      363,  353,  348,  399,  400,  401,  399,  570,  571,  503,

      237,  467,  238,  253,  467,  253,  236,  504,  404,  409,
      253,  254,  409,  519,  710,  522,  348,  402,  402,  402,
      253,  254,  436,  710,  473,  726,  497,  441,  498,  497,
      441,  498,  621,  548,  253,  253,  254,  441,  327,  442,
      441,  328,  508,  508,  508,  508,  307,  467,  548,  442,
      467,  708,  520,  549,  523,  524,  523,  523,  620,  253,
      586,  254,  314,  329,  506,  439,  472,  506,  549,  407,
      533,  534,  621,  533,  314,  586,  346,  526,  302,  315,
      316,  302,  317,  318,  319,  480,  320,  321,  330,  413,
      330,  322,  323,  303,  655,  324,  325,  331,  332,  331,

      331,  332,  331,  331,  331,  331,  331,  331,  331,  331,
      333,  331,  331,  309,  334,  334,  334,  331,  331,  331,
      331,  331,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  331,  331,  331,  335,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  331,  331,  331,
      336,  331,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  483,  483,  483,  483,  483,  483,  483,  483,  485,
      485,  485,  483,  483,  483,  483,  483,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  483,  483,  483,

      483,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  483,  483,  483,  483,  484,  506,  655,  706,
      506,  507,  350,  350,  507,  530,  706,  497,  530,  346,
      497,  621,  704,  451,  508,  508,  508,  508,  593,  327,
      621,  565,  328,  621,  703,  531,  566,  307,  532,  560,
      350,  350,  560,  594,  347,  422,  488,  567,  353,  413,
      532,  451,  523,  524,  523,  523,  422,  530,  533,  534,
      530,  533,  422,  701,  700,  560,  350,  350,  560,  348,
      699,  699,  621,  348,  550,  551,  353,  451,  552,  553,

      532,  554,  555,  697,  621,  621,  556,  696,  695,  557,
      558,  559,  532,  694,  693,  692,  413,  690,  689,  688,
      688,  348,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      234,  234,  686,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  240,  240,  685,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  684,  240,  240,  255,  255,  683,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  682,  255,  255,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  273,  273,
      681,  273,  273,  273,  273,  273,  273,  680,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  278,  278,  679,  278,  488,  278,  677,  278,  278,
      278,  278,  278,  413,  278,  564,  564,  278,  675,  278,

      278,  674,  278,  278,  285,  285,  673,  285,  285,  285,
      673,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  296,  296,  671,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  305,  305,  670,  305,  305,  305,  305,
      305,  305,  669,  305,  305,  668,  305,  305,  667,  305,
      666,  305,  305,  305,  665,  305,  340,  340,  664,  340,

      340,  488,  340,  340,  340,  663,  340,  340,  662,  340,
      488,  488,  340,  661,  413,  340,  340,  659,  340,  351,
      351,  351,  658,  351,  657,  351,  656,  351,  655,  654,
      351,  654,  652,  651,  351,  650,  649,  351,  648,  351,
      351,  357,  357,  647,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  358,  358,  646,  358,  358,  358,
      358,  358,  644,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  359,  621,  359,
      359,  359,  359,  359,  488,  643,  359,  359,  359,  359,

      359,  359,  359,  359,  642,  359,  359,  359,  359,  359,
      361,  361,  488,  361,  361,  361,  361,  361,  361,  488,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  371,  641,  640,  639,
      371,  371,  371,  371,  371,  638,  371,  637,  413,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  403,  403,  635,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  634,  403,  403,  403,  403,  403,  405,  405,
      633,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  412,  632,  412,  412,  412,  412,  412,  412,  631,
      412,  412,  412,  412,  412,  412,  412,  412,  630,  412,
      412,  412,  412,  412,  452,  630,  628,  627,  621,  626,

      621,  625,  452,  624,  623,  452,  622,  619,  618,  617,
      616,  452,  456,  615,  456,  456,  456,  456,  456,  614,
      613,  456,  456,  456,  456,  456,  456,  456,  456,  612,
      456,  456,  456,  456,  456,  468,  468,  611,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  610,  468,  468,  468,  468,  468,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      609,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  608,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  476,  413,  476,  476,  476,  476,
      476,  476,  606,  476,  476,  476,  476,  476,  476,  476,
      476,  570,  476,  476,  476,  476,  476,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  605,
      604,  500,  500,  603,  500,  500,  500,  500,  500,  500,
      512,  602,  512,  512,  512,  512,  512,  601,  600,  512,
      512,  512,  512,  512,  512,  512,  512,  600,  512,  512,
      512,  512,  512,  521,  521,  561,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      598,  521,  521,  521,  521,  521,  527,  597,  527,  527,

      527,  527,  527,  527,  596,  527,  527,  527,  527,  527,
      527,  527,  527,  595,  527,  527,  527,  527,  527,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  592,
      538,  538,  591,  538,  538,  590,  538,  538,  538,  538,
      538,  538,  562,  589,  562,  562,  562,  562,  562,  588,
      587,  562,  562,  562,  562,  562,  562,  562,  562,  547,
      562,  562,  562,  562,  562,  573,  585,  573,  573,  573,
      573,  573,  573,  584,  573,  573,  573,  573,  573,  573,
      573,  573,  583,  573,  573,  573,  573,  573,  599,  582,
      599,  599,  599,  599,  599,  581,  580,  599,  599,  599,

      599,  599,  599,  599,  599,  579,  599,  599,  599,  599,
      599,  607,  578,  607,  607,  607,  607,  607,  607,  577,
      607,  607,  607,  607,  607,  607,  607,  607,  576,  607,
      607,  607,  607,  607,  629,  575,  629,  629,  629,  629,
      629,  574,  413,  629,  629,  629,  629,  629,  629,  629,
      629,  726,  629,  629,  629,  629,  629,  636,  404,  636,
      636,  636,  636,  636,  636,  404,  636,  636,  636,  636,
      636,  636,  636,  636,  572,  636,  636,  636,  636,  636,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  569,  645,  645,  568,  645,  645,  645,

      645,  645,  645,  653,  564,  653,  653,  653,  653,  653,
      563,  563,  653,  653,  653,  653,  653,  653,  653,  653,
      511,  653,  653,  653,  653,  653,  660,  510,  660,  660,
      660,  660,  660,  660,  561,  660,  660,  660,  660,  660,
      660,  660,  660,  502,  660,  660,  660,  660,  660,  672,
      501,  672,  672,  672,  672,  672,  547,  546,  672,  672,
      672,  672,  672,  672,  672,  672,  545,  672,  672,  672,
      672,  672,  676,  544,  676,  676,  676,  676,  676,  676,
      543,  676,  676,  676,  676,  676,  676,  676,  676,  542,
      676,  676,  676,  676,  676,  678,  678,  678,  678,  678,

      678,  678,  678,  678,  678,  541,  678,  678,  540,  678,
      678,  539,  678,  678,  678,  678,  678,  678,  687,  537,
      687,  687,  687,  687,  687,  488,  536,  687,  687,  687,
      687,  687,  687,  687,  687,  535,  687,  687,  687,  687,
      687,  691,  529,  691,  691,  691,  691,  691,  691,  528,
      691,  691,  691,  691,  691,  691,  691,  691,  413,  691,
      691,  691,  691,  691,  698,  525,  698,  698,  698,  698,
      698,  404,  518,  698,  698,  698,  698,  698,  698,  698,
      698,  517,  698,  698,  698,  698,  698,  702,  516,  702,
      702,  702,  702,  702,  702,  515,  702,  702,  702,  702,

      702,  702,  702,  702,  514,  702,  702,  702,  702,  702,
      705,  513,  705,  705,  705,  705,  705,  513,  511,  705,
      705,  705,  705,  705,  705,  705,  705,  510,  705,  705,
      705,  705,  705,  707,  509,  707,  707,  707,  707,  707,
      707,  505,  707,  707,  707,  707,  707,  707,  707,  707,
      502,  707,  707,  707,  707,  707,  709,  501,  709,  709,
      709,  709,  709,  442,  499,  709,  709,  709,  709,  709,
      709,  709,  709,  440,  709,  709,  709,  709,  709,  711,
      496,  711,  711,  711,  711,  711,  711,  495,  711,  711,
      711,  711,  711,  711,  711,  711,  494,  711,  711,  711,

      711,  711,  713,  493,  713,  713,  713,  713,  713,  488,
      492,  713,  713,  713,  713,  713,  713,  713,  713,  491,
      713,  713,  713,  713,  713,  715,  490,  715,  715,  715,
      715,  715,  715,  489,  715,  715,  715,  715,  715,  715,
      715,  715,  486,  715,  715,  715,  715,  715,  716,  482,
      716,  716,  716,  716,  716,  413,  475,  716,  716,  716,
      716,  716,  716,  716,  716,  472,  716,  716,  716,  716,
      716,  718,  404,  718,  718,  718,  718,  718,  718,  404,
      718,  718,  718,  718,  718,  718,  718,  718,  400,  718,
      718,  718,  718,  718,  719,  465,  719,  719,  719,  719,

      719,  395,  391,  719,  719,  719,  719,  719,  719,  719,
      719,  388,  719,  719,  719,  719,  719,  721,  463,  721,
      721,  721,  721,  721,  721,  385,  721,  721,  721,  721,
      721,  721,  721,  721,  461,  721,  721,  721,  721,  721,
      722,  460,  722,  722,  722,  722,  722,  459,  458,  722,
      722,  722,  722,  722,  722,  722,  722,  364,  722,  722,
      722,  722,  722,  724,  457,  724,  724,  724,  724,  724,
      724,  457,  724,  724,  724,  724,  724,  724,  724,  724,
      455,  724,  724,  724,  724,  724,  454,  453,  355,  354,
      447,  444,  443,  339,  440,  339,  338,  437,  434,  433,

      432,  431,  428,  427,  426,  424,  423,  421,  418,  299,
      297,  413,  406,  404,  289,  282,  256,  395,  243,  241,
      236,  387,  373,  364,  360,  356,  355,  354,  342,  341,
      339,  338,  299,  299,  297,  289,  282,  286,  275,  274,
      257,  256,  252,  248,  228,  245,  241,  233,  232,  231,
      228,  224,  224,  215,  209,  726,   55,   55,   53,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726
    } ;

static const flex_int16_t yy_chk[3225] =
    {   0,
        0,    0,    0,    3,    4,    4,    4,    4,    5,    5,
        6,    6,    4,    7,    7,   33,    3,   21,   21,    4,
        8,    8,    8,    8,   15,   15,   90,   21,    8,    9,
        9,    9,    9,  139,    9,   62,   11,   11,   62,    9,
       11,   12,   12,  724,    9,   12,   13,   13,  139,    9,
       13,   14,   14,   23,   23,   14,   90,   15,   15,   15,
       34,   22,   22,    9,    9,   24,   24,   16,   16,  197,
       11,   22,   17,   17,   33,   12,  127,   18,   18,  127,
       13,   25,   25,   26,   26,   14,   27,   27,    9,   10,
       10,   10,   10,  283,   10,  133,   61,   10,  133,   10,

       16,   16,   16,  197,   10,   17,   17,   17,  283,   10,
       18,   18,   18,   28,   28,   29,   29,   30,   30,   34,
       28,   35,   35,   10,   10,   35,   29,  135,   30,   29,
      135,   30,   36,   36,   45,   45,   36,  723,   37,   37,
       37,   37,   61,   26,   45,   63,   63,   61,   10,   19,
       19,   19,   19,   37,   19,   38,   38,   38,   38,   19,
       19,   43,   43,   44,   44,   43,  722,   44,   46,   46,
       38,  153,   43,  143,   44,   43,  143,   44,   46,   47,
       47,   47,   47,   19,   19,  153,   48,   48,   48,   48,
      235,   47,   49,   49,   47,   43,  235,   44,   48,   50,

       50,   48,   65,   65,   69,   69,   79,   79,   19,   20,
       20,   20,   20,  287,   20,   51,   51,   51,   51,   20,
       20,  287,   52,   52,   52,   52,   49,   51,   73,   51,
       51,   73,  158,   50,   52,  158,   52,   52,   51,   58,
       58,   58,   58,   20,   20,   52,   83,   83,   83,   83,
       51,   95,   95,   95,   58,  112,  112,   52,  114,  114,
      115,  115,  117,  117,  118,  118,  119,  119,   20,   31,
       31,   31,   31,  414,   31,   31,  121,  121,   31,  122,
      122,  414,  159,  155,   31,  159,  155,  129,   73,   31,
      129,  199,   31,  129,  141,  141,  141,  141,   31,  175,

      175,   31,   31,  155,   31,  721,   83,  150,  150,  141,
      150,  151,  142,  301,  151,  142,  129,  720,  142,  129,
      129,  719,  150,  200,   31,  199,  151,  301,   31,  304,
       31,   32,   32,   32,   32,  165,   32,   32,  165,  122,
       32,  142,  129,  304,  142,  142,   32,  144,  144,  144,
      144,   32,  160,  173,   32,  185,  173,  200,  185,  718,
       32,  160,  144,   32,   32,  163,   32,  142,  163,  312,
      176,  192,  160,  176,  192,  196,  207,  163,  196,  207,
      163,  280,  176,  192,  280,  163,   32,  209,  209,  312,
       32,  321,   32,   39,   39,   39,   39,  202,  202,  202,

      202,  717,  163,  210,  210,   39,  321,  176,   39,  203,
      203,  203,  203,   39,  213,  213,   39,  204,  204,  204,
      204,  216,  216,  177,  177,  177,  177,  163,   39,  208,
      716,  208,  176,  177,  208,  177,  214,  214,  177,  211,
      211,  211,  211,  218,  218,  208,  715,  214,  220,  220,
      222,  222,  225,  225,  211,   39,   40,   40,   40,   40,
      177,  227,  227,  228,  228,  714,  229,  291,   40,  229,
      291,   40,  242,  242,  242,  242,   40,  258,  258,   40,
      260,  260,  262,  262,  416,  177,  264,  264,  267,  267,
      367,   40,  416,   40,  268,  268,  270,  270,  272,  272,

      275,  275,  275,  275,  713,  284,  293,  279,  284,  293,
      279,  295,  288,  279,  295,  288,  288,  369,   40,   41,
       41,  284,  284,  284,  367,   41,  229,  288,  380,  380,
       41,  292,  242,   41,  292,  420,  279,  292,   41,  279,
      279,   41,  290,  290,  290,  290,  294,  294,  294,  294,
      420,  369,  299,   41,   41,  299,  306,  290,  475,  306,
      292,  294,  279,  292,  292,  308,  475,  299,  308,  307,
      300,  300,  302,  300,  327,  302,  306,  327,  307,  712,
       41,   42,   42,   42,   42,  300,  292,  302,   42,  307,
      393,  326,  711,   42,  326,  317,   42,  332,  317,  393,

      332,   42,  337,  326,   42,  337,  326,  382,  382,  342,
      710,  326,  384,  384,  337,  342,   42,   42,   42,  344,
      398,  398,  317,  344,  342,  415,  345,  419,  326,  345,
      346,  346,  346,  346,  332,  342,  415,  709,  345,  417,
      346,  419,  346,   42,   81,  346,   81,  317,  344,  418,
      417,   81,   81,  326,  349,  349,  349,  349,  406,  332,
      418,   81,   81,  345,  498,  406,  349,  346,  350,  350,
      350,  350,  424,  344,  708,   81,   81,   81,  362,  445,
      707,  362,  372,  372,  372,  372,  424,  446,  345,  498,
      362,  349,  346,  399,  399,  399,  399,  518,  518,  445,

       81,  402,   81,  106,  402,  106,  464,  446,  470,  409,
      106,  106,  409,  464,  706,  470,  349,  402,  402,  402,
      106,  106,  436,  705,  409,  436,  435,  437,  438,  435,
      437,  438,  704,  503,  106,  106,  106,  441,  435,  437,
      441,  435,  451,  451,  451,  451,  435,  467,  503,  441,
      467,  703,  467,  504,  472,  472,  472,  472,  589,  106,
      548,  106,  161,  435,  506,  438,  472,  506,  504,  525,
      480,  480,  589,  480,  161,  548,  506,  525,  534,  161,
      161,  534,  161,  161,  161,  480,  161,  161,  435,  702,
      438,  161,  161,  534,  701,  161,  161,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  449,  700,  699,
      449,  450,  450,  450,  450,  479,  698,  497,  479,  449,
      497,  697,  696,  450,  508,  508,  508,  508,  555,  497,
      695,  515,  497,  694,  693,  479,  515,  497,  479,  507,
      507,  507,  507,  555,  449,  778,  692,  515,  450,  691,
      479,  507,  523,  523,  523,  523,  778,  530,  533,  533,
      530,  533,  778,  690,  689,  560,  560,  560,  560,  449,
      688,  687,  686,  450,  505,  505,  507,  560,  505,  505,

      530,  505,  505,  685,  684,  683,  505,  682,  681,  505,
      505,  505,  530,  680,  679,  677,  676,  675,  674,  673,
      672,  507,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      753,  753,  671,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  754,  754,  670,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  669,  754,  754,  755,  755,  668,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  667,  755,  755,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  759,  759,
      666,  759,  759,  759,  759,  759,  759,  665,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  760,  760,  664,  760,  662,  760,  661,  760,  760,
      760,  760,  760,  660,  760,  659,  658,  760,  657,  760,

      760,  656,  760,  760,  761,  761,  654,  761,  761,  761,
      653,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  652,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  764,  764,  651,  764,  764,  764,  764,
      764,  764,  650,  764,  764,  649,  764,  764,  648,  764,
      647,  764,  764,  764,  646,  764,  765,  765,  644,  765,

      765,  643,  765,  765,  765,  642,  765,  765,  641,  765,
      640,  639,  765,  638,  636,  765,  765,  635,  765,  766,
      766,  766,  634,  766,  633,  766,  632,  766,  631,  630,
      766,  629,  628,  627,  766,  626,  625,  766,  624,  766,
      766,  767,  767,  623,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  768,  768,  622,  768,  768,  768,
      768,  768,  620,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  769,  619,  769,
      769,  769,  769,  769,  617,  616,  769,  769,  769,  769,

      769,  769,  769,  769,  615,  769,  769,  769,  769,  769,
      770,  770,  614,  770,  770,  770,  770,  770,  770,  613,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  772,  612,  611,  610,
      772,  772,  772,  772,  772,  609,  772,  608,  607,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  775,  775,  605,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  604,  775,  775,  775,  775,  775,  776,  776,
      603,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  777,  602,  777,  777,  777,  777,  777,  777,  601,
      777,  777,  777,  777,  777,  777,  777,  777,  600,  777,
      777,  777,  777,  777,  779,  599,  598,  597,  596,  595,

      594,  593,  779,  592,  591,  779,  590,  588,  586,  585,
      584,  779,  780,  583,  780,  780,  780,  780,  780,  582,
      581,  780,  780,  780,  780,  780,  780,  780,  780,  580,
      780,  780,  780,  780,  780,  781,  781,  579,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  578,  781,  781,  781,  781,  781,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      577,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  574,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  784,  573,  784,  784,  784,  784,
      784,  784,  572,  784,  784,  784,  784,  784,  784,  784,
      784,  571,  784,  784,  784,  784,  784,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  569,
      568,  785,  785,  567,  785,  785,  785,  785,  785,  785,
      786,  566,  786,  786,  786,  786,  786,  565,  563,  786,
      786,  786,  786,  786,  786,  786,  786,  562,  786,  786,
      786,  786,  786,  787,  787,  561,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      559,  787,  787,  787,  787,  787,  788,  558,  788,  788,

      788,  788,  788,  788,  557,  788,  788,  788,  788,  788,
      788,  788,  788,  556,  788,  788,  788,  788,  788,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  554,
      789,  789,  553,  789,  789,  552,  789,  789,  789,  789,
      789,  789,  790,  551,  790,  790,  790,  790,  790,  550,
      549,  790,  790,  790,  790,  790,  790,  790,  790,  547,
      790,  790,  790,  790,  790,  791,  546,  791,  791,  791,
      791,  791,  791,  545,  791,  791,  791,  791,  791,  791,
      791,  791,  544,  791,  791,  791,  791,  791,  792,  543,
      792,  792,  792,  792,  792,  542,  541,  792,  792,  792,

      792,  792,  792,  792,  792,  540,  792,  792,  792,  792,
      792,  793,  539,  793,  793,  793,  793,  793,  793,  537,
      793,  793,  793,  793,  793,  793,  793,  793,  536,  793,
      793,  793,  793,  793,  794,  532,  794,  794,  794,  794,
      794,  528,  527,  794,  794,  794,  794,  794,  794,  794,
      794,  526,  794,  794,  794,  794,  794,  795,  522,  795,
      795,  795,  795,  795,  795,  521,  795,  795,  795,  795,
      795,  795,  795,  795,  519,  795,  795,  795,  795,  795,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  517,  796,  796,  516,  796,  796,  796,

      796,  796,  796,  797,  514,  797,  797,  797,  797,  797,
      513,  512,  797,  797,  797,  797,  797,  797,  797,  797,
      511,  797,  797,  797,  797,  797,  798,  510,  798,  798,
      798,  798,  798,  798,  509,  798,  798,  798,  798,  798,
      798,  798,  798,  502,  798,  798,  798,  798,  798,  799,
      501,  799,  799,  799,  799,  799,  499,  496,  799,  799,
      799,  799,  799,  799,  799,  799,  495,  799,  799,  799,
      799,  799,  800,  494,  800,  800,  800,  800,  800,  800,
      493,  800,  800,  800,  800,  800,  800,  800,  800,  492,
      800,  800,  800,  800,  800,  801,  801,  801,  801,  801,

      801,  801,  801,  801,  801,  491,  801,  801,  490,  801,
      801,  489,  801,  801,  801,  801,  801,  801,  802,  487,
      802,  802,  802,  802,  802,  486,  482,  802,  802,  802,
      802,  802,  802,  802,  802,  481,  802,  802,  802,  802,
      802,  803,  478,  803,  803,  803,  803,  803,  803,  477,
      803,  803,  803,  803,  803,  803,  803,  803,  476,  803,
      803,  803,  803,  803,  804,  473,  804,  804,  804,  804,
      804,  468,  463,  804,  804,  804,  804,  804,  804,  804,
      804,  461,  804,  804,  804,  804,  804,  805,  460,  805,
      805,  805,  805,  805,  805,  459,  805,  805,  805,  805,

      805,  805,  805,  805,  458,  805,  805,  805,  805,  805,
      806,  457,  806,  806,  806,  806,  806,  456,  455,  806,
      806,  806,  806,  806,  806,  806,  806,  454,  806,  806,
      806,  806,  806,  807,  453,  807,  807,  807,  807,  807,
      807,  447,  807,  807,  807,  807,  807,  807,  807,  807,
      444,  807,  807,  807,  807,  807,  808,  443,  808,  808,
      808,  808,  808,  442,  440,  808,  808,  808,  808,  808,
      808,  808,  808,  439,  808,  808,  808,  808,  808,  809,
      434,  809,  809,  809,  809,  809,  809,  433,  809,  809,
      809,  809,  809,  809,  809,  809,  432,  809,  809,  809,

      809,  809,  810,  431,  810,  810,  810,  810,  810,  430,
      429,  810,  810,  810,  810,  810,  810,  810,  810,  428,
      810,  810,  810,  810,  810,  811,  427,  811,  811,  811,
      811,  811,  811,  426,  811,  811,  811,  811,  811,  811,
      811,  811,  423,  811,  811,  811,  811,  811,  812,  421,
      812,  812,  812,  812,  812,  412,  411,  812,  812,  812,
      812,  812,  812,  812,  812,  408,  812,  812,  812,  812,
      812,  813,  405,  813,  813,  813,  813,  813,  813,  403,
      813,  813,  813,  813,  813,  813,  813,  813,  401,  813,
      813,  813,  813,  813,  814,  395,  814,  814,  814,  814,

      814,  394,  392,  814,  814,  814,  814,  814,  814,  814,
      814,  389,  814,  814,  814,  814,  814,  815,  387,  815,
      815,  815,  815,  815,  815,  386,  815,  815,  815,  815,
      815,  815,  815,  815,  379,  815,  815,  815,  815,  815,
      816,  378,  816,  816,  816,  816,  816,  377,  376,  816,
      816,  816,  816,  816,  816,  816,  816,  363,  816,  816,
      816,  816,  816,  817,  360,  817,  817,  817,  817,  817,
      817,  359,  817,  817,  817,  817,  817,  817,  817,  817,
      355,  817,  817,  817,  817,  817,  354,  353,  348,  347,
      343,  339,  338,  336,  335,  330,  329,  328,  325,  324,

      323,  322,  320,  319,  318,  316,  315,  313,  303,  298,
      296,  289,  286,  285,  282,  281,  255,  248,  244,  240,
      234,  217,  205,  195,  190,  184,  179,  178,  174,  172,
      167,  166,  152,  149,  148,  138,  137,  134,  126,  125,
      110,  107,  101,   94,   86,   85,   82,   78,   77,   75,
       71,   70,   67,   60,   56,   53,    2,    1,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2021 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 30 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"

#include <memory>
#include <stdio.h>

#include "config.h"
#include "doxygen.h"
#include "outputgen.h"
#include "outputlist.h"
#include "code.h"
#include "lexcode.h"
#include "filedef.h"
#include "message.h"
#include "debug.h"
#include "searchindex.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

struct lexcodeYY_state
{
     OutputCodeList *code;
     CCodeParser ccodeParser;
     const char   *inputString;     //!< the code fragment as text
     int           inputPosition;   //!< read offset during parsing
     int           inputLines;      //!< number of line in the code fragment
     QCString      fileName;
     int           yyLineNr;        //!< current line number
     bool          insideCodeLine = false;

     bool          lineNumbers = FALSE;
     const Definition   *searchCtx;
     bool          collectXRefs = FALSE;

     int           lastContext = 0;
     int           lastCContext = 0;
     int           lastStringContext = 0;
     int           docBlockContext  = 0;
     int           lastPreLineCtrlContext = 0;
     int           lastRawStringContext = 0;
     int           curlyCount = 0;

     QCString      rulesPatternBuffer;
     QCString      CCodeBuffer;
     int           startCCodeLine = -1;
     int           roundCount = 0;
     bool          insideCode = FALSE;
     QCString      delimiter;
     QCString      docBlockName;
     uint32_t      fencedSize = 0;
     bool          nestedComment = false;

     bool          exampleBlock;
     QCString      exampleName;
     QCString      classScope;

     std::unique_ptr<FileDef> exampleFileDef;
     const FileDef    *sourceFileDef;
     const Definition *currentDefinition;
     const MemberDef  *currentMemberDef;
     bool          includeCodeFragment;
     const char   *currentFontClass;
};

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

static void setCurrentDoc(yyscan_t yyscanner,const QCString &anchor);
static void startCodeLine(yyscan_t yyscanner);
static void endFontClass(yyscan_t yyscanner);
static void endCodeLine(yyscan_t yyscanner);
static void nextCodeLine(yyscan_t yyscanner);
static void codifyLines(yyscan_t yyscanner,const QCString &text);
static void startFontClass(yyscan_t yyscanner,const char *s);
static int countLines(yyscan_t yyscanner);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);
static void lineCount(yyscan_t yyscanner);
static void handleCCode(yyscan_t yyscanner);

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1798 "/home/vsc/github/doxygen/Debug/generated_src/lexcode_intermediate.cpp"
#line 154 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
  /* no comment start / end signs inside square brackets */
  // C start comment
  // C end comment
  // Cpp comment
  // doxygen start comment
  // Optional any character
  // Optional all but newline

























#line 1832 "/home/vsc/github/doxygen/Debug/generated_src/lexcode_intermediate.cpp"

#define INITIAL 0
#define DefSection 1
#define DefSectionLine 2
#define RulesSectionInit 3
#define RulesPattern 4
#define RulesDouble 5
#define RulesRoundDouble 6
#define RulesSquare 7
#define RulesRoundSquare 8
#define RulesRound 9
#define RulesRoundQuest 10
#define UserSection 11
#define TopSection 12
#define LiteralSection 13
#define COMMENT 14
#define SkipCurly 15
#define SkipCurlyEndDoc 16
#define PreLineCtrl 17
#define DocLine 18
#define DocBlock 19
#define DocCopyBlock 20
#define SkipString 21
#define RawString 22
#define SkipComment 23
#define SkipCxxComment 24
#define Comment 25

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct lexcodeYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 199 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"


#line 2138 "/home/vsc/github/doxygen/Debug/generated_src/lexcode_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 727 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 726 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 201 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 202 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           yyextra->lastContext = YY_START;
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           BEGIN (TopSection);
                         }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 209 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           yyextra->lastContext = YY_START;
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           BEGIN (LiteralSection);
                         }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 216 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           BEGIN( yyextra->lastContext ) ;
                         }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 221 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                           yyextra->yyLineNr++;
                         }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 225 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           BEGIN( yyextra->lastContext ) ;
                         }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 230 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                           yyextra->yyLineNr++;
                         }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 234 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                           yyextra->yyLineNr++;
                         }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 238 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(COMMENT);
                         }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 243 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer+=yytext;
                           yyextra->yyLineNr++;
                           handleCCode(yyscanner);
                           BEGIN(yyextra->lastContext);
                         }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 249 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer+=yytext;
                           handleCCode(yyscanner);
                           BEGIN(yyextra->lastContext);
                         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 254 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                         }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 257 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                         }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 260 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                           yyextra->yyLineNr++;
                         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 264 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                         }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 267 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                         }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 272 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->CCodeBuffer += yytext;
                           yyextra->yyLineNr++;
                         }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 276 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           BEGIN (RulesSectionInit);
                         }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 282 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           BEGIN(DefSectionLine);
                         }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 287 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           codifyLines(yyscanner,yytext);
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           BEGIN(DefSection);
                         }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 292 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           codifyLines(yyscanner,yytext);
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           BEGIN (UserSection);
                         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 298 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           handleCCode(yyscanner);
                           unput(*yytext);
                           BEGIN(RulesPattern);
                         }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 303 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                         }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 307 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                         }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 311 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 314 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 317 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 320 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 323 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesDouble);
                        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 328 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 331 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 334 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN( yyextra->lastContext ) ;
                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 338 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN(RulesRound) ;
                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 342 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 345 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesSquare);
                        }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 350 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 37:
#line 354 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
case 38:
YY_RULE_SETUP
#line 354 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 357 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN(RulesPattern) ;
                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 361 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN(RulesRound) ;
                        }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 365 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 368 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 371 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesRoundQuest);
                         }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 376 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           if (!yyextra->rulesPatternBuffer.isEmpty())
                           {
                             startFontClass(yyscanner,"stringliteral");
                             codifyLines(yyscanner,yyextra->rulesPatternBuffer.data());
                             yyextra->rulesPatternBuffer.resize(0);
                             endFontClass(yyscanner);
                           }
                         }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 386 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 389 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN(yyextra->lastContext);
                         }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 393 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->roundCount++;
                           yyextra->rulesPatternBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesRound);
                        }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 399 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 402 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN(RulesRoundSquare);
                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 406 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           BEGIN(RulesRoundDouble);
                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 410 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 413 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->roundCount++;
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 417 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->roundCount--;
                           yyextra->rulesPatternBuffer += yytext;
                           if (!yyextra->roundCount) BEGIN( yyextra->lastContext ) ;
                        }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 422 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                           yyextra->yyLineNr++;
                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 426 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 429 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 432 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           if (!yyextra->rulesPatternBuffer.isEmpty())
                           {
                             startFontClass(yyscanner,"stringliteral");
                             codifyLines(yyscanner,yyextra->rulesPatternBuffer);
                             yyextra->rulesPatternBuffer.resize(0);
                             endFontClass(yyscanner);
                           }
                           codifyLines(yyscanner,yytext);
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           yyextra->curlyCount = 0;
                           BEGIN(SkipCurly);
                         }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 445 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           codifyLines(yyscanner,"\n");
                         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 448 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           codifyLines(yyscanner,yytext);
                         }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 451 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           unput(*yytext);
                           if (!yyextra->rulesPatternBuffer.isEmpty())
                           {
                             startFontClass(yyscanner,"stringliteral");
                             codifyLines(yyscanner,yyextra->rulesPatternBuffer);
                             yyextra->rulesPatternBuffer.resize(0);
                             endFontClass(yyscanner);
                           }
                           yyextra->startCCodeLine=yyextra->yyLineNr;
                           yyextra->curlyCount = 0;
                           BEGIN(SkipCurly);
                         }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 464 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 467 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           if (!yyextra->rulesPatternBuffer.isEmpty())
                           {
                             startFontClass(yyscanner,"stringliteral");
                             codifyLines(yyscanner,yyextra->rulesPatternBuffer);
                             yyextra->rulesPatternBuffer.resize(0);
                             endFontClass(yyscanner);
                           }
                           yyextra->CCodeBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(COMMENT);
                         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 479 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                           yyextra->rulesPatternBuffer += yytext;
                         }
	YY_BREAK
case 64:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 482 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ /* line control directive */
                            yyextra->CCodeBuffer += yytext;
                            yyextra->lastPreLineCtrlContext = YY_START;
                            BEGIN( PreLineCtrl );
                          }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 487 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 490 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 493 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                            BEGIN( yyextra->lastPreLineCtrlContext );
                          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 498 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                                          ++yyextra->curlyCount ;
                          }
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 503 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 503 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            lineCount(yyscanner);
                            if( yyextra->curlyCount )
                            {
                              --yyextra->curlyCount ;
                            }
                          }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 511 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            lineCount(yyscanner);
                            if ( yyextra->curlyCount )
                            {
                              --yyextra->curlyCount ;
                            }
                            else
                            {
                              yyextra->docBlockContext   = SkipCurlyEndDoc;
                              if (yytext[yyleng-3]=='/')
                              {
                                BEGIN( DocLine );
                              }
                              else
                              {
                                BEGIN( DocBlock );
                              }
                            }
                          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 531 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->lastStringContext=SkipCurly;
                            BEGIN( SkipString );
                          }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 536 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->lastPreLineCtrlContext = YY_START;
                            BEGIN( PreLineCtrl );
                          }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 541 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            QCString raw=QCString(yytext).stripWhiteSpace();
                            yyextra->delimiter = raw.mid(2);
                            yyextra->delimiter=yyextra->delimiter.left(yyextra->delimiter.length()-1);
                            yyextra->lastRawStringContext = YY_START;
                            yyextra->CCodeBuffer += yytext;
                            BEGIN(RawString);
                          }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 549 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 552 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->lastCContext = YY_START;
                            BEGIN(SkipComment);
                          }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 557 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->lastCContext = YY_START;
                            BEGIN(SkipCxxComment);
                          }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 562 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 565 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 568 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 571 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocBlock );
                          }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 576 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            bool javadocBanner = Config_getBool(JAVADOC_BANNER);
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                            if( javadocBanner )
                            {
                              yyextra->docBlockContext   = YY_START;
                              BEGIN( DocBlock );
                            }
                            else
                            {
                              BEGIN( Comment ) ;
                            }
                          }
	YY_BREAK
case 83:
/* rule 83 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocBlock );
                          }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 595 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocLine );
                          }
	YY_BREAK
case 85:
/* rule 85 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 600 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocLine );
                          }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 606 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                            if (yyextra->curlyCount<=0)
                            {
                              handleCCode(yyscanner);
                              BEGIN(RulesPattern);
                            }
                          }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 615 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                             yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 618 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                             yyextra->CCodeBuffer += yytext;
                             BEGIN( yyextra->lastStringContext );
                          }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 622 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                             yyextra->CCodeBuffer += yytext;
                           }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 625 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                          }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 629 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 632 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{  // line continuation
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                          }
	YY_BREAK
case 93:
/* rule 93 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 636 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            BEGIN( yyextra->lastCContext ) ;
                          }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 640 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext ;
                            lineCount(yyscanner);
                          }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 644 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ yyextra->CCodeBuffer += yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 645 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ yyextra->CCodeBuffer += yytext ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 646 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->insideCode=TRUE;
                            yyextra->CCodeBuffer += yytext ;
                          }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 650 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->insideCode=FALSE;
                            yyextra->CCodeBuffer += yytext ;
                          }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 654 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ yyextra->CCodeBuffer += yytext ; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 655 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext ;
                            if (!yyextra->insideCode) BEGIN( yyextra->lastContext ) ;
                          }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 659 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ yyextra->CCodeBuffer += *yytext ; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 661 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 664 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 667 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                          }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 671 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            BEGIN( yyextra->lastCContext );
                          }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 675 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 678 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            QCString delimiter = yytext+1;
                            delimiter=delimiter.left(delimiter.length()-1);
                            if (delimiter==yyextra->delimiter)
                            {
                              BEGIN(yyextra->lastRawStringContext);
                            }
                          }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 687 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 690 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 693 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                          }
	YY_BREAK
/* ---- Single line comments ------ */
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 700 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // continuation of multiline C++-style comment
                            yyextra->CCodeBuffer += yytext;
                            lineCount(yyscanner);
                          }
	YY_BREAK
case 112:
/* rule 112 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 704 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // ignore marker line (see bug700345)
                            yyextra->CCodeBuffer += yytext;
                            BEGIN( yyextra->docBlockContext );
                          }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 708 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // next line is an end group marker, see bug 752712
                            yyextra->CCodeBuffer += yytext;
                            BEGIN( yyextra->docBlockContext );
                          }
	YY_BREAK
case 114:
/* rule 114 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 712 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // whole line
                            yyextra->CCodeBuffer += yytext;
                            BEGIN( yyextra->docBlockContext );
                          }
	YY_BREAK
/* ---- Comments blocks ------ */
case 115:
YY_RULE_SETUP
#line 719 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // end of comment block
                            yyextra->CCodeBuffer += yytext;
                          BEGIN(yyextra->docBlockContext);
                                        }
	YY_BREAK
case 116:
/* rule 116 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 723 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 726 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // start of a comment line
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 729 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // strip embedded C++ comments if at the start of a line
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 732 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // slashes in the middle of a comment block
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 735 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // start of a new comment in the
                            // middle of a comment block
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 739 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // escaped command
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 742 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockName=&yytext[1];
                            if (yyextra->docBlockName.at(1)=='[')
                            {
                              yyextra->docBlockName.at(1)=']';
                            }
                            if (yyextra->docBlockName.at(1)=='{')
                            {
                              yyextra->docBlockName.at(1)='}';
                            }
                            if (yyextra->docBlockName.at(1)=='(')
                            {
                              yyextra->docBlockName.at(1)=')';
                            }
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 761 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockName="<pre>";
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 768 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // verbatim type command (which could contain nested comments!)
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockName="uml";
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 125:
/* rule 125 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 775 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // verbatim command (which could contain nested comments!)
                            yyextra->CCodeBuffer += yytext;
                            yyextra->docBlockName=&yytext[1];
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 782 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            yyextra->docBlockName="~~~";
                            yyextra->fencedSize=pat.stripWhiteSpace().length();
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 790 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            yyextra->docBlockName="```";
                            yyextra->fencedSize=pat.stripWhiteSpace().length();
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 798 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            REJECT;
                          }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 801 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // any character that isn't special
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 804 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // newline
                            yyextra->CCodeBuffer += yytext;
                            lineCount(yyscanner);
                          }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 808 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // command block
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 132:
YY_RULE_SETUP
#line 813 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // end of a <pre> block
                            yyextra->CCodeBuffer += yytext;
                            if (yyextra->docBlockName=="<pre>")
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 820 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // end of a <code> block
                            yyextra->CCodeBuffer += yytext;
                            if (yyextra->docBlockName=="<code>")
                            {
                                            BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 827 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            if (yyextra->docBlockName==&yytext[1])
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 834 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // end of verbatim block
                            yyextra->CCodeBuffer += yytext;
                            if (&yytext[4]==yyextra->docBlockName)
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 841 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // start of a comment line
                            yyextra->CCodeBuffer += yytext;
                            if ((yyextra->docBlockName=="verbatim") || (yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              REJECT;
                            }
                            else
                            {
                              yyextra->CCodeBuffer += yytext;
                            }
                          }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 852 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // start of a comment line with two *'s
                            if ((yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              yyextra->CCodeBuffer += yytext;
                            }
                            else
                            {
                              REJECT;
                            }
                          }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 862 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // Assume *var or *(... is part of source code (see bug723516)
                            if ((yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              yyextra->CCodeBuffer += yytext;
                            }
                            else
                            {
                              REJECT;
                            }
                          }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 872 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // start of a comment line with one *
                            if ((yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              if (yyextra->nestedComment) // keep * it is part of the code
                              {
                                yyextra->CCodeBuffer += yytext;
                              }
                              else // remove * it is part of the comment block
                              {
                            yyextra->CCodeBuffer += yytext;
                              }
                            }
                            else
                            {
                              REJECT;
                            }
                          }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 889 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            if (yyextra->fencedSize==pat.stripWhiteSpace().length())
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 897 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            if (yyextra->fencedSize==pat.stripWhiteSpace().length())
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 905 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // any character that is not special
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 908 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            if (yytext[1]=='*')
                            {
                              yyextra->nestedComment=TRUE;
                            }
                            else if (yytext[0]=='*')
                            {
                              yyextra->nestedComment=FALSE;
                            }
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 919 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // newline
                            yyextra->CCodeBuffer += yytext;
                            lineCount(yyscanner);
                          }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 923 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // any other character
                            yyextra->CCodeBuffer += yytext;
                          }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 926 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{ // desc is followed by another one
                            yyextra->docBlockContext   = SkipCurlyEndDoc;
                            yyextra->CCodeBuffer += yytext;
                            if (yytext[yyleng-3]=='/')
                            {
                              BEGIN( DocLine );
                            }
                            else
                            {
                              BEGIN( DocBlock );
                            }
                          }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 938 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            BEGIN(SkipCurly);
                          }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 943 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            yyextra->CCodeBuffer += yytext;
                            yyextra->yyLineNr++;
                          }
	YY_BREAK
/*
<*>.  { fprintf(stderr,"Lex code scanner Def rule for %s: #%s#\n",stateToString(YY_START),yytext);}
<*>{nl}  { fprintf(stderr,"Lex code scanner Def rule for newline %s: #%s#\n",stateToString(YY_START),yytext); yyextra->yyLineNr++;}
 */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DefSection):
case YY_STATE_EOF(DefSectionLine):
case YY_STATE_EOF(RulesSectionInit):
case YY_STATE_EOF(RulesPattern):
case YY_STATE_EOF(RulesDouble):
case YY_STATE_EOF(RulesRoundDouble):
case YY_STATE_EOF(RulesSquare):
case YY_STATE_EOF(RulesRoundSquare):
case YY_STATE_EOF(RulesRound):
case YY_STATE_EOF(RulesRoundQuest):
case YY_STATE_EOF(UserSection):
case YY_STATE_EOF(TopSection):
case YY_STATE_EOF(LiteralSection):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipCurlyEndDoc):
case YY_STATE_EOF(PreLineCtrl):
case YY_STATE_EOF(DocLine):
case YY_STATE_EOF(DocBlock):
case YY_STATE_EOF(DocCopyBlock):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(RawString):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(Comment):
#line 951 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
{
                            handleCCode(yyscanner);
                            yyterminate();
                          }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 955 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"
ECHO;
	YY_BREAK
#line 3693 "/home/vsc/github/doxygen/Debug/generated_src/lexcode_intermediate.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 727 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 727 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 726);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 955 "/home/vsc/github/doxygen/Debug/generated_src/lexcode.l"


static void setCurrentDoc(yyscan_t yyscanner,const QCString &anchor)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (Doxygen::searchIndex)
  {
    if (yyextra->searchCtx)
    {
      Doxygen::searchIndex->setCurrentDoc(yyextra->searchCtx,yyextra->searchCtx->anchor(),false);
    }
    else
    {
      Doxygen::searchIndex->setCurrentDoc(yyextra->sourceFileDef,anchor,true);
    }
  }
}

/*! start a new line of code, inserting a line number if yyextra->sourceFileDef
 * is true. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->sourceFileDef && yyextra->lineNumbers)
  {
    const Definition *d = yyextra->sourceFileDef->getSourceDefinition(yyextra->yyLineNr);

    if (!yyextra->includeCodeFragment && d)
    {
      yyextra->currentDefinition = d;
      yyextra->currentMemberDef = yyextra->sourceFileDef->getSourceMember(yyextra->yyLineNr);
      yyextra->classScope = d->name();
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",yyextra->yyLineNr);
      if (yyextra->currentMemberDef)
      {
        yyextra->code->writeLineNumber(yyextra->currentMemberDef->getReference(),
                            yyextra->currentMemberDef->getOutputFileBase(),
                            yyextra->currentMemberDef->anchor(),yyextra->yyLineNr,
                            !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
      else
      {
        yyextra->code->writeLineNumber(d->getReference(),
                            d->getOutputFileBase(),
                            QCString(),yyextra->yyLineNr,
                            !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
    }
    else
    {
      yyextra->code->writeLineNumber(QCString(),QCString(),QCString(),yyextra->yyLineNr,
                                     !yyextra->includeCodeFragment);
    }
  }

  yyextra->code->startCodeLine(yyextra->sourceFileDef && yyextra->lineNumbers);
  yyextra->insideCodeLine = true;

  if (yyextra->currentFontClass)
  {
    yyextra->code->startFontClass(yyextra->currentFontClass);
  }
}

static void endFontClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->currentFontClass)
  {
    yyextra->code->endFontClass();
    yyextra->currentFontClass=0;
  }
}

static void endCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endFontClass(yyscanner);
  yyextra->code->endCodeLine();
  yyextra->insideCodeLine = false;
}

static void nextCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *fc = yyextra->currentFontClass;
  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->yyLineNr<yyextra->inputLines)
  {
    yyextra->currentFontClass = fc;
    startCodeLine(yyscanner);
  }
}

static void codifyLines(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (text.isEmpty()) return;
  const char *p=text.data(),*sp=p;
  char c;
  bool done=false;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      yyextra->yyLineNr++;
      int l = (int)(p-sp-1);
      char *tmp = (char*)malloc(l+1);
      memcpy(tmp,sp,l);
      tmp[l]='\0';
      yyextra->code->codify(tmp);
      nextCodeLine(yyscanner);
      free(tmp);
    }
    else
    {
      yyextra->code->codify(sp);
      done=true;
    }
  }
  yyextra->startCCodeLine = yyextra->yyLineNr;
}

static void startFontClass(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endFontClass(yyscanner);
  if (!yyextra->currentFontClass || !s || strcmp(yyextra->currentFontClass,s))
  {
    endFontClass(yyscanner);
    yyextra->code->startFontClass(s);
    yyextra->currentFontClass=s;
  }
}

/*! counts the number of lines in the input */
static int countLines(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=yyextra->inputString;
  char c;
  int count=1;
  while ((c=*p))
  {
    p++ ;
    if (c=='\n') count++;
  }
  if (p>yyextra->inputString && *(p-1)!='\n')
  { // last line does not end with a \n, so we add an extra
    count++;
  }
  return count;
}

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int inputPosition = yyextra->inputPosition;
  const char *s = yyextra->inputString + inputPosition;
  int c=0;
  while( c < max_size && *s )
  {
    *buf++ = *s++;
    c++;
  }
  yyextra->inputPosition += c;
  return c;
}

static void lineCount(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p;
  for (p = yytext ; *p ; ++p )
  {
    if (*p=='\n')
    {
      yyextra->yyLineNr++;
    }
  }
}

static void handleCCode(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->CCodeBuffer.isEmpty()) return;

  yyextra->ccodeParser.setInsideCodeLine(yyextra->insideCodeLine);
  yyextra->ccodeParser.parseCode(*yyextra->code,
               yyextra->classScope,
               yyextra->CCodeBuffer,
               SrcLangExt_Cpp,
               yyextra->exampleBlock,
               yyextra->exampleName,
               yyextra->sourceFileDef,
               yyextra->startCCodeLine,
               -1, /* endLine will be calculated in called routine */
               yyextra->includeCodeFragment,
               yyextra->currentMemberDef,
               yyextra->lineNumbers,
               yyextra->searchCtx,
               yyextra->collectXRefs
              );
  yyextra->CCodeBuffer.resize(0);
  yyextra->insideCodeLine = yyextra->ccodeParser.insideCodeLine();
  yyextra->yyLineNr--;
  codifyLines(yyscanner,"\n");
}

// public interface -----------------------------------------------------------

struct LexCodeParser::Private
{
  yyscan_t yyscanner;
  lexcodeYY_state state;
};

LexCodeParser::LexCodeParser() : p(std::make_unique<Private>())
{
  lexcodeYYlex_init_extra(&p->state, &p->yyscanner);
#ifdef FLEX_DEBUG
  lexcodeYYset_debug(Debug::isFlagSet(Debug::Lex_lexcode)?1:0,p->yyscanner);
#endif
  resetCodeParserState();
}

LexCodeParser::~LexCodeParser()
{
  lexcodeYYlex_destroy(p->yyscanner);
}

void LexCodeParser::resetCodeParserState()
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->currentDefinition = 0;
  yyextra->currentMemberDef = 0;
}

void LexCodeParser::parseCode(OutputCodeList &codeOutIntf,
               const QCString &scopeName,
               const QCString &input,
               SrcLangExt,
               bool isExampleBlock,
               const QCString &exampleName,
               const FileDef *fileDef,
               int startLine,
               int endLine,
               bool inlineFragment,
               const MemberDef *memberDef,
               bool showLineNumbers,
               const Definition *searchCtx,
               bool collectXRefs
              )
{
  yyscan_t yyscanner = p->yyscanner;
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  if (input.isEmpty()) return;

  DebugLex debugLex(Debug::Lex_lexcode, __FILE__, fileDef ? qPrint(fileDef->fileName()): NULL);

  yyextra->code = &codeOutIntf;
  yyextra->inputString   = input.data();
  yyextra->inputPosition = 0;
  yyextra->fileName      = fileDef ? fileDef->fileName():"";
  yyextra->currentFontClass = 0;
  yyextra->insideCodeLine = false;

  yyextra->classScope=scopeName;
  yyextra->currentMemberDef=memberDef;
  yyextra->searchCtx=searchCtx;
  yyextra->collectXRefs=collectXRefs;

  if (startLine!=-1)
    yyextra->yyLineNr    = startLine;
  else
    yyextra->yyLineNr    = 1;

  if (endLine!=-1)
    yyextra->inputLines  = endLine+1;
  else
    yyextra->inputLines  = yyextra->yyLineNr + countLines(yyscanner) - 1;

  yyextra->startCCodeLine = yyextra->yyLineNr;
  yyextra->exampleBlock  = isExampleBlock;
  yyextra->exampleName   = exampleName;
  yyextra->sourceFileDef = fileDef;
  yyextra->lineNumbers   = fileDef!=0 && showLineNumbers;

  if (isExampleBlock && fileDef==0)
  {
    // create a dummy filedef for the example
    yyextra->exampleFileDef = createFileDef(QCString(),!exampleName.isEmpty() ? exampleName : QCString("generated"));
    yyextra->sourceFileDef = yyextra->exampleFileDef.get();
  }

  if (yyextra->sourceFileDef)
  {
    setCurrentDoc(yyscanner,"l00001");
  }

  yyextra->includeCodeFragment = inlineFragment;
  // Starts line 1 on the output
  startCodeLine(yyscanner);

  lexcodeYYrestart( 0, yyscanner );
  BEGIN( DefSection );
  lexcodeYYlex(yyscanner);

  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->exampleFileDef)
  {
    // delete the temporary file definition used for this example
    yyextra->exampleFileDef.reset();
    yyextra->sourceFileDef=0;
  }
}

//---------------------------------------------------------------------------------

#if USE_STATE2STRING
#include "lexcode.l.h"
#endif

