#line 1 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sqlcodeYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sqlcodeYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define sqlcodeYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sqlcodeYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sqlcodeYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sqlcodeYY_scan_buffer
#endif

#ifdef yy_scan_string
#define sqlcodeYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sqlcodeYY_scan_string
#endif

#ifdef yy_scan_bytes
#define sqlcodeYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sqlcodeYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define sqlcodeYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sqlcodeYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define sqlcodeYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sqlcodeYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sqlcodeYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sqlcodeYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sqlcodeYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sqlcodeYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sqlcodeYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sqlcodeYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define sqlcodeYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sqlcodeYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sqlcodeYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sqlcodeYYensure_buffer_stack
#endif

#ifdef yylex
#define sqlcodeYYlex_ALREADY_DEFINED
#else
#define yylex sqlcodeYYlex
#endif

#ifdef yyrestart
#define sqlcodeYYrestart_ALREADY_DEFINED
#else
#define yyrestart sqlcodeYYrestart
#endif

#ifdef yylex_init
#define sqlcodeYYlex_init_ALREADY_DEFINED
#else
#define yylex_init sqlcodeYYlex_init
#endif

#ifdef yylex_init_extra
#define sqlcodeYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sqlcodeYYlex_init_extra
#endif

#ifdef yylex_destroy
#define sqlcodeYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sqlcodeYYlex_destroy
#endif

#ifdef yyget_debug
#define sqlcodeYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug sqlcodeYYget_debug
#endif

#ifdef yyset_debug
#define sqlcodeYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug sqlcodeYYset_debug
#endif

#ifdef yyget_extra
#define sqlcodeYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra sqlcodeYYget_extra
#endif

#ifdef yyset_extra
#define sqlcodeYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra sqlcodeYYset_extra
#endif

#ifdef yyget_in
#define sqlcodeYYget_in_ALREADY_DEFINED
#else
#define yyget_in sqlcodeYYget_in
#endif

#ifdef yyset_in
#define sqlcodeYYset_in_ALREADY_DEFINED
#else
#define yyset_in sqlcodeYYset_in
#endif

#ifdef yyget_out
#define sqlcodeYYget_out_ALREADY_DEFINED
#else
#define yyget_out sqlcodeYYget_out
#endif

#ifdef yyset_out
#define sqlcodeYYset_out_ALREADY_DEFINED
#else
#define yyset_out sqlcodeYYset_out
#endif

#ifdef yyget_leng
#define sqlcodeYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng sqlcodeYYget_leng
#endif

#ifdef yyget_text
#define sqlcodeYYget_text_ALREADY_DEFINED
#else
#define yyget_text sqlcodeYYget_text
#endif

#ifdef yyget_lineno
#define sqlcodeYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sqlcodeYYget_lineno
#endif

#ifdef yyset_lineno
#define sqlcodeYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sqlcodeYYset_lineno
#endif

#ifdef yyget_column
#define sqlcodeYYget_column_ALREADY_DEFINED
#else
#define yyget_column sqlcodeYYget_column
#endif

#ifdef yyset_column
#define sqlcodeYYset_column_ALREADY_DEFINED
#else
#define yyset_column sqlcodeYYset_column
#endif

#ifdef yywrap
#define sqlcodeYYwrap_ALREADY_DEFINED
#else
#define yywrap sqlcodeYYwrap
#endif

#ifdef yyalloc
#define sqlcodeYYalloc_ALREADY_DEFINED
#else
#define yyalloc sqlcodeYYalloc
#endif

#ifdef yyrealloc
#define sqlcodeYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc sqlcodeYYrealloc
#endif

#ifdef yyfree
#define sqlcodeYYfree_ALREADY_DEFINED
#else
#define yyfree sqlcodeYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sqlcodeYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1117] =
    {   0,
       13,   13,    0,    0,   16,   14,   12,   12,   14,   14,
       11,   14,    1,   14,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,    8,    9,
        8,    8,   12,    0,    1,    0,    6,   11,    7,    1,
        5,   11,   11,   11,   11,    2,    2,   11,   11,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    3,   11,    2,    2,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,    2,   11,    2,   11,    2,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,    9,   10,    6,    6,    2,    2,   11,    2,
        2,    2,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    2,
       11,    4,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,    3,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    2,   11,   11,   11,   11,    2,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    4,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    2,   11,    2,   11,   11,   11,
        2,   11,   11,   11,    2,   11,   11,   11,   11,   11,
       11,   11,   11,    2,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,   11,   11,   11,   11,   11,    2,
       11,   11,   11,   11,    2,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    4,   11,    2,    2,   11,    3,    2,
        4,   11,    4,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    2,   11,   11,   11,    4,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    2,
       11,    2,   11,    3,   11,   11,   11,    2,   11,   11,
       11,   11,   11,   11,   11,    2,    2,    2,   11,   11,
       11,   11,   11,    2,    2,   11,   11,   11,   11,   11,

       11,   11,   11,    2,   11,    2,   11,   11,   11,   11,
        2,    2,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,    2,    1,   11,   11,
        2,    2,   11,   11,   11,    2,   11,   11,   11,   11,
       11,   11,   11,   11,    4,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    2,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    2,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,    2,    4,   11,   11,   11,
       11,    1,   11,   11,   11,   11,   11,   11,   11,    2,
       11,   11,   11,   11,   11,    2,   11,   11,   11,   11,

        2,    2,   11,    2,    4,   11,   11,   11,   11,    3,
       11,   11,   11,   11,   11,   11,   11,    2,    2,   11,
       11,   11,   11,   11,   11,   11,   11,    2,   11,   11,
        2,   11,   11,   11,   11,   11,    2,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        1,    2,   11,    4,   11,   11,   11,    2,    2,   11,
       11,   11,   11,    2,    2,    2,   11,   11,   11,   11,
       11,   11,    2,   11,   11,    2,    2,   11,    2,   11,
       11,   11,   11,    2,   11,   11,   11,    4,    4,   11,
       11,    2,    2,   11,   11,   11,   11,   11,   11,   11,

       11,    2,    2,   11,   11,   11,   11,   11,   11,   11,
        2,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,    2,   11,   11,   11,
       11,    2,   11,   11,   11,   11,    2,   11,   11,    2,
       11,   11,   11,   11,    2,    2,    2,   11,   11,   11,
       11,   11,    2,    3,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,    4,    4,   11,    2,   11,   11,
       11,    2,    2,   11,   11,   11,   11,    2,   11,    2,
       11,   11,   11,   11,    2,   11,   11,   11,   11,    4,
       11,   11,   11,    2,    2,   11,    2,   11,    2,   11,

       11,    2,   11,    2,   11,   11,   11,   11,    2,   11,
       11,   11,   11,   11,   11,   11,   11,    2,    2,    2,
       11,    2,   11,   11,   11,   11,   11,    2,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    2,    2,    2,   11,    2,   11,    2,
        2,    2,    2,   11,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,    2,   11,   11,   11,   11,   11,
       11,    2,   11,    2,    2,    2,   11,   11,   11,   11,
       11,   11,    2,    2,   11,   11,   11,   11,   11,    2,
        4,   11,   11,    2,    2,   11,   11,   11,    2,   11,

        4,    2,    2,   11,   11,   11,   11,    2,    2,   11,
        2,   11,    2,   11,   11,   11,   11,   11,   11,    4,
       11,   11,   11,   11,    2,    2,   11,   11,   11,   11,
        2,    4,   11,   11,   11,   11,   11,    2,    2,   11,
       11,   11,   11,   11,   11,    2,   11,   11,   11,    2,
        2,   11,   11,   11,   11,    2,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    2,    2,
        1,    4,    2,    2,   11,   11,   11,    2,    2,   11,
       11,   11,    2,   11,   11,    2,   11,   11,   11,    2,
       11,   11,    2,    2,    2,    2,    2,    2,   11,   11,

       11,   11,    2,   11,    2,   11,    2,    2,    2,    4,
        2,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,    2,    2,    2,   11,   11,   11,    4,    2,
       11,    2,   11,   11,   11,   11,   11,   11,    2,   11,
        2,    2,   11,   11,   11,   11,    4,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    2,    2,   11,
        2,    2,    2,    2,    2,    2,    2,    2,   11,   11,
        2,    2,   11,   11,   11,    2,    2,   11,   11,   11,
       11,   11,    2,   11,    4,   11,   11,   11,    2,    2,
       11,    2,   11,   11,   11,   11,   11,   11,   11,   11,

        2,   11,    2,   11,   11,    2,   11,   11,    2,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    2,
       11,    2,   11,   11,   11,   11,    2,    2,   11,   11,
        2,   11,   11,   11,    2,   11,    2,    2,    2,   11,
        2,   11,   11,   11,    2,    2,    2,   11,   11,    2,
        2,    2,   11,   11,   11,    2,   11,   11,    2,   11,
       11,   11,   11,    2,    2,   11,   11,   11,   11,    2,
       11,   11,   11,   11,    2,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    2,   11,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1,    1,    1,    5,    1,
        1,    6,    1,    1,    7,    1,    8,    9,    9,   10,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1,    1,    1,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
        1,    1,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,    1,    1,    1,    1,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    2,    1,    1,    1,    1,    3,    1,    3,    3,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1
    } ;

static const flex_int16_t yy_base[1124] =
    {   0,
        0,    0,   64,   66,  456, 2275, 2275,  437,  433,  430,
      394,  389,   64,    0,   60,  104,  156,  208,  260,  311,
       55,   68,  356,   50,    0,  113,  402,  450,  494,   67,
      116,  543,  595,  119,   65,   62,   70,  326, 2275, 2275,
      385,  338, 2275,  340, 2275,  308,  193,    0, 2275,   78,
        0,   80,  103,  128,  171,  167,   88,  100,  187,  120,
      124,  155,    0,  193,  168,  164,  217,  209,  209,  207,
      223,  640,  196,  197,  207,  211,  225,  254,  259,  261,
      262,  254,  248,  257,  261,  259,  282,  266,  261,  268,
      312,  293,  307,  312,    0,  305,  684,  306,  313,  316,

      365,  314,  328,  317,  354,  324,  337,  361,  357,  371,
      358,  368,  373,  390,    0,  388,  383,  400,  410,  396,
      415,  403,  420,  413,  731,  424,  434,  411,  418,  780,
      424,  438,  427,  437,  437,  458,  459,  455,  468,  470,
      464,    0,  502,  468,  540,  489,  485,  535,  504,  541,
      490,  235, 2275, 2275,    0,  622,    0,  542,  557,    0,
        0,    0,  564,  552,  554,  557,  590,  590,  577,  592,
      601,  603,  594,  599,  596,  633,  600,  617,  637,  630,
      608,  670,  626,  649,  635,  650,  656,  652,  662,    0,
      680,  684,  694,  692,  701,  705,  704,  709,  711,  698,

      717,  713,  715,  737,  289,  743,  741,  744,  730,  747,
      738,  755,  740,  761,  758,  761,  755,  763,  779,    0,
      784,  774,  770,  787,  793,  780,  787,  798,  795,  800,
      785,  786,  806,  807,  802,  802,  810,  813,  824,  831,
      816,  832,  839,  839,  843,  839,  840,  829,  844,  831,
      832,  845,  854,  842,    0,  853,    0,  847,  855,  843,
        0,  843,  856,  866,  878,  856,  888,  887,  878,  893,
      892,  900,  879,  897,  887,  901,  886,  888,  896,  905,
      902,  896,  914,  905,  904,  909,  920,  909,  918,    0,
      934,  932,  940,  945,  954,  936,  940,  944,  938,  948,

      947,  957,  954,  964,  959,  962,  966,  959,  964,  974,
      981,  986,  979,  984,  978, 1004,  994,  998,  991, 1009,
     1006,  997, 1013,  999,  994, 1001, 1008, 1013, 1008, 1013,
     1023, 1016, 1014,    0, 1028,    0, 1031, 1044,    0,    0,
     1050, 1041,    0, 1048, 1057, 1048, 1053, 1059, 1045, 1057,
     1062, 1048, 1050,    0, 1065, 1056, 1068,    0, 1062, 1062,
     1075, 1056, 1061, 1076, 1065, 1066, 1071, 1078, 1078,    0,
     1086,    0, 1100,    0, 1101, 1091, 1096, 1094, 1096, 1100,
     1114, 1112, 1116, 1102, 1114,    0,    0,    0, 1104, 1124,
     1107, 1112, 1115,    0,    0, 1110, 1127, 1132, 1118, 1117,

     1118, 1126, 1152,    0, 1140,    0, 1132, 1155, 1143, 1157,
        0,    0, 1157, 1164, 1168, 1169, 1160, 1156, 1171, 1166,
     1171, 1172, 1167, 1165, 1166, 1183,    0,    0, 1171, 1187,
        0,    0, 1173, 1174, 1173, 1183, 1185, 1198, 1204, 1213,
     1214, 1215, 1218, 1205,    0, 1208, 1209,  219, 1227, 1217,
     1212, 1220, 1212, 1231,    0, 1219, 1224, 1234, 1224, 1236,
     1234, 1235, 1233, 1234,    0, 1239, 1225, 1241, 1266, 1248,
     1260, 1253, 1272, 1273, 1275,    0, 1263, 1269, 1264, 1264,
     1278,    0, 1285, 1273, 1269, 1276, 1273, 1273, 1279,    0,
     1291, 1294, 1292, 1293, 1287, 1310, 1316, 1317, 1315, 1313,

     1322,    0, 1331,    0,    0, 1325, 1330, 1333, 1320,    0,
     1334, 1320, 1316, 1342, 1340, 1341, 1343,    0,    0, 1327,
     1337, 1332, 1350, 1336, 1342, 1338, 1355,    0, 1355, 1357,
        0, 1361, 1376, 1364, 1373, 1381,    0, 1379, 1376, 1376,
     1377, 1387, 1384, 1380, 1371, 1392, 1378, 1379, 1381, 1387,
        0,    0, 1387,    0, 1399, 1398, 1396,    0, 1401, 1404,
     1405, 1414, 1428,    0,    0,    0, 1411, 1411, 1431, 1420,
     1420, 1442,    0, 1443, 1431, 1426,    0, 1429,    0, 1444,
     1444, 1442, 1447,    0, 1434, 1440, 1454,    0,    0, 1450,
     1452,    0,    0, 1441, 1461, 1459, 1445, 1449, 1459, 1465,

     1480,    0,    0, 1466, 1485, 1517, 1475, 1476, 1483, 1493,
        0, 1499, 1485, 1487, 1491, 1497, 1502, 1487, 1493, 1499,
     1514, 1507, 1513, 1519, 1530, 1519,    0, 1535, 1527, 1524,
     1535,    0, 1530, 1536, 1543, 1542,    0, 1550, 1540,    0,
     1552, 1536, 1540, 1556,    0,    0, 1548, 1567, 1555, 1555,
     1571, 1551,    0,    0,  193, 1551, 1562, 1559, 1565, 1569,
     1570,    0, 1582, 1578,    0,    0, 1579,    0, 1593, 1582,
     1599,    0,    0, 1585, 1605, 1587, 1593,    0, 1590,    0,
     1608, 1601, 1609, 1595,    0, 1619, 1613, 1609, 1621,    0,
     1623, 1607, 1623,    0,    0, 1625,    0, 1633,    0, 1625,

     1628,    0, 1630,    0, 1625, 1645, 1627, 1643,    0, 1638,
     1653, 1658, 1651, 1655, 1651, 1657, 1656,    0,    0,    0,
     1662,    0, 1663, 1668, 1663, 1673, 1676,    0, 1662, 1660,
     1672, 1673, 1679, 1663, 1672, 1688, 1684, 1677, 1685, 1687,
      183, 1694, 1705,    0, 1693,    0, 1710,    0, 1705,    0,
        0,    0,    0, 1707, 1703, 1703, 1708, 1714, 1724, 1710,
     1717,    0, 1712, 1716,  151, 1734, 1722, 1724, 1741, 1729,
     1746,    0, 1738,    0,    0,    0, 1735, 1747, 1739, 1747,
     1759, 1764,    0,    0, 1747, 1763, 1761, 1753, 1746,    0,
        0, 1769, 1770,    0,    0, 1767, 1772, 1768,  140, 1783,

        0,    0,    0, 1780, 1772, 1783, 1769,    0,    0, 1787,
        0, 1780,    0, 1782, 1794, 1780, 1786, 1792, 1788,    0,
     1806, 1802, 1803, 1815,    0,    0, 1808, 1803, 1804, 1813,
        0,    0, 1808, 1808, 1824, 1815, 1816,    0,    0, 1819,
     1816, 1836, 1833, 1821, 1823,    0, 1829, 1835, 1821,    0,
        0, 1839, 1841, 1839,  136,    0, 1842, 1860, 1852, 1867,
     1865, 1866, 1867, 1857, 1866, 1875, 1874, 1863,    0,    0,
        0,    0,    0,    0, 1868, 1867, 1870,    0,    0, 1870,
     1884, 1893,    0, 1878, 1883,    0, 1884, 1922, 1880,    0,
     1895, 1906,    0,    0,    0,    0,    0,    0, 1909, 1899,

     1913, 1908,    0, 1915,    0, 1925,    0,    0,    0,    0,
        0, 1914, 1919, 1920, 1930, 1932, 1941, 1923, 1925, 1940,
     1935,    0,    0,    0,    0, 1932, 1949, 1937,    0, 1943,
     1948,    0, 1957, 1957, 1977, 1963, 1967,  110,    0, 1975,
        0,    0, 1983, 1982, 1985, 1969,    0, 1971, 1988, 1992,
     1993, 1981, 1990, 1981, 1996, 1983, 1984,    0,    0, 1983,
        0,    0, 1987,    0,    0,    0,    0,    0, 1993, 2003,
        0,    0, 2002, 2007, 2025,    0,    0, 2015, 2011, 2028,
     2031, 2035,    0, 2036,    0, 2034, 2028, 2034,    0,    0,
     2037,    0, 2039, 2030, 2045, 2033, 2042, 2042, 2055, 2053,

        0, 2039,    0, 2055, 2042,    0, 2059, 2068,    0, 2071,
     2063, 2069,    0, 2068, 2072, 2076, 2083, 2080, 2090, 2081,
     2083, 2094, 2099, 2093, 2097, 2099, 2091, 2089, 2099,    0,
     2108,    0, 2105, 2094, 2108, 2100,    0,    0, 2095, 2106,
        0, 2105, 2116, 2126,    0, 2117,    0,    0, 2123, 2125,
        0, 2142, 2133, 2132,    0,    0,    0, 2131, 2129,    0,
        0,    0, 2139, 2133, 2148,    0, 2139, 2136,    0, 2138,
     2139, 2160, 2147,    0,    0, 2158,   99, 2151, 2148,    0,
     2147, 2152, 2157, 2156,    0,   77, 2178, 2177, 2173, 2174,
     2177, 2183, 2193, 2179, 2187, 2187, 2186,   63, 2192, 2201,

       62, 2193, 2202, 2192, 2194,   61, 2198, 2195, 2195, 2192,
     2202, 2204,    0, 2216,    0, 2275, 2259, 2262, 2265,   94,
       90, 2268, 2271
    } ;

static const flex_int16_t yy_def[1124] =
    {   0,
     1116,    1, 1117, 1117, 1116, 1116, 1116, 1116, 1118, 1119,
     1120, 1116, 1120, 1121, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1116, 1116, 1116,
     1116, 1116, 1116, 1118, 1116, 1119, 1122, 1120, 1116, 1120,
     1121, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1116, 1116, 1116, 1123, 1122, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120,    0, 1116, 1116, 1116, 1116,
     1116, 1116, 1116
    } ;

static const flex_int16_t yy_nxt[2341] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   25,   31,   32,
       33,   34,   35,   36,   25,   37,   25,   25,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   25,   31,   32,   33,   34,   35,
       36,   25,   37,   25,   38,   40,   41,   40,   41,   42,
       89,   42,   50,   50,   52,   99,  148,   90,  122,   92,
      149,  150,   53,   91,   54,  151,   50,   50,   55,   56,
       57,   58,   51,   93,  157,  123,   48,   89, 1108, 1103,

     1100,   52,   99,  148,   90,  122,   92,  149,  150,   53,
       91,   54,  151,  166, 1088,   55,   56,   57,   58,   59,
       93,  157,  123,   60,  100,  158,   61,  124,  101,   62,
      167,  125,  102,  159,  144,  126, 1081,  170,  103,   63,
      166,  127,  160,  145,  171,  146,   59,  986,  147,  172,
       60,  100,  158,   61,  124,  101,   62,  167,  125,  102,
      159,  144,  126,  161,  170,  103,   63,   64,  127,  160,
      145,  171,  146,  928,   65,  147,  172,  888,   66,  177,
      173,   67,  164,  178,   68,  174,  162,   69,  864,  179,
      161,   70,  846,  155,   64,  155,  155,  155,  155,  163,

      155,   65,  165,  155,  168,   66,  177,  173,   67,  164,
      178,   68,  174,  162,   69,  175,  179,  169,   70,   71,
      188,  186,  176,   72,  184,  198,  163,   73,  199,  165,
      782,  168,  200,   74,  185,  201,   75,  187,  202,  180,
      181,  182,  175,   76,  169,  183,   71,  188,  186,  176,
       72,  184,  198,  189,   73,  199,  606,  155,  190,  200,
       74,  185,  201,   75,  187,  202,  180,  181,  182,  203,
       76,   77,  183,  205,  206,  207,  211,  208,  212,  213,
      189,  209,   78,  204,   79,  190,  214,  215,  218,   80,
      219,  220,  210,  221,   81,  375,  203,  216,   77,  152,

      205,  206,  207,  211,  208,  212,  213,  217,  209,   78,
      204,   79,   45,  214,  215,  218,   80,  219,  220,  210,
      221,   81,   82,  222,  216,  224,   83,  227,  228,  225,
       84,  235,  236,   85,  217,  242,   86,  223,  226,   87,
      237,  243,   88,   45,  238,  154,  239,  244,  248,   82,
      222,  249,  224,   83,  227,  228,  225,   84,  235,  236,
       85,  250,  242,   86,  223,  226,   87,  237,  243,   88,
       94,  238,   95,  239,  244,  248,  240,  245,  249,   96,
       97,  241,  246,  251,  247,   98,  153,  252,  250,  253,
      152,  255,  256,  254,   49,  258,  259,   94,  257,   95,

       47,  260,  261,  240,  245,  262,   96,   97,  241,  246,
      251,  247,   98,  104,  252,  263,  253,  105,  255,  256,
      254,  106,  258,  259,  264,  257,  265,  107,  260,  261,
      266,  267,  262,  108,   45,  268,   45,  271,   43,  269,
      104,  280,  263,  283,  105,  270,  284,  291,  106,  292,
      293,  264,  294,  265,  107, 1116,  281,  266,  267,  295,
      108,  109,  268,  110,  271,  111,  269,  282,  280,  296,
      283,  297,  270,  284,  291,  112,  292,  293,  298,  294,
      300,  113,  114,  281,  299,  301,  295,  302,  109, 1116,
      110, 1116,  111, 1116,  282, 1116,  296,  307,  297, 1116,

      313,  322,  112,  311,  314,  298, 1116,  300,  113,  114,
      115,  299,  301,  303,  302,  312,  116,  304,  117,  317,
      118,  305,  119,  318,  307,  120,  121,  313,  322, 1116,
      311,  314, 1116,  306, 1116, 1116, 1116,  115, 1116, 1116,
      303, 1116,  312,  116,  304,  117,  317,  118,  305,  119,
      318, 1116,  120,  121,  128,  319,  129,  315,  130,  308,
      306,  309,  131,  316,  310,  320,  132,  323,  133,  134,
      135,  321,  324,  136,  137,  325,  326,  327,  138, 1116,
      328,  128,  319,  129,  315,  130,  308, 1116,  309,  131,
      316,  310,  320,  132,  323,  133,  134,  135,  321,  324,

      136,  137,  325,  326,  327,  138,  139,  328,  329,  330,
      331,  332,  333,  140,  141,  334,  335,  336,  337, 1116,
      142, 1116,  155,  143,  155,  155,  155,  155,  341,  155,
      342,  347,  155,  139, 1116,  329,  330,  331,  332,  333,
      140,  141,  334,  335,  336,  337,  338,  142,  339,  343,
      143,  191,  345,  192,  351,  341,  193,  342,  347, 1116,
      352,  346,  194,  340,  353,  354,  344, 1116,  195,  196,
      197, 1116, 1116,  338,  357,  339,  343,  358,  191,  345,
      192,  351, 1116,  193,  355,  356,  155,  352,  346,  194,
      340,  353,  354,  344,  348,  195,  196,  197,  229,  349,

      350,  357,  359,  360,  358,  362,  361,  363,  230,  231,
      232,  355,  356,  233,  234, 1116,  364, 1116,  365,  366,
     1116,  348,  367,  369,  370,  229,  349,  350,  371,  359,
      360,  372,  362,  361,  363,  230,  231,  232,  373,  368,
      233,  234,  272,  364,  273,  365,  366,  274,  275,  367,
      369,  370,  374,  276,  376,  371,  377,  378,  372,  379,
      277,  278,  380,  279, 1116,  373,  368,  381,  382,  272,
      383,  273,  384,  385,  274,  275,  386, 1116,  387,  374,
      276,  376, 1116,  377,  378,  388,  379,  277,  278,  380,
      279,  285,  389,  286,  381,  382,  390,  383,  391,  384,

      385,  392,  287,  386,  288,  387,  393,  394,  395,  289,
      290,  396,  388,  397,  398,  399,  400,  401,  285,  389,
      286,  402,  403,  390,  405,  391,  406,  407,  392,  287,
      408,  288,  404,  393,  394,  395,  289,  290,  396,  409,
      397,  398,  399,  400,  401,  410,  411,  412,  402,  403,
      413,  405,  414,  406,  407,  415,  416,  408,  417,  404,
      418,  421,  422,  419,  423,  425,  409,  426,  427,  428,
      429,  430,  410,  411,  412,  420,  424,  413,  431,  414,
      432,  433,  415,  416,  436,  417, 1116,  418,  421,  422,
      419,  423,  425,  434,  426,  427,  428,  429,  430,  437,

      439,  441,  420,  424,  435,  431,  442,  432,  433,  443,
      446,  436,  447,  440,  444,  448,  449,  450,  438,  451,
      434,  452,  445,  453,  454,  455,  437,  439,  441,  456,
      457,  435,  458,  442,  459,  460,  443,  446,  461,  447,
      440,  444,  448,  449,  450,  438,  451,  462,  452,  445,
      453,  454,  455,  463,  464,  465,  456,  457,  466,  458,
     1116,  459,  460,  472,  470,  461,  471,  473,  474,  467,
      475,  476,  477,  478,  462,  480,  481,  482,  479,  483,
      463,  464,  465,  468,  484,  466,  485,  469,  486,  487,
      472,  470,  488,  471,  473,  474,  467,  475,  476,  477,

      478,  489,  480,  481,  482,  479,  483,  490,  491,  492,
      468,  484, 1116,  485,  469,  486,  487,  493,  496,  488,
      498,  499,  497,  500,  501,  502,  503,  504,  489,  505,
      506,  507,  508,  509,  490,  491,  492,  510,  511,  494,
      512,  495,  513,  514,  493,  496,  515,  498,  499,  497,
      500,  501,  502,  503,  504,  516,  505,  506,  507,  508,
      509,  517,  518,  519,  510,  511,  494,  512,  520,  513,
      514,  521,  522,  515,  523,  524,  525,  526,  527,  528,
      529,  530,  516,  531,  532,  533,  534,  535,  517,  518,
      519,  536,  537,  538,  539,  520,  540,  541,  521,  522,

      542,  523,  524,  525,  526,  527,  528,  529,  530,  543,
      531,  532,  533,  534,  535,  544,  545,  546,  536,  537,
      538,  539,  547,  540,  541,  548,  549,  542,  550,  551,
      552,  553,  554,  555,  556,  557,  543,  558,  559,  560,
      561,  562,  544,  545,  546,  563,  564,  565,  566,  547,
      567,  571,  548,  549,  568,  550,  551,  552,  553,  554,
      555,  556,  557,  572,  558,  559,  560,  561,  562,  569,
      573,  574,  563,  564,  565,  566,  575,  567,  571,  576,
      570,  568,  577,  578,  579,  580,  581,  582,  583,  584,
      572,  585,  586,  587,  588,  589,  569,  573,  574,  590,

      591,  592,  593,  575,  594,  595,  576,  570,  596,  577,
      578,  579,  580,  581,  582,  583,  584,  597,  585,  586,
      587,  588,  589,  598,  599,  600,  590,  591,  592,  593,
      601,  594,  595,  602,  603,  596,  604,  605,  607,  608,
      609,  610,  611,  612,  597,  614,  615,  616,  617,  618,
      598,  599,  600,  619,  620,  621,  622,  601,  623,  624,
      602,  603,  613,  604,  605,  607,  608,  609,  610,  611,
      612,  625,  614,  615,  616,  617,  618,  626,  627,  628,
      619,  620,  621,  622,  629,  623,  624,  630,  631,  613,
      632,  635,  633,  636,  637,  638,  639,  640,  625,  634,

      641,  642,  643,  644,  626,  627,  628,  645,  646,  647,
      648,  629,  649,  650,  630,  631,  651,  632,  635,  633,
      636,  637,  638,  639,  640,  652,  634,  641,  642,  643,
      644,  653,  654,  655,  645,  646,  647,  648,  656,  649,
      650,  657,  659,  651,  660,  661,  662,  658,  663,  664,
      665,  666,  652,  667,  668,  669,  670,  671,  653,  654,
      655,  672,  673,  674,  675,  656,  676,  677,  657,  659,
      678,  660,  661,  662,  658,  663,  664,  665,  666,  679,
      667,  668,  669,  670,  671,  680,  681,  682,  672,  673,
      674,  675,  683,  676,  677,  684,  685,  678,  686,  687,

      688,  689,  690,  691,  692,  693,  679,  694,  695,  696,
      697,  698,  680,  681,  682,  699,  700,  701,  702,  683,
      703,  704,  684,  685,  705,  686,  687,  688,  689,  690,
      691,  692,  693,  706,  694,  695,  696,  697,  698,  707,
      708,  709,  699,  700,  701,  702,  710,  703,  704,  711,
      713,  705,  712,  714,  715,  716,  717,  718,  719,  720,
      706,  721,  722,  723,  724,  725,  707,  708,  709,  726,
      727,  728,  729,  710,  730,  731,  711,  713,  732,  712,
      714,  715,  716,  717,  718,  719,  720,  733,  721,  722,
      723,  724,  725,  734,  735,  736,  726,  727,  728,  729,

      737,  730,  731, 1116,  743,  732,  744,  745,  746, 1116,
      747,  748,  749,  750,  733,  751,  752,  753, 1116, 1116,
      734,  735,  736,  754,  755,  756,  757,  737,  738,  758,
      739,  743,  759,  744,  745,  746,  740,  747,  748,  749,
      750,  760,  751,  752,  753,  741,  742,  761,  762,  763,
      754,  755,  756,  757,  764,  738,  758,  739,  765,  759,
      766,  767,  768,  740,  769,  770,  771,  772,  760,  773,
      774,  775,  741,  742,  761,  762,  763,  776,  777,  778,
      779,  764,  780,  781,  783,  765,  784,  766,  767,  768,
      785,  769,  770,  771,  772,  786,  773,  774,  775,  787,

      788,  789,  790,  791,  776,  777,  778,  779,  792,  780,
      781,  783,  793,  784,  794,  795,  796,  785,  797,  798,
      799,  800,  786,  801,  802,  803,  787,  788,  789,  790,
      791,  804,  805,  806,  807,  792,  808,  809,  810,  793,
      811,  794,  795,  796,  812,  797,  798,  799,  800,  813,
      801,  802,  803,  814,  815,  816,  817,  818,  804,  805,
      806,  807,  819,  808,  809,  810,  820,  811,  821,  822,
      823,  812,  824,  825,  826,  827,  813,  828,  829,  830,
      814,  815,  816,  817,  818,  831,  832,  833,  834,  819,
      835,  836,  837,  820,  838,  821,  822,  823,  839,  824,

      825,  826,  827,  840,  828,  829,  830,  841,  842,  843,
      844,  845,  831,  832,  833,  834,  847,  835,  836,  837,
      850,  838,  851,  852,  853,  839,  854,  855,  848,  849,
      840,  856,  857,  858,  841,  842,  843,  844,  845,  859,
      860,  861,  862,  847,  863,  865,  866,  850,  867,  851,
      852,  853,  868,  854,  855,  848,  849,  869,  856,  857,
      858,  870,  871,  872,  873,  874,  859,  860,  861,  862,
      875,  863,  865,  866,  876,  867,  877,  878,  879,  868,
      880,  881,  882,  883,  869,  884,  885,  886,  870,  871,
      872,  873,  874,  887,  889,  890,  891,  875,  892,  893,

      894,  876,  895,  877,  878,  879,  896,  880,  881,  882,
      883,  897,  884,  885,  886,  898,  899,  900,  901,  902,
      887,  889,  890,  891,  903,  892,  893,  894,  904,  895,
      905,  906,  907,  896,  908,  909,  910,  911,  897,  912,
      913,  914,  898,  899,  900,  901,  902,  915,  916,  917,
      918,  903,  919,  920,  921,  904,  924,  905,  906,  907,
      925,  908,  909,  910,  911,  926,  912,  913,  914,  922,
      923,  927,  929,  930,  915,  916,  917,  918,  931,  919,
      920,  921,  932,  924,  933,  934,  935,  925,  936,  937,
      938,  939,  926,  940,  941,  942,  922,  923,  927,  929,

      930,  943,  944,  945,  946,  931,  947,  948,  949,  932,
      955,  933,  934,  935,  956,  936,  937,  938,  939,  957,
      940,  941,  942, 1116,  958, 1116, 1116,  959,  943,  944,
      945,  946,  960,  947,  948,  949,  950,  955,  961,  962,
      963,  956,  964,  965,  966,  967,  957,  968,  951,  973,
      952,  958,  953,  954,  959,  974,  969,  971,  972,  960,
      970,  975,  976,  950,  977,  961,  962,  963,  978,  964,
      965,  966,  967,  979,  968,  951,  973,  952,  980,  953,
      954,  981,  974,  969,  971,  972,  982,  970,  975,  976,
      983,  977,  984,  985,  987,  978,  988,  989,  990,  991,

      979,  992,  993,  994,  996,  980,  997,  995,  981,  998,
     1000, 1001, 1002,  982, 1003, 1004, 1005,  983,  999,  984,
      985,  987, 1006,  988,  989,  990,  991, 1007,  992,  993,
      994,  996,  846,  997,  995, 1008,  998, 1000, 1001, 1002,
     1009, 1003, 1004, 1005, 1010,  999, 1011, 1012, 1013, 1006,
     1014, 1015, 1016, 1018, 1007, 1019, 1020, 1017, 1021,  846,
     1022, 1023, 1008, 1024, 1025, 1026, 1027, 1009, 1028, 1029,
     1030, 1010, 1031, 1011, 1012, 1013, 1032, 1014, 1015, 1016,
     1018, 1033, 1019, 1020, 1017, 1021, 1034, 1022, 1023, 1035,
     1024, 1025, 1026, 1027, 1036, 1028, 1029, 1030, 1037, 1031,

     1038, 1039, 1040, 1032, 1041, 1042, 1043, 1044, 1033, 1045,
     1046, 1047, 1048, 1034, 1049, 1050, 1035, 1051, 1052, 1053,
     1054, 1036, 1055, 1056, 1057, 1037, 1058, 1038, 1039, 1040,
     1059, 1041, 1042, 1043, 1044, 1060, 1045, 1046, 1047, 1048,
     1061, 1049, 1050, 1062, 1051, 1052, 1053, 1054, 1063, 1055,
     1056, 1057, 1064, 1058, 1065, 1066, 1067, 1059, 1068, 1069,
     1070, 1071, 1060, 1072, 1073, 1074, 1075, 1061, 1076, 1077,
     1062, 1078, 1079, 1080, 1082, 1063, 1083, 1084, 1085, 1064,
     1086, 1065, 1066, 1067, 1087, 1068, 1069, 1070, 1071, 1089,
     1072, 1073, 1074, 1075, 1090, 1076, 1077, 1091, 1078, 1079,

     1080, 1082, 1092, 1083, 1084, 1085, 1093, 1086, 1094, 1095,
     1096, 1087, 1097, 1098, 1099, 1101, 1089, 1102, 1104, 1105,
     1106, 1090, 1107, 1109, 1091, 1110, 1111, 1112, 1113, 1092,
     1114, 1115, 1116, 1093, 1116, 1094, 1095, 1096, 1116, 1097,
     1098, 1099, 1101, 1116, 1102, 1104, 1105, 1106, 1116, 1107,
     1109, 1116, 1110, 1111, 1112, 1113, 1116, 1114, 1115,   39,
       39,   39,   44,   44,   44,   46,   46,   46,  156, 1116,
      156,  155, 1116,  155,    5, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116
    } ;

static const flex_int16_t yy_chk[2341] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    3,
       21,    4,   13,   13,   15,   24,   35,   21,   30,   22,
       36,   36,   15,   21,   15,   37,   50,   50,   15,   15,
       15,   15, 1121,   22,   52,   30, 1120,   21, 1106, 1101,

     1098,   15,   24,   35,   21,   30,   22,   36,   36,   15,
       21,   15,   37,   57, 1086,   15,   15,   15,   15,   16,
       22,   52,   30,   16,   26,   53,   16,   31,   26,   16,
       58,   31,   26,   53,   34,   31, 1077,   60,   26,   16,
       57,   31,   54,   34,   60,   34,   16,  938,   34,   61,
       16,   26,   53,   16,   31,   26,   16,   58,   31,   26,
       53,   34,   31,   54,   60,   26,   16,   17,   31,   54,
       34,   60,   34,  855,   17,   34,   61,  799,   17,   65,
       62,   17,   56,   65,   17,   62,   55,   17,  765,   66,
       54,   17,  741,   47,   17,   47,   47,   47,   47,   55,

       47,   17,   56,   47,   59,   17,   65,   62,   17,   56,
       65,   17,   62,   55,   17,   64,   66,   59,   17,   18,
       70,   69,   64,   18,   68,   73,   55,   18,   74,   56,
      655,   59,   75,   18,   68,   76,   18,   69,   77,   67,
       67,   67,   64,   18,   59,   67,   18,   70,   69,   64,
       18,   68,   73,   71,   18,   74,  448,   47,   71,   75,
       18,   68,   76,   18,   69,   77,   67,   67,   67,   78,
       18,   19,   67,   79,   80,   81,   82,   81,   83,   84,
       71,   81,   19,   78,   19,   71,   85,   86,   88,   19,
       88,   89,   81,   90,   19,  205,   78,   87,   19,  152,

       79,   80,   81,   82,   81,   83,   84,   87,   81,   19,
       78,   19,   46,   85,   86,   88,   19,   88,   89,   81,
       90,   19,   20,   91,   87,   92,   20,   94,   96,   93,
       20,   98,   99,   20,   87,  102,   20,   91,   93,   20,
      100,  103,   20,   44,  100,   42,  100,  104,  106,   20,
       91,  107,   92,   20,   94,   96,   93,   20,   98,   99,
       20,  107,  102,   20,   91,   93,   20,  100,  103,   20,
       23,  100,   23,  100,  104,  106,  101,  105,  107,   23,
       23,  101,  105,  108,  105,   23,   41,  109,  107,  110,
       38,  111,  112,  110,   12,  113,  113,   23,  112,   23,

       11,  114,  116,  101,  105,  117,   23,   23,  101,  105,
      108,  105,   23,   27,  109,  118,  110,   27,  111,  112,
      110,   27,  113,  113,  119,  112,  120,   27,  114,  116,
      121,  122,  117,   27,   10,  123,    9,  124,    8,  123,
       27,  126,  118,  128,   27,  123,  129,  131,   27,  132,
      133,  119,  134,  120,   27,    5,  127,  121,  122,  135,
       27,   28,  123,   28,  124,   28,  123,  127,  126,  136,
      128,  137,  123,  129,  131,   28,  132,  133,  138,  134,
      139,   28,   28,  127,  138,  140,  135,  141,   28,    0,
       28,    0,   28,    0,  127,    0,  136,  144,  137,    0,

      147,  151,   28,  146,  147,  138,    0,  139,   28,   28,
       29,  138,  140,  143,  141,  146,   29,  143,   29,  149,
       29,  143,   29,  149,  144,   29,   29,  147,  151,    0,
      146,  147,    0,  143,    0,    0,    0,   29,    0,    0,
      143,    0,  146,   29,  143,   29,  149,   29,  143,   29,
      149,    0,   29,   29,   32,  150,   32,  148,   32,  145,
      143,  145,   32,  148,  145,  150,   32,  158,   32,   32,
       32,  150,  159,   32,   32,  163,  164,  165,   32,    0,
      166,   32,  150,   32,  148,   32,  145,    0,  145,   32,
      148,  145,  150,   32,  158,   32,   32,   32,  150,  159,

       32,   32,  163,  164,  165,   32,   33,  166,  167,  168,
      169,  170,  171,   33,   33,  172,  173,  174,  175,    0,
       33,    0,  156,   33,  156,  156,  156,  156,  177,  156,
      178,  181,  156,   33,    0,  167,  168,  169,  170,  171,
       33,   33,  172,  173,  174,  175,  176,   33,  176,  179,
       33,   72,  180,   72,  183,  177,   72,  178,  181,    0,
      184,  180,   72,  176,  185,  186,  179,    0,   72,   72,
       72,    0,    0,  176,  188,  176,  179,  189,   72,  180,
       72,  183,    0,   72,  187,  187,  156,  184,  180,   72,
      176,  185,  186,  179,  182,   72,   72,   72,   97,  182,

      182,  188,  191,  192,  189,  193,  192,  194,   97,   97,
       97,  187,  187,   97,   97,    0,  195,    0,  196,  197,
        0,  182,  198,  199,  200,   97,  182,  182,  201,  191,
      192,  202,  193,  192,  194,   97,   97,   97,  203,  198,
       97,   97,  125,  195,  125,  196,  197,  125,  125,  198,
      199,  200,  204,  125,  206,  201,  207,  208,  202,  209,
      125,  125,  210,  125,    0,  203,  198,  211,  212,  125,
      213,  125,  214,  215,  125,  125,  216,    0,  217,  204,
      125,  206,    0,  207,  208,  218,  209,  125,  125,  210,
      125,  130,  219,  130,  211,  212,  221,  213,  222,  214,

      215,  223,  130,  216,  130,  217,  224,  225,  226,  130,
      130,  227,  218,  228,  229,  230,  231,  232,  130,  219,
      130,  233,  234,  221,  235,  222,  236,  237,  223,  130,
      238,  130,  234,  224,  225,  226,  130,  130,  227,  239,
      228,  229,  230,  231,  232,  240,  241,  242,  233,  234,
      243,  235,  244,  236,  237,  245,  246,  238,  247,  234,
      248,  250,  251,  249,  252,  253,  239,  254,  256,  258,
      259,  260,  240,  241,  242,  249,  252,  243,  262,  244,
      263,  264,  245,  246,  266,  247,    0,  248,  250,  251,
      249,  252,  253,  265,  254,  256,  258,  259,  260,  267,

      268,  269,  249,  252,  265,  262,  270,  263,  264,  271,
      273,  266,  274,  268,  272,  275,  276,  277,  267,  278,
      265,  279,  272,  280,  281,  282,  267,  268,  269,  283,
      284,  265,  285,  270,  286,  287,  271,  273,  288,  274,
      268,  272,  275,  276,  277,  267,  278,  289,  279,  272,
      280,  281,  282,  291,  292,  293,  283,  284,  294,  285,
        0,  286,  287,  297,  296,  288,  296,  298,  299,  295,
      300,  301,  302,  303,  289,  304,  305,  306,  303,  307,
      291,  292,  293,  295,  308,  294,  308,  295,  309,  310,
      297,  296,  311,  296,  298,  299,  295,  300,  301,  302,

      303,  312,  304,  305,  306,  303,  307,  313,  314,  315,
      295,  308,    0,  308,  295,  309,  310,  316,  317,  311,
      318,  319,  317,  320,  321,  322,  323,  324,  312,  325,
      326,  327,  328,  329,  313,  314,  315,  330,  331,  316,
      332,  316,  333,  335,  316,  317,  337,  318,  319,  317,
      320,  321,  322,  323,  324,  338,  325,  326,  327,  328,
      329,  341,  342,  344,  330,  331,  316,  332,  345,  333,
      335,  346,  347,  337,  348,  349,  350,  351,  352,  353,
      355,  356,  338,  357,  359,  360,  361,  362,  341,  342,
      344,  363,  364,  365,  366,  345,  367,  368,  346,  347,

      369,  348,  349,  350,  351,  352,  353,  355,  356,  371,
      357,  359,  360,  361,  362,  373,  375,  376,  363,  364,
      365,  366,  377,  367,  368,  378,  379,  369,  380,  381,
      382,  383,  384,  385,  389,  390,  371,  391,  392,  393,
      396,  397,  373,  375,  376,  398,  399,  400,  401,  377,
      402,  405,  378,  379,  402,  380,  381,  382,  383,  384,
      385,  389,  390,  407,  391,  392,  393,  396,  397,  403,
      408,  409,  398,  399,  400,  401,  410,  402,  405,  413,
      403,  402,  414,  415,  416,  417,  418,  419,  420,  421,
      407,  422,  423,  424,  425,  426,  403,  408,  409,  429,

      430,  433,  434,  410,  435,  436,  413,  403,  437,  414,
      415,  416,  417,  418,  419,  420,  421,  438,  422,  423,
      424,  425,  426,  439,  440,  441,  429,  430,  433,  434,
      442,  435,  436,  443,  444,  437,  446,  447,  449,  450,
      451,  452,  453,  454,  438,  456,  457,  458,  459,  460,
      439,  440,  441,  461,  462,  463,  464,  442,  466,  467,
      443,  444,  454,  446,  447,  449,  450,  451,  452,  453,
      454,  468,  456,  457,  458,  459,  460,  469,  470,  471,
      461,  462,  463,  464,  472,  466,  467,  473,  474,  454,
      475,  478,  477,  479,  480,  481,  483,  484,  468,  477,

      485,  486,  487,  488,  469,  470,  471,  489,  491,  492,
      493,  472,  494,  495,  473,  474,  495,  475,  478,  477,
      479,  480,  481,  483,  484,  496,  477,  485,  486,  487,
      488,  497,  498,  499,  489,  491,  492,  493,  500,  494,
      495,  501,  503,  495,  506,  507,  508,  501,  509,  511,
      512,  513,  496,  514,  515,  516,  517,  520,  497,  498,
      499,  521,  522,  523,  524,  500,  525,  526,  501,  503,
      527,  506,  507,  508,  501,  509,  511,  512,  513,  529,
      514,  515,  516,  517,  520,  530,  532,  533,  521,  522,
      523,  524,  534,  525,  526,  535,  536,  527,  538,  539,

      540,  541,  542,  543,  544,  545,  529,  546,  547,  548,
      549,  550,  530,  532,  533,  553,  555,  556,  557,  534,
      559,  560,  535,  536,  561,  538,  539,  540,  541,  542,
      543,  544,  545,  562,  546,  547,  548,  549,  550,  563,
      567,  568,  553,  555,  556,  557,  569,  559,  560,  570,
      571,  561,  570,  572,  574,  575,  576,  578,  580,  581,
      562,  582,  583,  585,  586,  587,  563,  567,  568,  590,
      591,  594,  595,  569,  596,  597,  570,  571,  598,  570,
      572,  574,  575,  576,  578,  580,  581,  599,  582,  583,
      585,  586,  587,  600,  601,  604,  590,  591,  594,  595,

      605,  596,  597,    0,  607,  598,  608,  609,  610,    0,
      612,  613,  614,  615,  599,  616,  617,  618,    0,    0,
      600,  601,  604,  619,  620,  621,  622,  605,  606,  623,
      606,  607,  624,  608,  609,  610,  606,  612,  613,  614,
      615,  625,  616,  617,  618,  606,  606,  626,  628,  629,
      619,  620,  621,  622,  630,  606,  623,  606,  631,  624,
      633,  634,  635,  606,  636,  638,  639,  641,  625,  642,
      643,  644,  606,  606,  626,  628,  629,  647,  648,  649,
      650,  630,  651,  652,  656,  631,  657,  633,  634,  635,
      658,  636,  638,  639,  641,  659,  642,  643,  644,  660,

      661,  663,  664,  667,  647,  648,  649,  650,  669,  651,
      652,  656,  670,  657,  671,  674,  675,  658,  676,  677,
      679,  681,  659,  682,  683,  684,  660,  661,  663,  664,
      667,  686,  687,  688,  689,  669,  691,  692,  693,  670,
      696,  671,  674,  675,  698,  676,  677,  679,  681,  700,
      682,  683,  684,  701,  703,  705,  706,  707,  686,  687,
      688,  689,  708,  691,  692,  693,  710,  696,  711,  712,
      713,  698,  714,  715,  716,  717,  700,  721,  723,  724,
      701,  703,  705,  706,  707,  725,  726,  727,  729,  708,
      730,  731,  732,  710,  733,  711,  712,  713,  734,  714,

      715,  716,  717,  735,  721,  723,  724,  736,  737,  738,
      739,  740,  725,  726,  727,  729,  742,  730,  731,  732,
      743,  733,  745,  747,  749,  734,  754,  755,  742,  742,
      735,  756,  757,  758,  736,  737,  738,  739,  740,  759,
      760,  761,  763,  742,  764,  766,  767,  743,  768,  745,
      747,  749,  769,  754,  755,  742,  742,  770,  756,  757,
      758,  771,  773,  777,  778,  779,  759,  760,  761,  763,
      780,  764,  766,  767,  781,  768,  782,  785,  786,  769,
      787,  788,  789,  792,  770,  793,  796,  797,  771,  773,
      777,  778,  779,  798,  800,  804,  805,  780,  806,  807,

      810,  781,  812,  782,  785,  786,  814,  787,  788,  789,
      792,  815,  793,  796,  797,  816,  817,  818,  819,  821,
      798,  800,  804,  805,  822,  806,  807,  810,  823,  812,
      824,  827,  828,  814,  829,  830,  833,  834,  815,  835,
      836,  837,  816,  817,  818,  819,  821,  840,  841,  842,
      843,  822,  844,  845,  847,  823,  849,  824,  827,  828,
      852,  829,  830,  833,  834,  853,  835,  836,  837,  848,
      848,  854,  857,  858,  840,  841,  842,  843,  859,  844,
      845,  847,  860,  849,  861,  862,  863,  852,  864,  865,
      866,  867,  853,  868,  875,  876,  848,  848,  854,  857,

      858,  877,  880,  881,  882,  859,  884,  885,  887,  860,
      889,  861,  862,  863,  891,  864,  865,  866,  867,  892,
      868,  875,  876,    0,  899,    0,    0,  900,  877,  880,
      881,  882,  901,  884,  885,  887,  888,  889,  902,  904,
      906,  891,  912,  913,  914,  915,  892,  916,  888,  919,
      888,  899,  888,  888,  900,  920,  917,  918,  918,  901,
      917,  921,  926,  888,  927,  902,  904,  906,  928,  912,
      913,  914,  915,  930,  916,  888,  919,  888,  931,  888,
      888,  933,  920,  917,  918,  918,  934,  917,  921,  926,
      935,  927,  936,  937,  940,  928,  943,  944,  945,  946,

      930,  948,  949,  950,  951,  931,  952,  950,  933,  953,
      954,  955,  956,  934,  957,  960,  963,  935,  953,  936,
      937,  940,  969,  943,  944,  945,  946,  970,  948,  949,
      950,  951,  973,  952,  950,  974,  953,  954,  955,  956,
      975,  957,  960,  963,  978,  953,  979,  980,  981,  969,
      982,  984,  986,  987,  970,  988,  991,  986,  993,  973,
      994,  995,  974,  996,  997,  998,  999,  975, 1000, 1002,
     1004,  978, 1005,  979,  980,  981, 1007,  982,  984,  986,
      987, 1008,  988,  991,  986,  993, 1010,  994,  995, 1011,
      996,  997,  998,  999, 1012, 1000, 1002, 1004, 1014, 1005,

     1015, 1016, 1017, 1007, 1018, 1019, 1020, 1021, 1008, 1022,
     1023, 1024, 1025, 1010, 1026, 1027, 1011, 1028, 1029, 1031,
     1033, 1012, 1034, 1035, 1036, 1014, 1039, 1015, 1016, 1017,
     1040, 1018, 1019, 1020, 1021, 1042, 1022, 1023, 1024, 1025,
     1043, 1026, 1027, 1044, 1028, 1029, 1031, 1033, 1046, 1034,
     1035, 1036, 1049, 1039, 1050, 1052, 1053, 1040, 1054, 1058,
     1059, 1063, 1042, 1064, 1065, 1067, 1068, 1043, 1070, 1071,
     1044, 1072, 1073, 1076, 1078, 1046, 1079, 1081, 1082, 1049,
     1083, 1050, 1052, 1053, 1084, 1054, 1058, 1059, 1063, 1087,
     1064, 1065, 1067, 1068, 1088, 1070, 1071, 1089, 1072, 1073,

     1076, 1078, 1090, 1079, 1081, 1082, 1091, 1083, 1092, 1093,
     1094, 1084, 1095, 1096, 1097, 1099, 1087, 1100, 1102, 1103,
     1104, 1088, 1105, 1107, 1089, 1108, 1109, 1110, 1111, 1090,
     1112, 1114,    0, 1091,    0, 1092, 1093, 1094,    0, 1095,
     1096, 1097, 1099,    0, 1100, 1102, 1103, 1104,    0, 1105,
     1107,    0, 1108, 1109, 1110, 1111,    0, 1112, 1114, 1117,
     1117, 1117, 1118, 1118, 1118, 1119, 1119, 1119, 1122,    0,
     1122, 1123,    0, 1123, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 31 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"

#include <stdio.h>

#include "sqlcode.h"

#include "entry.h"
#include "doxygen.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "config.h"
#include "filedef.h"
#include "tooltip.h"
#include "message.h"
#include "debug.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

struct sqlcodeYY_state
{
     OutputCodeList * code;
     const char   *inputString;     //!< the code fragment as text
     int           inputPosition;   //!< read offset during parsing
     QCString      fileName;
     int           inputLines;      //!< number of line in the code fragment
     int           yyLineNr;        //!< current line number
     bool          insideCodeLine;
     const Definition   *searchCtx;

     bool          exampleBlock;
     QCString      exampleName;
     QCString      classScope;

     std::unique_ptr<FileDef> exampleFileDef;
     const FileDef    *sourceFileDef;
     const Definition *currentDefinition;
     const MemberDef  *currentMemberDef;
     bool          includeCodeFragment;
     const char   *currentFontClass;
};

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

static void setCurrentDoc(yyscan_t yyscanner,const QCString &anchor);
static void startCodeLine(yyscan_t yyscanner);
static void endFontClass(yyscan_t yyscanner);
static void endCodeLine(yyscan_t yyscanner);
static void nextCodeLine(yyscan_t yyscanner);
static void codifyLines(yyscan_t yyscanner,const char *text);
static void startFontClass(yyscan_t yyscanner,const char *s);
static int countLines(yyscan_t yyscanner);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1605 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode_intermediate.cpp"
/* Need multiple keyword definitions due to max length */

#line 1608 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode_intermediate.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct sqlcodeYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 137 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"


#line 1868 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1117 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1116 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 139 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"stringliteral");
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 146 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"keyword");
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 152 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"keywordflow");
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 158 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"keywordtype");
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 164 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"preprocessor");
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 170 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"comment");
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 176 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        startFontClass(yyscanner,"comment");
                        codifyLines(yyscanner,yytext);
                        BEGIN(COMMENT);
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 182 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        codifyLines(yyscanner,yytext);

                    }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 186 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        codifyLines(yyscanner,yytext);
                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 190 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        codifyLines(yyscanner,yytext);
                        endFontClass(yyscanner);
                        BEGIN(INITIAL);
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 196 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        codifyLines(yyscanner,yytext);
                    }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 200 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        codifyLines(yyscanner,yytext);
                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 204 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{ // keep utf8 characters together...
                        codifyLines(yyscanner,yytext);
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 207 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
{
                        codifyLines(yyscanner,yytext);
                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 211 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"
ECHO;
	YY_BREAK
#line 2044 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode_intermediate.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1117 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1117 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1116);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 211 "/home/vsc/github/doxygen/Debug/generated_src/sqlcode.l"



static void setCurrentDoc(yyscan_t yyscanner,const QCString &anchor)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (Doxygen::searchIndex)
  {
    if (yyextra->searchCtx)
    {
      Doxygen::searchIndex->setCurrentDoc(yyextra->searchCtx,yyextra->searchCtx->anchor(),false);
    }
    else
    {
      Doxygen::searchIndex->setCurrentDoc(yyextra->sourceFileDef,anchor,true);
    }
  }
}

/*! start a new line of code, inserting a line number if yyextra->sourceFileDef
 * is true. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->sourceFileDef)
  {
    const Definition *d = yyextra->sourceFileDef->getSourceDefinition(yyextra->yyLineNr);

    if (!yyextra->includeCodeFragment && d && d->isLinkableInProject())
    {
      yyextra->currentDefinition = d;
      yyextra->currentMemberDef = yyextra->sourceFileDef->getSourceMember(yyextra->yyLineNr);
      yyextra->classScope = d->name();
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",yyextra->yyLineNr);
      if (yyextra->currentMemberDef)
      {
        yyextra->code->writeLineNumber(yyextra->currentMemberDef->getReference(),
                            yyextra->currentMemberDef->getOutputFileBase(),
                            yyextra->currentMemberDef->anchor(),yyextra->yyLineNr,
                            !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
      else
      {
        yyextra->code->writeLineNumber(d->getReference(),
                            d->getOutputFileBase(),
                            QCString(),yyextra->yyLineNr,
                            !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
    }
    else
    {
      yyextra->code->writeLineNumber(QCString(),QCString(),QCString(),yyextra->yyLineNr,
                                     !yyextra->includeCodeFragment);
    }
  }

  yyextra->code->startCodeLine(yyextra->sourceFileDef!=0);
  yyextra->insideCodeLine=true;

  if (yyextra->currentFontClass)
  {
    yyextra->code->startFontClass(yyextra->currentFontClass);
  }
}

static void endFontClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->currentFontClass)
  {
    yyextra->code->endFontClass();
    yyextra->currentFontClass=0;
  }
}

static void endCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endFontClass(yyscanner);
  yyextra->code->endCodeLine();
  yyextra->insideCodeLine=false;
}

static void nextCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *fc = yyextra->currentFontClass;
  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->yyLineNr<yyextra->inputLines)
  {
    yyextra->currentFontClass = fc;
    startCodeLine(yyscanner);
  }
}

static void codifyLines(yyscan_t yyscanner,const char *text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=text,*sp=p;
  char c;
  bool done=false;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      yyextra->yyLineNr++;
      int l = (int)(p-sp-1);
      char *tmp = (char*)malloc(l+1);
      memcpy(tmp,sp,l);
      tmp[l]='\0';
      yyextra->code->codify(tmp);
      free(tmp);
      nextCodeLine(yyscanner);
    }
    else
    {
      yyextra->code->codify(sp);
      done=true;
    }
  }
}

static void startFontClass(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endFontClass(yyscanner);
  yyextra->code->startFontClass(s);
  yyextra->currentFontClass=s;
}

/*! counts the number of lines in the input */
static int countLines(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=yyextra->inputString;
  char c;
  int count=1;
  while ((c=*p))
  {
    p++ ;
    if (c=='\n') count++;
  }
  if (p>yyextra->inputString && *(p-1)!='\n')
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++;
  }
  return count;
}

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int inputPosition = yyextra->inputPosition;
  const char *s = yyextra->inputString + inputPosition;
  int c=0;
  while( c < max_size && *s )
  {
    *buf++ = *s++;
    c++;
  }
  yyextra->inputPosition += c;
  return c;
}


// public interface -----------------------------------------------------------

struct SQLCodeParser::Private
{
  yyscan_t yyscanner;
  sqlcodeYY_state state;
};

SQLCodeParser::SQLCodeParser() : p(std::make_unique<Private>())
{
  sqlcodeYYlex_init_extra(&p->state, &p->yyscanner);
#ifdef FLEX_DEBUG
  sqlcodeYYset_debug(Debug::isFlagSet(Debug::Lex_sqlcode)?1:0,p->yyscanner);
#endif
  resetCodeParserState();
}

SQLCodeParser::~SQLCodeParser()
{
  sqlcodeYYlex_destroy(p->yyscanner);
}

void SQLCodeParser::resetCodeParserState()
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->currentDefinition = 0;
  yyextra->currentMemberDef = 0;
}

void SQLCodeParser::parseCode(OutputCodeList &codeOutIntf,
               const QCString &/* scopeName */,
               const QCString &input,
               SrcLangExt,
               bool isExampleBlock,
               const QCString &exampleName,
               const FileDef *fileDef,
               int startLine,
               int endLine,
               bool inlineFragment,
               const MemberDef * /* memberDef */,
               bool /* showLineNumbers */,
               const Definition *searchCtx,
               bool/* collectXRefs */ 
              )
{
  yyscan_t yyscanner = p->yyscanner;
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  if (input.isEmpty()) return;

  DebugLex debugLex(Debug::Lex_sqlcode, __FILE__, fileDef ? qPrint(fileDef->fileName()): NULL);
  yyextra->fileName      = fileDef ? fileDef->fileName():"";

  yyextra->code = &codeOutIntf;
  yyextra->inputString   = input.data();
  yyextra->inputPosition = 0;
  yyextra->currentFontClass = 0;
  yyextra->insideCodeLine = false;
  yyextra->searchCtx=searchCtx;

  if (startLine!=-1)
    yyextra->yyLineNr    = startLine;
  else
    yyextra->yyLineNr    = 1;

  if (endLine!=-1)
    yyextra->inputLines  = endLine+1;
  else
    yyextra->inputLines  = yyextra->yyLineNr + countLines(yyscanner) - 1;

  yyextra->exampleBlock  = isExampleBlock;
  yyextra->exampleName   = exampleName;
  yyextra->sourceFileDef = fileDef;

  if (isExampleBlock && fileDef==0)
  {
    // create a dummy filedef for the example
    yyextra->exampleFileDef = createFileDef(QCString(),!exampleName.isEmpty() ? exampleName : QCString("generated"));
    yyextra->sourceFileDef = yyextra->exampleFileDef.get();
  }

  if (yyextra->sourceFileDef)
  {
    setCurrentDoc(yyscanner,"l00001");
  }

  yyextra->includeCodeFragment = inlineFragment;
  // Starts line 1 on the output
  startCodeLine(yyscanner);

  sqlcodeYYrestart( 0, yyscanner );

  sqlcodeYYlex(yyscanner);

  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->exampleFileDef)
  {
    // delete the temporary file definition used for this example
    yyextra->exampleFileDef.reset();
    yyextra->sourceFileDef=0;
  }
}

//---------------------------------------------------------------------------------

#if USE_STATE2STRING
#include "sqlcode.l.h"
#endif

