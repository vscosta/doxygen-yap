#line 1 "/home/vsc/github/doxygen/Debug/generated_src/pycode_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "/home/vsc/github/doxygen/Debug/generated_src/pycode_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define pycodeYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer pycodeYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define pycodeYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer pycodeYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define pycodeYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer pycodeYY_scan_buffer
#endif

#ifdef yy_scan_string
#define pycodeYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string pycodeYY_scan_string
#endif

#ifdef yy_scan_bytes
#define pycodeYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes pycodeYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define pycodeYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer pycodeYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define pycodeYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer pycodeYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define pycodeYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state pycodeYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define pycodeYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer pycodeYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define pycodeYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state pycodeYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define pycodeYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state pycodeYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define pycodeYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack pycodeYYensure_buffer_stack
#endif

#ifdef yylex
#define pycodeYYlex_ALREADY_DEFINED
#else
#define yylex pycodeYYlex
#endif

#ifdef yyrestart
#define pycodeYYrestart_ALREADY_DEFINED
#else
#define yyrestart pycodeYYrestart
#endif

#ifdef yylex_init
#define pycodeYYlex_init_ALREADY_DEFINED
#else
#define yylex_init pycodeYYlex_init
#endif

#ifdef yylex_init_extra
#define pycodeYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra pycodeYYlex_init_extra
#endif

#ifdef yylex_destroy
#define pycodeYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy pycodeYYlex_destroy
#endif

#ifdef yyget_debug
#define pycodeYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug pycodeYYget_debug
#endif

#ifdef yyset_debug
#define pycodeYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug pycodeYYset_debug
#endif

#ifdef yyget_extra
#define pycodeYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra pycodeYYget_extra
#endif

#ifdef yyset_extra
#define pycodeYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra pycodeYYset_extra
#endif

#ifdef yyget_in
#define pycodeYYget_in_ALREADY_DEFINED
#else
#define yyget_in pycodeYYget_in
#endif

#ifdef yyset_in
#define pycodeYYset_in_ALREADY_DEFINED
#else
#define yyset_in pycodeYYset_in
#endif

#ifdef yyget_out
#define pycodeYYget_out_ALREADY_DEFINED
#else
#define yyget_out pycodeYYget_out
#endif

#ifdef yyset_out
#define pycodeYYset_out_ALREADY_DEFINED
#else
#define yyset_out pycodeYYset_out
#endif

#ifdef yyget_leng
#define pycodeYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng pycodeYYget_leng
#endif

#ifdef yyget_text
#define pycodeYYget_text_ALREADY_DEFINED
#else
#define yyget_text pycodeYYget_text
#endif

#ifdef yyget_lineno
#define pycodeYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno pycodeYYget_lineno
#endif

#ifdef yyset_lineno
#define pycodeYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno pycodeYYset_lineno
#endif

#ifdef yyget_column
#define pycodeYYget_column_ALREADY_DEFINED
#else
#define yyget_column pycodeYYget_column
#endif

#ifdef yyset_column
#define pycodeYYset_column_ALREADY_DEFINED
#else
#define yyset_column pycodeYYset_column
#endif

#ifdef yywrap
#define pycodeYYwrap_ALREADY_DEFINED
#else
#define yywrap pycodeYYwrap
#endif

#ifdef yyalloc
#define pycodeYYalloc_ALREADY_DEFINED
#else
#define yyalloc pycodeYYalloc
#endif

#ifdef yyrealloc
#define pycodeYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc pycodeYYrealloc
#endif

#ifdef yyfree
#define pycodeYYfree_ALREADY_DEFINED
#else
#define yyfree pycodeYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pycodeYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1093] =
    {   0,
    16425,16425,   67,   67,   76,   74,   75,   73,   74,   75,
       72,   75,   66,   74,   75,   71,   74,   75,   65,   74,
       75,   74,   75,   74,   75,   74,   75,   44,   72,   75,
       74,   75,   29,   43,   74,   75,   29,   43,   74,   75,
       29,   43,   74,   75,   29,   43,   74,   75,   29,   43,
       74,   75,   29,   43,   74,   75,   29,   43,   74,   75,
       29,   43,   74,   75,   29,   43,   74,   75,   29,   43,
       74,   75,   29,   43,   74,   75,   29,   43,   74,   75,
       29,   43,   74,   75,   29,   43,   74,   75,   29,   43,
       74,   75,   29,   43,   74,   75,   29,   43,   74,   75,

       29,   43,   74,   75,   29,   43,   74,   75,   29,   43,
       74,   75,   29,   43,   74,   75,   29,   43,   74,   75,
       29,   43,   74,   75,   29,   43,   74,   75,   73,   74,
       75,   19,   74,   75,   18,   74,   75,   18,   74,   75,
       18,   74,   75,   18,   74,   75,   21,   74,   75,   20,
       73,   74,   75,   23,   72,   75,   21,   66,   74,   75,
       21,   71,   74,   75,   21,   65,   74,   75,   22,   74,
       75,   20,   21,   74,   75,   24,   74,   75,   21,   74,
       75,   21,   74,   75,   21,   74,   75,   21,   74,   75,
       14,   74,   75,   14,   74,   75,   14,   74,   75,   14,

       74,   75,   15,   73,   74,   75,   15,   74,   75,   17,
       74,   75,   16,   74,   75,   16,   74,   75,   16,   74,
       75,   16,   74,   75,   42,   72,   75,   29,   74,   75,
       29,   74,   75,   29,   74,   75,   29,   74,   75,   29,
       74,   75,   29,   74,   75,   29,   74,   75,   29,   74,
       75,   29,   74,   75,   29,   74,   75,   29,   74,   75,
       29,   74,   75,   29,   74,   75,   29,   74,   75,   29,
       74,   75,   29,   74,   75,   29,   74,   75,   29,   74,
       75,   29,   74,   75,   29,   74,   75,   29,   74,   75,
       29,   74,   75,   29,   74,   75,   29,   74,   75,   38,

       73,   74,   75,   37,   72,   75,   30,   73,   74,   75,
       36,   72,   75,   71,   74,   75,   34,   74,   75,   34,
       74,   75,   34,   74,   75,   34,   74,   75,   34,   74,
       75,   34,   74,   75,   34,   74,   75,   34,   74,   75,
       34,   74,   75,   34,   74,   75,   34,   74,   75,   34,
       74,   75,   34,   74,   75,   34,   74,   75,   34,   74,
       75,   34,   74,   75,   34,   74,   75,   34,   74,   75,
       34,   74,   75,   34,   74,   75,   34,   74,   75,   34,
       74,   75,   73,   74,   75,16423,   40,   72,   75, 8233,
       74,   75, 8233,   71,   74,   75, 8233,   74,   75, 8233,

       74,   75, 8233,   74,   75,   49,   50,   74,   75,   49,
       50,   73,   74,   75,   50,   66,   74,   75,   49,   50,
       71,   74,   75,   48,   50,   65,   74,   75,   49,   50,
       74,   75,   49,   50,   74,   75,   50,   74,   75,   49,
       50,   74,   75,   55,   56,   74,   75,   55,   56,   73,
       74,   75,   54,   56,   66,   74,   75,   55,   56,   71,
       74,   75,   56,   65,   74,   75,   55,   56,   74,   75,
       55,   56,   74,   75,   56,   74,   75,   55,   56,   74,
       75,   59,   62,   74,   75,   59,   61,   62,   73,   74,
       75,   59,   60,   72,   75,   59,   62,   66,   74,   75,

       59,   62,   71,   74,   75,   59,   62,   65,   74,   75,
       59,   62,   74,   75,   59,   62,   74,   75,   62,   74,
       75,   59,   62,   74,   75,   67,   74,   75,   67,   73,
       74,   75,   69,   72,   75,   66,   67,   74,   75,   67,
       71,   74,   75,   65,   67,   74,   75,   67,   74,   75,
       67,   74,   75,   67,   74,   75,   73,   71,   70,   71,
       66,   65,   13,   27,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   25,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   26,

       29,   43,   29,   43,   26,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   73,
       19,   18,   18,   21,   20,   73,   21,   21,   71,   21,
       70,   71,   21,   21,   21,   66,   21,   65,   21,   14,
       14,   15,   73,   16,   16,   29,   29,   29,   29,   29,
       29,   25,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   26,   29,   29,   26,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   38,
       73,   37,   30,   73,   35,   70,   71,   34,   34,   34,

       34,   34,   32,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   33,   34,   34,   33,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   73,
    16423,   40, 8231,   49,   49,   73,   49,   71,   49,   70,
       71,   66,   49,   46,   46,   45,   55,   55,   73,   55,
       71,   55,   70,   71,   65,   55,   52,   52,   51,   61,
       73,   59,   59,   59,   67,   67,   73,   68,   67,   67,
       71,   67,   70,   71,   67,   66,   67,   65,   67,   67,
       64,   70,   71,   63,   13,   28,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,

       29,   43,   29,   43,   25,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   21,
       64,   21,   70,   71,   21,   63,   16,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   25,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   34,   34,   34,   34,   34,   34,
       34,   32,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   47,   64,

       49,   70,   71,   55,   70,   71,   53,   63,   57,   64,
       58,   63,   64,   67,   67,   70,   71,   63,   67,   13,
       13,   28,   29,   43,    4,   29,   43,   25,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
        1,   29,   43,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,    4,   29,   25,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   31,   33,   34,   34,   34,

       34,   34,   34,   13,   29,   43,   25,   29,   43,   25,
       29,   43,   12,   28,16393,16395,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   25,   29,   25,   29,   29,   29,   29,   29,   29,
       29,   29,   34,   34,   34,   34,   34,   34,   34,   34,
        3,   10,   27,   12,   28,16393,16395,   29,   43,   29,
       43,    8,   28,16389,16391,   29,   29,   34,   34, 8203,
       28,   29,   43,    6,   27,    8,   28,16389,16391,   29,
       34, 8201,   27, 8203,   28, 8199,   28, 8197,   27, 8199,
       28,    2

    } ;

static const flex_int16_t yy_accept[576] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    4,    5,    6,
        8,   11,   13,   16,   19,   22,   24,   26,   28,   31,
       33,   37,   41,   45,   49,   53,   57,   61,   65,   69,
       73,   77,   81,   85,   89,   93,   97,  101,  105,  109,
      113,  117,  121,  125,  129,  132,  135,  138,  141,  144,
      147,  150,  154,  157,  161,  165,  169,  172,  176,  179,
      182,  185,  188,  191,  194,  197,  200,  203,  207,  210,
      213,  216,  219,  222,  225,  228,  231,  234,  237,  240,

      243,  246,  249,  252,  255,  258,  261,  264,  267,  270,
      273,  276,  279,  282,  285,  288,  291,  294,  297,  300,
      304,  307,  311,  314,  317,  320,  323,  326,  329,  332,
      335,  338,  341,  344,  347,  350,  353,  356,  359,  362,
      365,  368,  371,  374,  377,  380,  383,  387,  390,  393,
      397,  400,  403,  406,  410,  415,  419,  424,  429,  433,
      437,  440,  444,  448,  453,  458,  463,  467,  471,  475,
      478,  482,  486,  492,  496,  501,  506,  511,  515,  519,
      522,  526,  529,  533,  536,  540,  544,  548,  551,  554,
      557,  558,  558,  559,  561,  561,  562,  563,  563,  564,

      565,  565,  567,  569,  571,  573,  575,  577,  580,  582,
      584,  586,  588,  590,  592,  594,  596,  598,  600,  603,
      605,  608,  610,  612,  614,  616,  618,  620,  622,  624,
      626,  628,  630,  631,  632,  633,  634,  635,  637,  638,
      640,  643,  644,  645,  647,  649,  650,  651,  652,  654,
      654,  655,  656,  657,  658,  659,  660,  661,  662,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  673,  674,
      676,  677,  679,  680,  681,  682,  683,  684,  685,  686,
      687,  688,  689,  690,  692,  693,  695,  698,  699,  700,
      701,  702,  703,  705,  706,  707,  708,  709,  710,  711,

      712,  713,  714,  715,  717,  718,  720,  721,  722,  723,
      724,  725,  726,  727,  728,  729,  730,  732,  733,  734,
      735,  737,  737,  739,  742,  743,  744,  745,  746,  747,
      748,  750,  752,  755,  755,  756,  757,  758,  759,  760,
      762,  763,  764,  765,  766,  768,  768,  769,  770,  772,
      775,  776,  778,  780,  781,  782,  784,  785,  785,  785,
      786,  787,  789,  791,  793,  795,  797,  799,  801,  803,
      805,  808,  810,  812,  814,  816,  818,  820,  822,  824,
      826,  828,  830,  832,  834,  836,  838,  840,  842,  845,
      847,  848,  849,  850,  851,  852,  853,  854,  855,  856,

      857,  859,  860,  861,  862,  863,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  876,  877,
      878,  879,  880,  881,  882,  884,  885,  886,  887,  888,
      889,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      899,  901,  904,  904,  907,  909,  909,  911,  913,  915,
      918,  920,  920,  921,  922,  923,  925,  928,  931,  933,
      935,  937,  939,  939,  941,  942,  944,  946,  948,  950,
      952,  954,  956,  958,  960,  962,  964,  965,  967,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  989,

      990,  991,  992,  993,  994,  995,  996,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1007, 1010, 1013, 1017, 1019, 1021,
     1023, 1025, 1027, 1029, 1031, 1031, 1032, 1034, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1051, 1052, 1054, 1054, 1058, 1060,
     1062, 1066, 1067, 1068, 1069, 1070, 1070, 1072, 1074, 1076,
     1076, 1080, 1081, 1082, 1082, 1084, 1084, 1086, 1088, 1088,
     1090, 1090, 1092, 1093, 1093
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    4,    7,    8,
        9,    4,    4,   10,    4,   11,    4,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    4,
        4,    4,    1,   14,   15,   15,   15,   15,   15,   16,
       15,   15,   15,   15,   15,   15,   15,   17,   15,   15,
       15,   18,   15,   19,   20,   15,   15,   15,   15,   15,
        4,   21,    4,    1,   22,    4,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   15,   32,   33,   34,   35,
       36,   37,   15,   38,   39,   40,   41,   15,   42,   43,
       44,   15,    4,    4,    4,    4,    1,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15
    } ;

static const YY_CHAR yy_meta[45] =
    {   0,
        1,    2,    3,    4,    5,    4,    5,    6,    2,    4,
        7,    8,    2,    1,    9,    9,    9,    9,    9,    9,
       10,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9
    } ;

static const flex_int16_t yy_base[622] =
    {   0,
        0,   40,   81,    0,  125,    0,  169,    0,  213,    0,
      257,    0,  301,    0,    6,    8,  345,    0,  389,  430,
      470,  510,  550,  590,  630,  670,  710,  750, 1843, 1844,
     1840, 1844, 1836, 1834, 1832,    7,   10,   14, 1844,    0,
        5,   14,   15,   22,   23,  403,   28,   42,  389,   46,
      391,  407,  390,  418,   48,  431,  409,  443,  451,  452,
      472,  487,  476,  478,   47, 1844,    0,   57,  496,  522,
        0, 1836, 1844, 1832,   66, 1829, 1844,    0, 1844,  791,
      812,    6,  375,    0,  399,  528,  531, 1833, 1844, 1844,
     1823,  513,  536,  568, 1844,   58,  474,  485,  554,  534,

      576,  574,  569,  590,  591,  609,  608,  511,  619,  592,
      613,  632,  651,  656,  614,  649,  687,  670,  688,   74,
     1844, 1831, 1844, 1826,    0, 1808,  495, 1792,  702,  377,
     1791,  428, 1801,  422,  501, 1794,  698, 1803, 1789, 1786,
      540,  679, 1785,  716,  439, 1791,  587, 1844, 1844, 1815,
      675,  724,  731,    0, 1818, 1814,  738, 1811,  717,  756,
      602,  766,    0, 1784, 1771,  759, 1759,  734,  771,  653,
      772, 1844, 1754, 1844, 1741, 1726, 1715,  753,  820,    0,
      823,    0, 1710,  632, 1697, 1676, 1668,  776,  824,  827,
     1671, 1648,    0,    0, 1639, 1639, 1629,  780,  515, 1844,

        0,  556,  739,  658,  795,  832,  838,  813,  836,  843,
      800,  842,  848,  860,  861,  865,  866,  870,  872,  878,
      880,  882,  884,  886,  890,  896,  897,  901,  902,  909,
      903,  911,  695, 1844,    0,  921,    0, 1615, 1609,  939,
      942, 1606,  924, 1599, 1590,    0,    0,  925, 1592,    0,
     1582,  928,  934,  945,  946,  950,  955,  956,  957,  961,
      963,  962,  972,  968,  979,  981,  987,  995,  997, 1001,
     1002, 1003, 1007, 1009, 1011, 1013, 1015, 1019, 1021, 1026,
     1027, 1032, 1034,  797, 1844, 1576,    0,    0, 1481, 1472,
      970, 1486,   26, 1484, 1487, 1474, 1479,  519, 1480, 1469,

     1463, 1464, 1449,    0, 1440,    0, 1420, 1413, 1409, 1405,
     1403, 1392, 1361, 1373, 1363, 1359,  812, 1844, 1844,    0,
     1377, 1372, 1046, 1050, 1367, 1055, 1844,  897, 1844,    0,
     1368, 1058, 1059, 1358, 1348, 1068, 1844,  982, 1844, 1343,
     1339, 1327, 1844,    0, 1319,  708, 1844, 1312,    0,    0,
     1308, 1308, 1288, 1069, 1844,    0, 1844, 1274,    0, 1070,
     1074, 1075, 1076, 1080, 1081, 1082, 1086, 1087, 1088, 1093,
     1104, 1094, 1102, 1108, 1113, 1112, 1117, 1119, 1123, 1129,
     1131, 1137, 1141, 1142, 1146, 1148, 1150,    0, 1172,    0,
     1249, 1152, 1161, 1176, 1178, 1182, 1154, 1156, 1186, 1188,

     1190, 1196, 1198, 1200, 1207, 1202, 1208, 1212, 1218, 1223,
     1229, 1227, 1233, 1235, 1239, 1241, 1243, 1217, 1218, 1212,
     1198, 1199, 1182, 1174,    0, 1184, 1175, 1173, 1152, 1139,
     1147, 1115, 1120, 1104, 1103, 1093, 1077, 1078, 1070, 1044,
     1844, 1248,  991, 1252, 1844, 1045, 1844, 1844,    0,    0,
        0, 1060, 1844, 1250, 1257, 1259, 1267, 1269, 1271, 1273,
     1279, 1277,    0, 1281, 1066, 1283, 1285, 1291, 1289, 1293,
     1295, 1297, 1299, 1314, 1315, 1320, 1321, 1322, 1328, 1330,
     1332, 1339, 1341, 1343, 1345, 1350, 1352, 1351, 1358, 1356,
     1365, 1370, 1377, 1379, 1383, 1029, 1014, 1011,  996,  920,

      918,  899,  890,  895,  837,  841,    0,  815,  821,  782,
      780,  767, 1387, 1389, 1391, 1399, 1403, 1404, 1405, 1409,
     1410, 1411, 1415, 1417,    0, 1416, 1429, 1433, 1422, 1438,
     1439, 1447, 1451, 1452, 1453,  746,  747,  735,  734,  713,
      695,  704,  683,  858,  702, 1844,    0, 1457, 1458, 1459,
     1463, 1465, 1471,  644,  621,  618, 1473, 1475, 1844,    0,
     1479, 1481,  602,  584, 1844,    0, 1485, 1486,  574, 1844,
        0, 1487,  502, 1844, 1515, 1525, 1535, 1545, 1555, 1565,
     1575,  490, 1580, 1582, 1591, 1601, 1611, 1614, 1617, 1621,
     1623, 1631, 1641, 1650, 1660, 1670, 1679, 1689, 1699, 1709,

     1719, 1729, 1734,  440, 1743,  431, 1753, 1763, 1773, 1783,
      419, 1788, 1792,  410, 1796,  396,   31, 1800, 1804,   26,
     1808
    } ;

static const flex_int16_t yy_def[622] =
    {   0,
      575,  575,  574,    3,  574,    5,  574,    7,  574,    9,
      574,   11,  574,   13,    2,    2,  574,   17,  576,  576,
      577,  577,  578,  578,  579,  579,  580,  580,  574,  574,
      574,  574,  574,  581,  574,  574,  574,  574,  574,  582,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  574,  574,  584,  584,  584,  584,
      585,  574,  574,  585,  586,  585,  574,  585,  574,  587,
      587,   81,   81,  588,  588,  588,  588,  574,  574,  574,
      589,  589,  589,  589,  574,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  574,
      574,  574,  574,  581,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  574,  574,  581,
      574,  574,  574,  593,  593,  574,  594,  574,  593,  593,
      595,  593,  596,  596,  574,  597,  574,  596,  596,  598,
      596,  574,  574,  574,  574,  581,  574,  574,  574,  599,
      574,  600,  600,  574,  600,  601,  600,  600,  600,  600,
      574,  574,  581,  602,  574,  574,  574,  574,  603,  574,

      604,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  574,  574,  584,  584,  585,  574,  585,  586,
      605,  585,   81,  585,  585,   81,  588,  588,  574,  606,
      589,  589,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  574,  574,  574,  602,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  574,  574,  593,
      593,  574,  594,  607,  574,  593,  574,  574,  574,  596,
      596,  597,  608,  574,  574,  596,  574,  574,  574,  574,
      574,  574,  574,  600,  600,  574,  574,  600,  601,  609,
      600,  600,  600,  600,  574,  602,  574,  610,  611,  603,
      612,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  585,  605,  585,
      589,  590,  590,  590,  590,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      574,  607,  574,  608,  574,  574,  574,  574,  600,  609,
      600,  610,  574,  613,  612,  583,  583,  583,  583,  583,
      583,  583,  614,  583,  574,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  613,  583,  583,  583,  615,  583,  583,  583,
      583,  583,  583,  583,  616,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  591,  591,  591,  591,  591,
      591,  591,  591,  574,  574,  574,  617,  615,  583,  583,
      618,  590,  590,  591,  591,  574,  619,  583,  574,  620,
      618,  590,  591,  574,  574,  617,  619,  621,  574,  574,
      620,  621,  574,    0,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574
    } ;

static const flex_int16_t yy_nxt[1889] =
    {   0,
      574,   31,   32,  574,   33,   34,   35,  120,  121,  120,
      121,  196,  200,  197,  196,  201,  197,   36,  196,   37,
      197,  200,  200,  246,  201,  201,  196,  198,  197,  200,
      200,  198,  201,  201,  568,  200,  203,   36,  201,  557,
       38,   31,   32,  246,   33,   34,   35,  198,  233,  200,
      204,  198,  201,  200,  234,  200,  201,   36,  201,   37,
      205,  196,  207,  197,  420,  200,  208,  193,  201,  421,
      222,  241,  212,  193,  193,  284,  285,   36,  193,  209,
       38,   30,   31,   39,   30,   33,   34,   35,   30,   30,
       30,   30,   30,   30,   40,   41,   42,   43,   44,   45,

       46,   30,   41,   47,   48,   49,   50,   51,   52,   53,
       41,   54,   41,   55,   41,   56,   57,   58,   59,   60,
       61,   62,   63,   41,   64,   30,   65,   32,   30,   33,
       34,   35,   66,   30,   30,   30,   30,   30,   30,   67,
       67,   67,   68,   67,   69,   30,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   68,   67,   67,   70,   67,   67,   67,   71,
       72,   73,   71,   74,   75,   76,   30,   77,   78,   71,
       71,   79,   71,   80,   80,   80,   81,   80,   82,   71,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   81,   80,   80,   83,
       80,   80,   80,   30,   31,   32,   30,   33,   34,   35,
       30,   30,   30,   30,   30,   30,   30,   84,   84,   84,
       85,   84,   86,   30,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   84,   84,   87,   84,   84,   84,   30,   88,   32,
       30,   33,   34,   35,   89,   89,   89,   30,   30,   90,
       30,   91,   91,   91,   92,   91,   93,   30,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   91,   91,   94,   91,   91,

       91,   30,   31,   95,   30,   33,   34,   35,   30,   30,
       30,   30,   30,   30,   40,   96,   97,   98,   99,  100,
      101,   30,   96,  102,  103,  104,  105,  106,  107,  108,
       96,  109,   96,  110,   96,  111,  112,  113,  114,  115,
      116,  117,  118,   96,  119,   30,  122,  123,   30,   33,
      124,   35,   30,   30,   30,   30,   30,   30,   30,  125,
      126,  125,  127,  128,  129,   30,  125,  130,  131,  132,
      133,  134,  135,  136,  125,  137,  125,  138,  125,  139,
      140,  141,  142,  125,  143,  144,  145,  125,  146,   30,
      147,  148,  246,   33,  150,   35,  200,  200,  200,  201,

      201,  201,   30,  196,  551,  197,  151,  196,  152,  197,
      200,  292,  246,  201,  200,  293,  200,  201,  517,  201,
      206,  210,  218,  213,  211,  200,  151,  454,  201,  153,
       30,  147,  148,  214,   33,  150,   35,  215,  200,  391,
      206,  201,  216,   30,  217,  219,  221,  151,  361,  152,
      200,  220,  221,  201,  298,  196,  221,  197,  200,  200,
      295,  201,  201,  296,  299,  224,  223,  151,  314,  315,
      153,  155,   32,  226,  156,  157,  158,  227,  228,  200,
      225,  200,  201,  200,  201,  200,  201,  159,  201,  160,
      161,  196,  200,  197,  200,  201,  254,  201,  199,  196,

      196,  197,  197,  573,  206,  230,  231,  159,  232,  229,
      162,  155,   32,  236,  156,  157,  158,  196,  200,  197,
      255,  201,  358,  250,  206,  359,  196,  159,  197,  160,
      161,  300,  196,  236,  197,  196,  301,  197,  302,  236,
      196,  200,  197,  269,  201,  248,  250,  159,  248,  426,
      162,  164,   32,  252,  165,  166,  167,  427,  196,  236,
      197,  200,  309,  200,  201,  248,  201,  168,  248,  169,
      170,  256,  196,  252,  197,  573,  200,  310,  250,  201,
      196,  200,  197,  200,  201,  252,  201,  168,  317,  318,
      171,  164,   32,  257,  165,  166,  167,  200,  200,  200,

      201,  201,  201,  328,  329,  252,  260,  168,  258,  169,
      170,  569,  259,  257,  273,  200,  200,  263,  201,  201,
      200,  200,  261,  201,  201,  262,  200,  168,  306,  201,
      171,  173,  174,  346,  175,  176,  177,  347,  266,  200,
      279,  264,  201,  267,  564,  268,  270,  178,  274,  179,
      180,  265,  271,  272,  338,  339,  200,  272,  200,  201,
      196,  201,  197,  200,  306,  200,  201,  178,  201,  272,
      181,  173,  174,  275,  175,  176,  177,  200,  277,  196,
      201,  197,  278,  196,  563,  197,  280,  178,  276,  179,
      180,  196,  363,  197,  200,  200,  233,  201,  201,  281,

      282,  311,  234,  545,  257,  312,  196,  178,  197,  346,
      181,  183,  184,  347,  185,  186,  187,  306,  283,  291,
      196,  325,  197,  197,  257,  304,  425,  188,  196,  189,
      197,  305,  306,  291,  425,  196,  306,  197,  196,  291,
      335,  198,  193,  324,  193,  425,  200,  188,  198,  201,
      190,  183,  184,  291,  185,  186,  187,  196,  193,  197,
      325,  198,  197,  193,  333,  193,  555,  188,  198,  189,
      325,  362,  197,  326,  306,  196,  196,  335,  335,  193,
      352,  554,  353,  326,  196,  425,  197,  188,  336,  336,
      190,  237,  306,  326,  237,  237,  237,  237,  284,  285,

      237,  237,  200,  326,  237,  201,  306,  200,  336,  336,
      201,  237,  237,  317,  318,  237,  244,  237,  245,  543,
      200,  237,  237,  201,  196,  237,  197,  196,  352,  197,
      353,  352,  237,  353,  370,  364,  196,  198,  197,  200,
      198,  354,  201,  200,  354,  200,  201,  306,  201,  200,
      200,  365,  201,  201,  306,  200,  366,  198,  201,  544,
      198,  354,  367,  221,  354,  368,  542,  200,  200,  371,
      201,  201,  200,  200,  541,  201,  201,  200,  372,  200,
      201,  369,  201,  556,  374,  200,  373,  200,  201,  200,
      201,  200,  201,  200,  201,  375,  201,  200,  443,  329,

      201,  376,  221,  200,  200,  377,  201,  201,  200,  200,
      200,  201,  201,  201,  378,  379,  200,  540,  200,  201,
      381,  201,  539,  221,  380,  196,  382,  197,  237,  196,
      237,  197,  196,  384,  197,  538,  383,  387,  250,  385,
      193,  200,  386,  356,  201,  221,  193,  193,  537,  356,
      356,  193,  200,  200,  356,  201,  201,  200,  425,  196,
      201,  197,  200,  200,  200,  201,  201,  201,  200,  200,
      200,  201,  201,  201,  196,  200,  197,  392,  201,  200,
      393,  272,  201,  446,  339,  398,  200,  397,  200,  201,
      394,  201,  443,  329,  200,  395,  400,  201,  402,  401,

      396,  399,  200,  404,  200,  201,  403,  201,  200,  200,
      200,  201,  201,  201,  200,  405,  200,  201,  200,  201,
      200,  201,  200,  201,  272,  201,  200,  306,  200,  201,
      406,  201,  407,  200,  200,  425,  201,  201,  408,  200,
      409,  200,  201,  411,  201,  412,  446,  339,  272,  410,
      193,  536,  193,  414,  356,  425,  356,  415,  413,  325,
      417,  197,  193,  356,  193,  356,  193,  465,  453,  272,
      356,  416,  196,  352,  335,  353,  512,  358,  193,  356,
      359,  200,  200,  200,  201,  201,  201,  200,  200,  200,
      201,  201,  201,  200,  200,  200,  201,  201,  463,  425,

      200,  200,  457,  201,  201,  465,  458,  459,  461,  200,
      511,  200,  201,  456,  201,  200,  460,  510,  201,  200,
      200,  221,  201,  201,  200,  462,  200,  201,  221,  201,
      200,  509,  464,  201,  466,  467,  200,  508,  200,  201,
      468,  201,  507,  506,  200,  458,  470,  201,  200,  200,
      505,  201,  201,  200,  469,  200,  201,  200,  201,  200,
      201,  200,  201,  200,  201,  471,  201,  221,  200,  474,
      504,  201,  425,  356,  503,  472,  482,  458,  475,  356,
      356,  473,  476,  200,  356,  200,  201,  478,  201,  200,
      477,  465,  201,  200,  483,  200,  463,  200,  201,  502,

      201,  306,  479,  200,  480,  200,  201,  200,  201,  200,
      201,  306,  201,  501,  200,  200,  481,  201,  201,  200,
      500,  499,  201,  272,  272,  200,  485,  484,  201,  486,
      200,  487,  498,  201,  200,  479,  200,  201,  497,  201,
      200,  489,  200,  201,  425,  201,  200,  488,  200,  201,
      200,  201,  356,  201,  356,  496,  356,  358,  356,  250,
      359,  272,  493,  490,  200,  491,  200,  201,  356,  201,
      479,  494,  356,  492,  200,  495,  200,  201,  200,  201,
      200,  201,  453,  201,  200,  458,  200,  201,  200,  201,
      200,  201,  200,  201,  351,  201,  200,  515,  200,  201,

      200,  201,  200,  201,  200,  201,  200,  201,  514,  201,
      221,  518,  348,  521,  451,  516,  449,  520,  523,  519,
      345,  200,  200,  221,  525,  201,  522,  200,  200,  200,
      201,  201,  201,  448,  221,  200,  524,  200,  201,  200,
      201,  221,  201,  447,  340,  221,  200,  479,  200,  201,
      200,  201,  200,  201,  334,  201,  527,  200,  200,  200,
      201,  201,  201,  200,  445,  200,  201,  526,  201,  331,
      272,  322,  200,  529,  532,  201,  441,  200,  321,  528,
      201,  530,  531,  534,  200,  440,  200,  525,  533,  201,
      200,  272,  544,  201,  358,  272,  200,  359,  200,  201,

      545,  201,  439,  438,  306,  272,  200,  535,  272,  201,
      546,  200,  200,  547,  201,  201,  200,  200,  200,  201,
      201,  201,  200,  200,  200,  201,  201,  201,  458,  200,
      544,  437,  201,  436,  545,  435,  200,  458,  549,  201,
      200,  550,  458,  201,  221,  200,  200,  434,  201,  201,
      458,  221,  306,  433,  200,  479,  552,  201,  200,  200,
      200,  201,  201,  201,  546,  200,  200,  547,  201,  201,
      559,  553,  200,  560,  479,  201,  432,  272,  200,  479,
      565,  201,  200,  566,  431,  201,  559,  272,  200,  560,
      479,  201,  565,  570,  570,  566,  571,  571,  558,  430,

      306,  221,  221,  429,  428,  562,  425,  272,  424,  423,
      422,  306,  419,  418,  272,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  193,  193,  286,  193,  193,
      193,  193,  193,  193,  193,  202,  202,  202,  202,  235,
      235,  237,  250,  249,  237,  237,  242,  237,  237,  237,

      237,  240,  240,  239,  240,  240,  240,  240,  240,  240,
      240,  243,  390,  388,  243,  243,  238,  243,  243,  243,
      243,  247,  247,  251,  251,  251,  253,  253,  253,  253,
      288,  288,  319,  319,  319,  195,  319,  319,  319,  319,
      319,  320,  320,  192,  320,  357,  320,  320,  320,  320,
      323,  323,  355,  323,  323,  323,  323,  323,  323,  323,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      330,  330,  191,  330,  351,  330,  330,  330,  330,  332,
      332,  350,  332,  332,  332,  332,  332,  332,  332,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  343,

      343,  348,  343,  343,  343,  343,  343,  343,  343,  344,
      344,  345,  344,  344,  344,  344,  344,  344,  344,  349,
      349,  342,  349,  349,  349,  349,  349,  349,  349,  356,
      356,  194,  356,  356,  356,  356,  356,  356,  356,  360,
      360,  360,  360,  389,  389,  341,  389,  389,  389,  389,
      389,  389,  389,  442,  442,  340,  442,  442,  442,  442,
      442,  442,  442,  444,  444,  334,  444,  444,  444,  444,
      444,  444,  444,  450,  450,  192,  450,  450,  450,  450,
      450,  450,  450,  452,  452,  331,  452,  452,  452,  452,
      452,  452,  452,  455,  455,  455,  455,  513,  513,  513,

      513,  548,  548,  548,  548,  561,  561,  561,  561,  567,
      567,  567,  567,  572,  572,  572,  572,  195,  322,  321,
      194,  316,  313,  306,  308,  307,  303,  297,  294,  290,
      289,  287,  286,  250,  249,  242,  239,  238,  195,  194,
      192,  191,  574,   29,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574
    } ;

static const flex_int16_t yy_chk[1889] =
    {   0,
        0,    1,    1,    0,    1,    1,    1,   15,   15,   16,
       16,   36,   41,   36,   37,   41,   37,    1,   38,    1,
       38,   42,   43,   82,   42,   43,   44,   37,   44,   44,
       45,   38,   44,   45,  620,   47,   42,    1,   47,  617,
        1,    2,    2,   82,    2,    2,    2,   37,   65,   48,
       43,   38,   48,   50,   65,   55,   50,    2,   55,    2,
       45,   68,   47,   68,  293,   96,   47,   75,   96,  293,
       55,   75,   50,   75,   75,  120,  120,    2,   75,   48,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   83,   19,   19,   19,   49,   53,   51,   49,

       53,   51,   19,   85,  616,   85,   19,   46,   19,   46,
       46,  130,   83,   46,   52,  130,   57,   52,  614,   57,
       46,   49,   53,   51,   49,   54,   19,  611,   54,   19,
       20,   20,   20,   51,   20,   20,   20,   52,   56,  606,
       46,   56,   52,   20,   52,   54,   57,   20,  604,   20,
       58,   54,   54,   58,  134,   59,   54,   59,   59,   60,
      132,   59,   60,  132,  134,   58,   56,   20,  145,  145,
       20,   21,   21,   59,   21,   21,   21,   59,   60,   61,
       58,   97,   61,   63,   97,   64,   63,   21,   64,   21,
       21,   62,   98,   62,   62,   98,   97,   62,  582,  127,

       69,  127,   69,  573,   62,   63,   63,   21,   64,   61,
       21,   22,   22,   69,   22,   22,   22,   92,  108,   92,
       98,  108,  199,   92,   62,  199,   70,   22,   70,   22,
       22,  135,   86,   69,   86,   87,  135,   87,  135,   70,
       93,  100,   93,  108,  100,   86,   93,   22,   87,  298,
       22,   23,   23,   93,   23,   23,   23,  298,   99,   70,
       99,   99,  141,  202,   99,   86,  202,   23,   87,   23,
       23,  100,   94,   93,   94,  569,  103,  141,   94,  103,
      101,  102,  101,  101,  102,   94,  101,   23,  147,  147,
       23,   24,   24,  101,   24,   24,   24,  104,  105,  110,

      104,  105,  110,  161,  161,   94,  103,   24,  102,   24,
       24,  564,  102,  101,  110,  107,  106,  105,  107,  106,
      111,  115,  104,  111,  115,  104,  109,   24,  563,  109,
       24,   25,   25,  184,   25,   25,   25,  184,  107,  112,
      115,  106,  112,  107,  556,  107,  109,   25,  111,   25,
       25,  106,  109,  109,  170,  170,  116,  109,  113,  116,
      114,  113,  114,  114,  555,  204,  114,   25,  204,  112,
       25,   26,   26,  113,   26,   26,   26,  118,  114,  151,
      118,  151,  114,  142,  554,  142,  116,   26,  113,   26,
       26,  117,  204,  117,  117,  119,  233,  117,  119,  118,

      118,  142,  233,  545,  117,  142,  129,   26,  129,  346,
       26,   27,   27,  346,   27,   27,   27,  543,  119,  129,
      144,  159,  144,  159,  117,  137,  542,   27,  152,   27,
      152,  137,  137,  144,  541,  153,  137,  153,  168,  129,
      168,  152,  157,  157,  157,  540,  203,   27,  153,  203,
       27,   28,   28,  144,   28,   28,   28,  178,  157,  178,
      160,  152,  160,  166,  166,  166,  539,   28,  153,   28,
      162,  203,  162,  160,  538,  169,  171,  169,  171,  166,
      188,  537,  188,  162,  198,  536,  198,   28,  169,  171,
       28,   80,  512,  160,   80,   80,   80,   80,  284,  284,

       80,   80,  205,  162,   80,  205,  511,  211,  169,  171,
      211,   80,   81,  317,  317,   81,   81,   81,   81,  510,
      208,   81,   81,  208,  179,   81,  179,  181,  189,  181,
      189,  190,   81,  190,  211,  205,  206,  179,  206,  206,
      181,  189,  206,  209,  190,  207,  209,  509,  207,  212,
      210,  208,  212,  210,  508,  213,  208,  179,  213,  544,
      181,  189,  209,  207,  190,  210,  506,  214,  215,  212,
      214,  215,  216,  217,  505,  216,  217,  218,  213,  219,
      218,  210,  219,  544,  214,  220,  213,  221,  220,  222,
      221,  223,  222,  224,  223,  215,  224,  225,  328,  328,

      225,  217,  216,  226,  227,  218,  226,  227,  228,  229,
      231,  228,  229,  231,  220,  222,  230,  504,  232,  230,
      225,  232,  503,  223,  224,  236,  226,  236,  243,  248,
      243,  248,  252,  228,  252,  502,  227,  232,  252,  230,
      240,  253,  231,  241,  253,  229,  240,  240,  501,  241,
      241,  240,  254,  255,  241,  254,  255,  256,  500,  257,
      256,  257,  257,  258,  259,  257,  258,  259,  260,  262,
      261,  260,  262,  261,  291,  264,  291,  254,  264,  263,
      255,  258,  263,  338,  338,  261,  265,  260,  266,  265,
      256,  266,  443,  443,  267,  259,  262,  267,  264,  263,

      259,  261,  268,  265,  269,  268,  264,  269,  270,  271,
      272,  270,  271,  272,  273,  266,  274,  273,  275,  274,
      276,  275,  277,  276,  267,  277,  278,  499,  279,  278,
      268,  279,  269,  280,  281,  498,  280,  281,  271,  282,
      273,  283,  282,  276,  283,  277,  446,  446,  274,  275,
      323,  497,  323,  279,  324,  496,  324,  281,  278,  326,
      283,  326,  332,  333,  332,  333,  323,  465,  452,  280,
      324,  282,  336,  354,  336,  354,  440,  360,  332,  333,
      360,  361,  362,  363,  361,  362,  363,  364,  365,  366,
      364,  365,  366,  367,  368,  369,  367,  368,  369,  439,

      370,  372,  363,  370,  372,  371,  364,  365,  367,  373,
      438,  371,  373,  362,  371,  374,  366,  437,  374,  376,
      375,  372,  376,  375,  377,  368,  378,  377,  373,  378,
      379,  436,  370,  379,  374,  375,  380,  435,  381,  380,
      377,  381,  434,  433,  382,  376,  379,  382,  383,  384,
      432,  383,  384,  385,  378,  386,  385,  387,  386,  392,
      387,  397,  392,  398,  397,  381,  398,  380,  393,  384,
      431,  393,  430,  389,  429,  382,  397,  386,  385,  389,
      389,  383,  387,  394,  389,  395,  394,  393,  395,  396,
      392,  401,  396,  399,  398,  400,  399,  401,  400,  428,

      401,  427,  394,  402,  395,  403,  402,  404,  403,  406,
      404,  426,  406,  424,  405,  407,  396,  405,  407,  408,
      423,  422,  408,  402,  403,  409,  404,  400,  409,  405,
      410,  407,  421,  410,  412,  406,  411,  412,  420,  411,
      413,  409,  414,  413,  419,  414,  415,  408,  416,  415,
      417,  416,  442,  417,  442,  418,  444,  454,  444,  391,
      454,  410,  414,  411,  455,  412,  456,  455,  442,  456,
      416,  415,  444,  413,  457,  417,  458,  457,  459,  458,
      460,  459,  358,  460,  462,  456,  461,  462,  464,  461,
      466,  464,  467,  466,  353,  467,  469,  460,  468,  469,

      470,  468,  471,  470,  472,  471,  473,  472,  459,  473,
      461,  464,  352,  468,  351,  462,  348,  467,  470,  466,
      345,  474,  475,  472,  474,  475,  469,  476,  477,  478,
      476,  477,  478,  342,  471,  479,  473,  480,  479,  481,
      480,  475,  481,  341,  340,  476,  482,  477,  483,  482,
      484,  483,  485,  484,  335,  485,  481,  486,  488,  487,
      486,  488,  487,  490,  334,  489,  490,  480,  489,  331,
      482,  325,  491,  484,  487,  491,  322,  492,  321,  483,
      492,  485,  486,  489,  493,  316,  494,  493,  488,  494,
      495,  491,  515,  495,  513,  490,  514,  513,  515,  514,

      516,  515,  315,  314,  313,  494,  516,  492,  495,  516,
      517,  518,  519,  517,  518,  519,  520,  521,  522,  520,
      521,  522,  523,  526,  524,  523,  526,  524,  514,  529,
      527,  312,  529,  311,  528,  310,  527,  523,  518,  527,
      528,  520,  521,  528,  519,  530,  531,  309,  530,  531,
      522,  524,  308,  307,  532,  526,  529,  532,  533,  534,
      535,  533,  534,  535,  548,  549,  550,  548,  549,  550,
      551,  531,  552,  551,  534,  552,  305,  530,  553,  532,
      557,  553,  558,  557,  303,  558,  561,  535,  562,  561,
      533,  562,  567,  568,  572,  567,  568,  572,  549,  302,

      301,  558,  550,  300,  299,  552,  297,  562,  296,  295,
      294,  292,  290,  289,  553,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  581,  581,  286,  581,  581,
      581,  581,  581,  581,  581,  583,  583,  583,  583,  584,
      584,  585,  251,  249,  585,  585,  245,  585,  585,  585,

      585,  586,  586,  244,  586,  586,  586,  586,  586,  586,
      586,  587,  242,  239,  587,  587,  238,  587,  587,  587,
      587,  588,  588,  589,  589,  589,  590,  590,  590,  590,
      591,  591,  592,  592,  592,  197,  592,  592,  592,  592,
      592,  593,  593,  196,  593,  195,  593,  593,  593,  593,
      594,  594,  192,  594,  594,  594,  594,  594,  594,  594,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      596,  596,  191,  596,  187,  596,  596,  596,  596,  597,
      597,  186,  597,  597,  597,  597,  597,  597,  597,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  599,

      599,  185,  599,  599,  599,  599,  599,  599,  599,  600,
      600,  183,  600,  600,  600,  600,  600,  600,  600,  601,
      601,  177,  601,  601,  601,  601,  601,  601,  601,  602,
      602,  176,  602,  602,  602,  602,  602,  602,  602,  603,
      603,  603,  603,  605,  605,  175,  605,  605,  605,  605,
      605,  605,  605,  607,  607,  173,  607,  607,  607,  607,
      607,  607,  607,  608,  608,  167,  608,  608,  608,  608,
      608,  608,  608,  609,  609,  165,  609,  609,  609,  609,
      609,  609,  609,  610,  610,  164,  610,  610,  610,  610,
      610,  610,  610,  612,  612,  612,  612,  613,  613,  613,

      613,  615,  615,  615,  615,  618,  618,  618,  618,  619,
      619,  619,  619,  621,  621,  621,  621,  158,  156,  155,
      150,  146,  143,  140,  139,  138,  136,  133,  131,  128,
      126,  124,  122,   91,   88,   76,   74,   72,   35,   34,
       33,   31,   29,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/vsc/github/doxygen/src/pycode.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */

#line 36 "/home/vsc/github/doxygen/src/pycode.l"

#include <vector>
#include <unordered_map>
#include <string>
#include <stack>

#include <stdio.h>

#include "pycode.h"
#include "message.h"
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "config.h"
#include "groupdef.h"
#include "classlist.h"
#include "filedef.h"
#include "namespacedef.h"
#include "tooltip.h"
#include "scopedtypevariant.h"
#include "symbolresolver.h"
#include "debug.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0


struct pycodeYY_state
{
  std::unordered_map< std::string, ScopedTypeVariant > codeClassMap;
  QCString      curClassName;
  StringVector  curClassBases;

  OutputCodeList * code = 0;
  const char *  inputString = 0;     //!< the code fragment as text
  int           inputPosition = 0;   //!< read offset during parsing
  QCString      fileName;
  const char *  currentFontClass = 0;
  bool          insideCodeLine = FALSE;
  const Definition *searchCtx = 0;
  bool          collectXRefs = FALSE;
  int           inputLines = 0;      //!< number of line in the code fragment
  int           yyLineNr = 0;        //!< current line number
  std::unique_ptr<FileDef> exampleFileDef;
  const FileDef *    sourceFileDef = 0;
  const Definition * currentDefinition = 0;
  const MemberDef *  currentMemberDef = 0;
  bool          includeCodeFragment = FALSE;
  QCString      realScope;
  int           bodyCurlyCount = 0;
  bool          searchingForBody = FALSE;
  QCString      classScope;
  int           paramParens = 0;

  bool          insideBody = false;
  bool          exampleBlock = FALSE;
  QCString      exampleName;

  QCString      type;
  QCString      name;

  bool          doubleStringIsDoc = FALSE;
  bool          doubleQuote = FALSE;
  bool          noSuiteFound = FALSE;
  int           stringContext = 0;

  std::stack<yy_size_t> indents;  //!< Tracks indentation levels for scoping in python

  QCString      docBlock;     //!< contents of all lines of a documentation block
  bool          endComment = FALSE;
  VariableContext theVarContext;
  CallContext theCallContext;
  SymbolResolver symbolResolver;
  TooltipManager tooltipManager;
};


#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

static void startCodeLine(yyscan_t yyscanner);
static int countLines(yyscan_t yyscanner);
static void setCurrentDoc(yyscan_t yyscanner, const QCString &anchor);
static void addToSearchIndex(yyscan_t yyscanner, const QCString &text);
static const ClassDef *stripClassName(yyscan_t yyscanner,const QCString &s,Definition *d);
static void codify(yyscan_t yyscanner,const QCString &text);
static void endCodeLine(yyscan_t yyscanner);
static void nextCodeLine(yyscan_t yyscanner);
static void writeMultiLineCodeLink(yyscan_t yyscanner, OutputCodeList &ol, const Definition *d, const QCString &text);
static void startFontClass(yyscan_t yyscanner,const char *s);
static void endFontClass(yyscan_t yyscanner);
static void codifyLines(yyscan_t yyscanner,const QCString &text);
static bool getLinkInScope(yyscan_t yyscanner, const QCString &c, const QCString &m,
                           const QCString &memberText, OutputCodeList &ol, const QCString &text);
static bool getLink(yyscan_t yyscanner, const QCString &className, const QCString &memberName,
                    OutputCodeList &ol, const QCString &text=QCString());
static void generateClassOrGlobalLink(yyscan_t yyscanner, OutputCodeList &ol,
                                      const QCString &clName, bool typeOnly=FALSE);
static void generateFunctionLink(yyscan_t yyscanner, OutputCodeList &ol,
                                const QCString &funcName);
static bool findMemberLink(yyscan_t yyscanner, OutputCodeList &ol,
                           const Definition *sym, const QCString &symName);
static void findMemberLink(yyscan_t yyscanner, OutputCodeList &ol,
                           const QCString &symName);
static void incrementFlowKeyWordCount(yyscan_t yyscanner);
static void adjustScopesAndSuites(yyscan_t yyscanner,unsigned indentLength);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);
static inline void pop_state(yyscan_t yyscanner);

#if 0 // TODO: call me to store local variables and get better syntax highlighting, see code.l
static void addVariable(yyscan_t yyscanner, QCString type, QCString name);
#endif

//-------------------------------------------------------------------

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1539 "/home/vsc/github/doxygen/Debug/generated_src/pycode_intermediate.cpp"

#line 1541 "/home/vsc/github/doxygen/Debug/generated_src/pycode_intermediate.cpp"

#define INITIAL 0
#define Body 1
#define FunctionDec 2
#define FunctionParams 3
#define ClassDec 4
#define ClassInheritance 5
#define Suite 6
#define SuiteCaptureIndent 7
#define SuiteStart 8
#define SuiteMaintain 9
#define SingleQuoteString 10
#define DoubleQuoteString 11
#define TripleString 12
#define DocBlock 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct pycodeYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 302 "/home/vsc/github/doxygen/src/pycode.l"


#line 1836 "/home/vsc/github/doxygen/Debug/generated_src/pycode_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 575 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 574 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 305 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN( FunctionDec );
                                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 311 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN( FunctionDec );
                                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 318 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN( ClassDec );
                                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 324 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      startFontClass(yyscanner,"keywordtype");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 329 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 333 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 337 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 341 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 345 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 10:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 349 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 353 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 357 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 361 "/home/vsc/github/doxygen/src/pycode.l"
{ // decorator
                                      startFontClass(yyscanner,"preprocessor");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK

case 14:
YY_RULE_SETUP
#line 368 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext);
                                      // codify(yyscanner,yytext);
                                      yyextra->curClassName = yytext;
                                      yyextra->curClassBases.clear();
                                      BEGIN( ClassInheritance );
                                    }
	YY_BREAK

case 15:
YY_RULE_SETUP
#line 377 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 381 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // The parser
                                      // is assuming
                                      // that ALL identifiers
                                      // in this state
                                      // are base classes;
                                      // it doesn't check to see
                                      // that the first parenthesis
                                      // has been seen.

                                      // This is bad - it should
                                      // probably be more strict
                                      // about what to accept.

                                      yyextra->curClassBases.push_back(yytext);
                                      yyextra->insideBody = true;
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext);
                                      yyextra->insideBody = false;
                                      // codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 402 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);

                                      // Assume this will
                                      // be a one-line suite;
                                      // found counter-example
                                      // in SuiteStart.

                                      // Push a class scope
                                      ScopedTypeVariant var(yyextra->curClassName);
                                      for (const auto &s : yyextra->curClassBases)
                                      {
                                        const ClassDef *baseDefToAdd = 0;
                                        // find class in the local scope
                                        auto it = yyextra->codeClassMap.find(s);
                                        if (it != yyextra->codeClassMap.end())
                                        {
                                          baseDefToAdd = toClassDef(it->second.globalDef());
                                        }
                                        // Try to find class in global scope
                                        if (baseDefToAdd==0)
                                        {
                                          baseDefToAdd=yyextra->symbolResolver.resolveClass(yyextra->currentDefinition,s.c_str());
                                        }

                                        if (baseDefToAdd && baseDefToAdd->name()!=yyextra->curClassName)
                                        {
                                          var.localDef()->insertBaseClass(baseDefToAdd->name());
                                        }
                                      }
                                      yyextra->codeClassMap.emplace(std::make_pair(yyextra->curClassName.str(),std::move(var)));

                                      // Reset class-parsing variables.
                                      yyextra->curClassName.resize(0);
                                      yyextra->curClassBases.clear();

                                      yyextra->noSuiteFound = TRUE;
                                      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 445 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      generateFunctionLink(yyscanner,*yyextra->code,yytext);
                                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 449 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                      BEGIN( FunctionParams );
                                    }
	YY_BREAK


case 20:
YY_RULE_SETUP
#line 456 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // Parses delimiters
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 461 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 465 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 469 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 473 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);

                                      // Assume this will
                                      // be a one-line suite;
                                      // found counter-example
                                      // in SuiteStart.
                                      yyextra->noSuiteFound = TRUE;
                                      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 25:
YY_RULE_SETUP
#line 487 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // Position-sensitive rules!
                                      // Must come AFTER keyword-triggered rules
                                      // Must come BEFORE identifier NONEMPTY-like rules
                                      //   to syntax highlight.

                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 498 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      incrementFlowKeyWordCount(yyscanner);
                                      startFontClass(yyscanner,"keywordflow");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 27:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 504 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      yyextra->insideBody = true;
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext);
                                      yyextra->insideBody = false;
                                    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 509 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      yyextra->insideBody = true;
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext,TRUE);
                                      yyextra->insideBody = false;
                                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 514 "/home/vsc/github/doxygen/src/pycode.l"
{ codify(yyscanner,yytext); }
	YY_BREAK


case 30:
YY_RULE_SETUP
#line 522 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 525 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN(Body);
                                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 531 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);

                                      // No indentation necessary
                                      yyextra->noSuiteFound = FALSE;
                                    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 540 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      incrementFlowKeyWordCount(yyscanner);
                                      startFontClass(yyscanner,"keywordflow");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);

                                      // No indentation necessary
                                      yyextra->noSuiteFound = FALSE;
                                    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 549 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 554 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString
                                         )
                                      {
                                        REJECT;
                                      }
                                      yy_push_state(YY_START,yyscanner);
                                      BEGIN(DocBlock);
                                      yyextra->docBlock=yytext;
                                    }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 567 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                      if ( yyextra->noSuiteFound )
                                      {
                                        // printf("New suite to capture! [%d]\n", yyextra->yyLineNr);
                                        BEGIN ( SuiteCaptureIndent );
                                      }
                                    }
	YY_BREAK


case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 578 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // Blankline - ignore, keep looking for indentation.
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 583 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // This state lasts momentarily,
                                      // to check the indentation
                                      // level that is about to be
                                      // used.
                                      codifyLines(yyscanner,yytext);
                                      yyextra->indents.push(yyleng);
                                      // printf("Captured indent of %d [line %d]\n", yyleng, yyextra->yyLineNr);
                                      BEGIN( Suite );
                                    }
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 597 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // This implements poor
                                      // indentation-tracking;
                                      // should be improved.
                                      // (translate tabs to space, etc)
                                      codifyLines(yyscanner,yytext);
                                      adjustScopesAndSuites(yyscanner,static_cast<int>(yyleng));
                                    }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 606 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      // If this ever succeeds,
                                      // it means that this is
                                      // a blank line, and
                                      // can be ignored.
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 614 "/home/vsc/github/doxygen/src/pycode.l"
{
                                       // Default rule; matches
                                       // the empty string, assuming
                                       // real text starts here.
                                       // Just go straight to Body.
                                       adjustScopesAndSuites(yyscanner,0);
                                    }
	YY_BREAK

case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 624 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                      BEGIN( SuiteMaintain );
                                    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 628 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 631 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
// Single quoted string like 'That\'s a """nice""" string!'
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 636 "/home/vsc/github/doxygen/src/pycode.l"
{ // line continuation
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 639 "/home/vsc/github/doxygen/src/pycode.l"
{ // escaped char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 642 "/home/vsc/github/doxygen/src/pycode.l"
{ // triple double quotes
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 645 "/home/vsc/github/doxygen/src/pycode.l"
{ // end of the string
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN(yyextra->stringContext);
                                    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 650 "/home/vsc/github/doxygen/src/pycode.l"
{ // normal chars
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 653 "/home/vsc/github/doxygen/src/pycode.l"
{ // normal char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK

// Double quoted string like "That's \"a '''nice'''\" string!"
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 659 "/home/vsc/github/doxygen/src/pycode.l"
{ // line continuation
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 662 "/home/vsc/github/doxygen/src/pycode.l"
{ // escaped char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 665 "/home/vsc/github/doxygen/src/pycode.l"
{ // triple single quotes
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 668 "/home/vsc/github/doxygen/src/pycode.l"
{ // end of the string
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN(yyextra->stringContext);
                                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 673 "/home/vsc/github/doxygen/src/pycode.l"
{ // normal chars
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 676 "/home/vsc/github/doxygen/src/pycode.l"
{ // normal char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK


case 57:
#line 683 "/home/vsc/github/doxygen/src/pycode.l"
case 58:
YY_RULE_SETUP
#line 683 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                      if (yyextra->doubleQuote==(yytext[0]=='"'))
                                      {
                                        endFontClass(yyscanner);
                                        BEGIN(yyextra->stringContext);
                                      }
                                    }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 691 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 694 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 697 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 700 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK

case 63:
YY_RULE_SETUP
#line 706 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      if (YY_START==SingleQuoteString) REJECT;
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      yyextra->doubleQuote=yytext[yyleng-1]=='"';
                                      codify(yyscanner,yytext);
                                      BEGIN(TripleString);
                                    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 714 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      if (YY_START==DoubleQuoteString) REJECT;
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      yyextra->doubleQuote=yytext[yyleng-1]=='"';
                                      codify(yyscanner,yytext);
                                      BEGIN(TripleString);
                                    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 722 "/home/vsc/github/doxygen/src/pycode.l"
{ // single quoted string
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      codify(yyscanner,yytext);
                                      BEGIN(SingleQuoteString);
                                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 734 "/home/vsc/github/doxygen/src/pycode.l"
{ // double quoted string
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      codify(yyscanner,yytext);
                                      BEGIN(DoubleQuoteString);
                                    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 746 "/home/vsc/github/doxygen/src/pycode.l"
{ // contents of current comment line
                                      yyextra->docBlock+=yytext;
                                    }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 749 "/home/vsc/github/doxygen/src/pycode.l"
{ // comment block (next line is also comment line)
                                     yyextra->docBlock+=yytext;
                                    }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 752 "/home/vsc/github/doxygen/src/pycode.l"
{ // comment block ends at the end of this line
                                      // remove special comment (default config)
                                      if (Config_getBool(STRIP_CODE_COMMENTS))
                                      {
                                        yyextra->yyLineNr+=((QCString)yyextra->docBlock).contains('\n');
                                        yyextra->endComment=TRUE;
                                      }
                                      else // do not remove comment
                                      {
                                        startFontClass(yyscanner,"comment");
                                        codifyLines(yyscanner,yyextra->docBlock);
                                        endFontClass(yyscanner);
                                      }
                                      unput(*yytext);
                                      pop_state(yyscanner);
                                    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 768 "/home/vsc/github/doxygen/src/pycode.l"
{
                                      if (YY_START==SingleQuoteString ||
                                         YY_START==DoubleQuoteString ||
                                         YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      yy_push_state(YY_START,yyscanner);
                                      BEGIN(DocBlock);
                                      yyextra->docBlock=yytext;
                                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 779 "/home/vsc/github/doxygen/src/pycode.l"
{ // normal comment
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      startFontClass(yyscanner,"comment");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 790 "/home/vsc/github/doxygen/src/pycode.l"
{
                                    if (yyextra->endComment)
                                    {
                                      yyextra->endComment=FALSE;
                                    }
                                    else
                                    {
                                      codifyLines(yyscanner,yytext);
                                    }
                                    //printf("[pycode] %d NEWLINE [line %d] no match\n",
                                    //       YY_START, yyextra->yyLineNr);

                                    BEGIN(Body);
                                  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 805 "/home/vsc/github/doxygen/src/pycode.l"
{
                                    codify(yyscanner,yytext);
                                    BEGIN(Body);
                                  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 809 "/home/vsc/github/doxygen/src/pycode.l"
{
                                    codify(yyscanner,yytext);
                                    // printf("[pycode] '%s' [ state %d ]  [line %d] no match\n",
                                    //        yytext, YY_START, yyextra->yyLineNr);

                                    BEGIN(Body);
                                  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Body):
case YY_STATE_EOF(FunctionDec):
case YY_STATE_EOF(FunctionParams):
case YY_STATE_EOF(ClassDec):
case YY_STATE_EOF(ClassInheritance):
case YY_STATE_EOF(Suite):
case YY_STATE_EOF(SuiteCaptureIndent):
case YY_STATE_EOF(SuiteStart):
case YY_STATE_EOF(SuiteMaintain):
case YY_STATE_EOF(SingleQuoteString):
case YY_STATE_EOF(DoubleQuoteString):
case YY_STATE_EOF(TripleString):
case YY_STATE_EOF(DocBlock):
#line 817 "/home/vsc/github/doxygen/src/pycode.l"
{
                                    if (YY_START==DocBlock && !Config_getBool(STRIP_CODE_COMMENTS))
                                    {
                                      startFontClass(yyscanner,"comment");
                                      codifyLines(yyscanner,yyextra->docBlock);
                                      endFontClass(yyscanner);
                                    }
                                    yyterminate();
                                  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 826 "/home/vsc/github/doxygen/src/pycode.l"
ECHO;
	YY_BREAK
#line 2737 "/home/vsc/github/doxygen/Debug/generated_src/pycode_intermediate.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 575 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 575 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 574);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 826 "/home/vsc/github/doxygen/src/pycode.l"


/*@ ----------------------------------------------------------------------------
 */

#if 0 // TODO: call me to store local variables and get better syntax highlighting, see code.l
static void addVariable(yyscan_t yyscanner, QCString type, QCString name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("PyVariableContext::addVariable(%s,%s)\n",qPrint(type),qPrint(name));
  QCString ltype = type.simplifyWhiteSpace();
  QCString lname = name.simplifyWhiteSpace();

  auto it = yyextra->codeClassMap.find(ltype.str());
  if (it!=yyextra->codeClassMap.end())
  {
    yyextra->theVarContext.addVariable(lname,std::move(it->second));
  }
  else
  {
    const ClassDef *varType = getResolvedClass(yyextra->currentDefinition,yyextra->sourceFileDef,ltype); // look for global class definitions
    if (varType)
    {
      yyextra->theVarContext.addVariable(lname,ScopedTypeVariant(varType));
    }
    else
    {
      if (!yyextra->theVarContext.atGlobalScope()) // for local variable add a dummy entry to avoid linking to a global that is shadowed.
      {
        yyextra->theVarContext.addVariable(lname.str(),ScopedTypeVariant());
      }
    }
  }
}
#endif

//-------------------------------------------------------------------------------

static int yyread(yyscan_t yyscanner, char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int inputPosition = yyextra->inputPosition;
  const char *s = yyextra->inputString + inputPosition;
  int c=0;
  while( c < max_size && *s )
  {
    *buf++ = *s++;
    c++;
  }
  yyextra->inputPosition += c;
  return c;
}

//-------------------------------------------------------------------------------

/*!
  Examines current stack of white-space indentations;
  re-syncs the parser with the correct scope.
*/
static void adjustScopesAndSuites(yyscan_t yyscanner,unsigned indentLength)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  // States to pop
  if (!yyextra->indents.empty() && indentLength < yyextra->indents.top())
  {
    while (!yyextra->indents.empty() && indentLength < yyextra->indents.top())
    {
      // printf("Exited scope indent of [%d]\n", yyextra->indents.top());
      yyextra->indents.pop(); // Pop the old suite's indentation

      yyextra->currentMemberDef=0;
      if (yyextra->currentDefinition)
        yyextra->currentDefinition=yyextra->currentDefinition->getOuterScope();
    }
  }

  // Are there any remaining indentation levels for suites?
  if (!yyextra->indents.empty())
  {
    BEGIN( Suite );
  }
  else
  {
    BEGIN( Body );
  }
}

//-------------------------------------------------------------------------------

/*! counts the number of lines in the input */
static int countLines(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=yyextra->inputString;
  char c;
  int count=1;
  while ((c=*p))
  {
    p++;
    if (c=='\n') count++;
  }
  if (p>yyextra->inputString && *(p-1)!='\n')
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++;
  }
  return count;
}

//-------------------------------------------------------------------------------

static void setCurrentDoc(yyscan_t yyscanner, const QCString &anchor)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (Doxygen::searchIndex)
  {
    if (yyextra->searchCtx)
    {
      Doxygen::searchIndex->setCurrentDoc(yyextra->searchCtx,yyextra->searchCtx->anchor(),FALSE);
    }
    else
    {
      Doxygen::searchIndex->setCurrentDoc(yyextra->sourceFileDef,anchor,TRUE);
    }
  }
}

//-------------------------------------------------------------------------------

static void addToSearchIndex(yyscan_t /* yyscanner */, const QCString &text)
{
  if (Doxygen::searchIndex)
  {
    Doxygen::searchIndex->addWord(text,FALSE);
  }
}

//-------------------------------------------------------------------------------

static const ClassDef *stripClassName(yyscan_t yyscanner,const QCString &s,Definition *d)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int pos=0;
  QCString type = s;
  QCString className;
  QCString templSpec;
  while (extractClassNameFromType(type,pos,className,templSpec)!=-1)
  {
    QCString clName=className+templSpec;
    const ClassDef *cd=0;
    if (!yyextra->classScope.isEmpty())
    {
      cd=yyextra->symbolResolver.resolveClass(d,yyextra->classScope+"::"+clName);
    }
    if (cd==0)
    {
      cd=yyextra->symbolResolver.resolveClass(d,clName);
    }
    if (cd)
    {
      return cd;
    }
  }

  return 0;
}

//-------------------------------------------------------------------------------

/*! start a new line of code, inserting a line number if yyextra->sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //if (yyextra->currentFontClass) { yyextra->code->endFontClass(yyscanner); }
  if (yyextra->sourceFileDef)
  {
    //QCString lineNumber,lineAnchor;
    //lineNumber.sprintf("%05d",yyextra->yyLineNr);
    //lineAnchor.sprintf("l%05d",yyextra->yyLineNr);

    const Definition *d = yyextra->sourceFileDef->getSourceDefinition(yyextra->yyLineNr);
    //printf("startCodeLine %d d=%p\n",yyextra->yyLineNr,d);
    //yyextra->code->startLineNumber();

    if (!yyextra->includeCodeFragment && d && d->isLinkableInProject())
    {
      yyextra->currentDefinition = d;
      yyextra->currentMemberDef = yyextra->sourceFileDef->getSourceMember(yyextra->yyLineNr);
      yyextra->insideBody = false;
      yyextra->endComment = FALSE;
      yyextra->searchingForBody = TRUE;
      yyextra->realScope = d->name();
      yyextra->classScope = d->name();
      //printf("Real scope: '%s'\n",qPrint(yyextra->realScope));
      yyextra->bodyCurlyCount = 0;
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",yyextra->yyLineNr);
      if (yyextra->currentMemberDef)
      {
        yyextra->code->writeLineNumber(yyextra->currentMemberDef->getReference(),
                                yyextra->currentMemberDef->getOutputFileBase(),
                                yyextra->currentMemberDef->anchor(),yyextra->yyLineNr,
                                !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
      else
      {
        yyextra->code->writeLineNumber(d->getReference(),
                                d->getOutputFileBase(),
                                QCString(),yyextra->yyLineNr,
                                !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
    }
    else
    {
      yyextra->code->writeLineNumber(QCString(),QCString(),QCString(),yyextra->yyLineNr,
                                     !yyextra->includeCodeFragment);
    }
  }
  yyextra->code->startCodeLine(yyextra->sourceFileDef!=0);
  yyextra->insideCodeLine=true;

  if (yyextra->currentFontClass)
  {
    yyextra->code->startFontClass(yyextra->currentFontClass);
  }
}

//-------------------------------------------------------------------------------

static void codify(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->code->codify(text);
}

//-------------------------------------------------------------------------------

static void endCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endFontClass(yyscanner);
  yyextra->code->endCodeLine();
  yyextra->insideCodeLine=false;
}

//-------------------------------------------------------------------------------

static void nextCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *fc = yyextra->currentFontClass;
  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->yyLineNr<yyextra->inputLines)
  {
    yyextra->currentFontClass = fc;
    startCodeLine(yyscanner);
  }
}

//-------------------------------------------------------------------------------

/*! writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(yyscan_t yyscanner,
                  OutputCodeList &ol,
                  const Definition *d,
                  const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (text.isEmpty()) return;
  bool sourceTooltips = Config_getBool(SOURCE_TOOLTIPS);
  yyextra->tooltipManager.addTooltip(d);
  QCString ref  = d->getReference();
  QCString file = d->getOutputFileBase();
  QCString anchor = d->anchor();
  QCString tooltip;
  if (!sourceTooltips) // fall back to simple "title" tooltips
  {
    tooltip = d->briefDescriptionAsTooltip();
  }
  bool done=FALSE;
  const char *p=text.data();
  while (!done)
  {
    const char *sp=p;
    char c;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      yyextra->yyLineNr++;
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(d->codeSymbolType(),ref,file,anchor,QCString(sp,p-sp-1),tooltip);
      nextCodeLine(yyscanner);
    }
    else
    {
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(d->codeSymbolType(),ref,file,anchor,sp,tooltip);
      done=TRUE;
    }
  }
}

//-------------------------------------------------------------------------------

static void startFontClass(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  // if font class is already set don't stop and start it.
  // strcmp does not like null pointers as input.
  if (!yyextra->currentFontClass || !s || strcmp(yyextra->currentFontClass,s))
  {
    endFontClass(yyscanner);
    yyextra->code->startFontClass(s);
    yyextra->currentFontClass=s;
  }
}

//-------------------------------------------------------------------------------

static void endFontClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->currentFontClass)
  {
    yyextra->code->endFontClass();
    yyextra->currentFontClass=0;
  }
}

//-------------------------------------------------------------------------------

static void codifyLines(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (text.isEmpty()) return;
  //printf("codifyLines(%d,\"%s\")\n",yyextra->yyLineNr,text);
  const char *p=text.data(),*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      yyextra->yyLineNr++;
      int l = (int)(p-sp-1);
      char *tmp = (char*)malloc(l+1);
      memcpy(tmp,sp,l);
      tmp[l]='\0';
      yyextra->code->codify(tmp);
      free(tmp);
      nextCodeLine(yyscanner);
    }
    else
    {
      yyextra->code->codify(sp);
      done=TRUE;
    }
  }
}

//-------------------------------------------------------------------------------

static bool getLinkInScope(yyscan_t yyscanner,
                           const QCString &c,  // scope
                           const QCString &m,  // member
                           const QCString &memberText, // exact text
                           OutputCodeList &ol,
                           const QCString &text
                          )
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  GetDefInput input(c,m,"()");
  input.currentFile = yyextra->sourceFileDef;
  input.insideCode = true;
  GetDefResult result = getDefs(input);
  //printf("Trying '%s'::'%s'\n",qPrint(c),qPrint(m));
  if (result.found && result.md->isLinkable())
  {
    const Definition *d = result.md->getOuterScope()==Doxygen::globalScope ?
                          result.md->getBodyDef() : result.md->getOuterScope();
    //printf("Found! d=%s\n",d?qPrint(d->name()):"<none>");
    if (result.md->getGroupDef()) d = result.md->getGroupDef();
    if (d && d->isLinkable())
    {
      yyextra->theCallContext.setScope(ScopedTypeVariant(stripClassName(yyscanner,result.md->typeString(),result.md->getOuterScope())));
      //printf("yyextra->currentDefinition=%p yyextra->currentMemberDef=%p\n",
      //        yyextra->currentDefinition,yyextra->currentMemberDef);

      if (yyextra->currentDefinition && yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
      {
        addDocCrossReference(yyextra->currentMemberDef,result.md);
      }
      //printf("d->getReference()='%s' d->getOutputBase()='%s' name='%s' member name='%s'\n",qPrint(d->getReference()),qPrint(d->getOutputFileBase()),qPrint(d->name()),qPrint(md->name()));

      writeMultiLineCodeLink(yyscanner,ol,result.md, !text.isEmpty() ? text : memberText);
      addToSearchIndex(yyscanner,!text.isEmpty() ? text : memberText);
      return TRUE;
    }
  }
  return FALSE;
}

//-------------------------------------------------------------------------------

static bool getLink(yyscan_t yyscanner,
                    const QCString &className,
                    const QCString &memberName,
                    OutputCodeList &ol,
                    const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString m=removeRedundantWhiteSpace(memberName);
  QCString c=className;
  if (!getLinkInScope(yyscanner,c,m,memberName,ol,text))
  {
    if (!yyextra->curClassName.isEmpty())
    {
      if (!c.isEmpty()) c.prepend("::");
      c.prepend(yyextra->curClassName);
      return getLinkInScope(yyscanner,c,m,memberName,ol,text);
    }
    return FALSE;
  }
  return TRUE;
}

//-------------------------------------------------------------------------------

/*
  For a given string in the source code,
  finds its class or global id and links to it.
*/
static void generateClassOrGlobalLink(yyscan_t yyscanner,
                                      OutputCodeList &ol,
                                      const QCString &clName,
                                      bool typeOnly)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString className=clName;

  // Don't do anything for empty text
  if (className.isEmpty()) return;

  DBG_CTX((stderr,"generateClassOrGlobalLink(className=%s)\n",qPrint(className)));

  const ScopedTypeVariant *lcd = 0;
  const ClassDef *cd=0;             // Class def that we may find 
  const MemberDef *md=0;            // Member def that we may find 
  //bool isLocal=FALSE;

  if ((lcd=yyextra->theVarContext.findVariable(className))==0) // not a local variable
  {
    const Definition *d = yyextra->currentDefinition;
    QCString scope = substitute(className,".","::");

    cd = yyextra->symbolResolver.resolveClass(d,substitute(className,".","::"));
    md = yyextra->symbolResolver.getTypedef();

    DBG_CTX((stderr,"d=%s yyextra->sourceFileDef=%s\n",
        d?qPrint(d->displayName()):"<null>",
        yyextra->currentDefinition?qPrint(yyextra->currentDefinition->displayName()):"<null>"));
    DBG_CTX((stderr,"is found as a type %s\n",cd?qPrint(cd->name()):"<null>"));

    if (cd==0 && md==0) // also see if it is variable or enum or enum value
    {
      const NamespaceDef *nd = getResolvedNamespace(scope);
      if (nd)
      {
        writeMultiLineCodeLink(yyscanner,ol,nd,clName);
        addToSearchIndex(yyscanner,className);
        return;
      }
      else if (getLink(yyscanner,yyextra->classScope,clName,ol,clName))
      {
        return;
      }
    }
  }
  else
  {
    if (!lcd->isDummy())
    {
      yyextra->theCallContext.setScope(*lcd);
    }
    //isLocal=TRUE;
    DBG_CTX((stderr,"is a local variable cd=%p!\n",cd));
  }

  if (cd && cd->isLinkable()) // is it a linkable class
  {
    writeMultiLineCodeLink(yyscanner,ol,cd,clName);
    addToSearchIndex(yyscanner,className);
    if (md)
    {
      const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
                            md->getBodyDef() : md->getOuterScope();
      if (md->getGroupDef()) d = md->getGroupDef();
      if (d && d->isLinkable() && md->isLinkable() &&
          yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
      {
        addDocCrossReference(yyextra->currentMemberDef,md);
      }
    }
  }
  else // not a class, maybe a global member
  {
    int scopeEnd = className.findRev(".");
    if (scopeEnd!=-1 && !typeOnly) // name with explicit scope
    {
      QCString scope = substitute(className.left(scopeEnd),".","::");
      QCString locName = className.right(className.length()-scopeEnd-1);
      ClassDef *mcd = getClass(scope);
      DBG_CTX((stderr,"scope=%s locName=%s mcd=%p\n",qPrint(scope),qPrint(locName),mcd));
      if (mcd)
      {
        const MemberDef *mmd = mcd->getMemberByName(locName);
        if (mmd)
        {
          yyextra->theCallContext.setScope(ScopedTypeVariant(stripClassName(yyscanner,mmd->typeString(),mmd->getOuterScope())));
          writeMultiLineCodeLink(yyscanner,ol,mmd,clName);
          addToSearchIndex(yyscanner,className);
          const Definition *d = mmd->getOuterScope()==Doxygen::globalScope ?
                                mmd->getBodyDef() : mmd->getOuterScope();
          if (mmd->getGroupDef()) d = mmd->getGroupDef();
          if (d && d->isLinkable() && mmd->isLinkable() &&
              yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
          {
            addDocCrossReference(yyextra->currentMemberDef,mmd);
          }
          return;
        }
      }
      else // check namespace as well
      {
        const NamespaceDef *mnd = getResolvedNamespace(scope);
        if (mnd)
        {
          const MemberDef *mmd=mnd->getMemberByName(locName);
          if (mmd)
          {
            //printf("name=%s scope=%s\n",qPrint(locName),qPrint(scope));
            yyextra->theCallContext.setScope(ScopedTypeVariant(stripClassName(yyscanner,mmd->typeString(),mmd->getOuterScope())));
            writeMultiLineCodeLink(yyscanner,ol,mmd,clName);
            addToSearchIndex(yyscanner,className);
            const Definition *d = mmd->getOuterScope()==Doxygen::globalScope ?
                                  mmd->getBodyDef() : mmd->getOuterScope();
            if (mmd->getGroupDef()) d = mmd->getGroupDef();
            if (d && d->isLinkable() && mmd->isLinkable() &&
                yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
            {
              addDocCrossReference(yyextra->currentMemberDef,mmd);
            }
            return;
          }
        }
      }
    }

    // nothing found, just write out the word
    codifyLines(yyscanner,clName);
    addToSearchIndex(yyscanner,clName);
  }
}

//-------------------------------------------------------------------------------

/*
   As of June 1, this function seems to work
   for file members, but scopes are not
   being correctly tracked for classes
   so it doesn't work for classes yet.

*/
static void generateFunctionLink(yyscan_t yyscanner,
                                OutputCodeList &ol,
                                const QCString &funcName)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString locScope=yyextra->classScope;
  QCString locFunc=removeRedundantWhiteSpace(funcName);
  DBG_CTX((stdout,"*** locScope=%s locFunc=%s\n",qPrint(locScope),qPrint(locFunc)));
  int i=locFunc.findRev("::");
  if (i>0)
  {
    locScope=locFunc.left(i);
    locFunc=locFunc.right(locFunc.length()-i-2).stripWhiteSpace();
  }
  //printf("generateFunctionLink(%s) classScope='%s'\n",qPrint(locFunc),qPrint(locScope));
  if (!locScope.isEmpty())
  {
    auto it = yyextra->codeClassMap.find(locScope.str());
    if (it!=yyextra->codeClassMap.end())
    {
      ScopedTypeVariant ccd = it->second;
      //printf("using classScope %s\n",qPrint(yyextra->classScope));
      if (ccd.localDef() && !ccd.localDef()->baseClasses().empty())
      {
        for (const auto &bcName : ccd.localDef()->baseClasses())
        {
          if (getLink(yyscanner,bcName,locFunc,ol,funcName))
          {
            return;
          }
        }
      }
    }
  }
  if (!getLink(yyscanner,locScope,locFunc,ol,funcName))
  {
    generateClassOrGlobalLink(yyscanner,ol,funcName);
  }
  return;
}

//-------------------------------------------------------------------------------

static bool findMemberLink(yyscan_t yyscanner,
                           OutputCodeList &ol,
                           const Definition *sym,
                           const QCString &symName)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("sym %s outerScope=%s equal=%d\n",
  //    qPrint(sym->name()),qPrint(sym->getOuterScope()->name()),
  //    sym->getOuterScope()==yyextra->currentDefinition);

  if (sym->getOuterScope() &&
      sym->getOuterScope()->definitionType()==Definition::TypeClass &&
      yyextra->currentDefinition->definitionType()==Definition::TypeClass)
  {
    const ClassDef *cd = toClassDef(sym->getOuterScope());
    const ClassDef *thisCd = toClassDef(yyextra->currentDefinition);
    if (sym->definitionType()==Definition::TypeMember)
    {
      if (yyextra->currentMemberDef && yyextra->collectXRefs)
      {
        addDocCrossReference(yyextra->currentMemberDef,toMemberDef(sym));
      }
    }
    DBG_CTX((stderr,"cd=%s thisCd=%s\n",cd?qPrint(cd->name()):"<none>",thisCd?qPrint(thisCd->name()):"<none>"));

    // TODO: find the nearest base class in case cd is a base class of
    // thisCd
    if (cd==thisCd || (thisCd && thisCd->isBaseClass(cd,TRUE)))
    {
      writeMultiLineCodeLink(yyscanner,ol,sym,symName);
      return TRUE;
    }
  }
  return FALSE;
}

//-------------------------------------------------------------------------------

static void findMemberLink(yyscan_t yyscanner,
                           OutputCodeList &ol,
                           const QCString &symName)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("Member reference: %s scope=%s member=%s\n",
  //    yytext,
  //    yyextra->currentDefinition?qPrint(yyextra->currentDefinition->name()):"<none>",
  //    yyextra->currentMemberDef?qPrint(yyextra->currentMemberDef->name()):"<none>"
  //    );
  bool found = false;
  if (yyextra->currentDefinition)
  {
    auto v = Doxygen::symbolMap->find(symName);
    for (auto p : v)
    {
      if (findMemberLink(yyscanner,ol,p,symName)) found = true;
    }
  }
  //printf("sym %s not found\n",&yytext[5]);
  if (!found) codify(yyscanner,symName);
}

static void incrementFlowKeyWordCount(yyscan_t yyscanner)
{
  std::lock_guard<std::mutex> lock(Doxygen::countFlowKeywordsMutex);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->currentMemberDef && yyextra->currentMemberDef->isFunction())
  {
    MemberDefMutable *md = toMemberDefMutable(const_cast<MemberDef*>(yyextra->currentMemberDef));
    if (md)
    {
      md->incrementFlowKeyWordCount();
    }
  }
}


//-------------------------------------------------------------------------------

struct PythonCodeParser::Private
{
  yyscan_t yyscanner;
  pycodeYY_state state;
};

PythonCodeParser::PythonCodeParser() : p(std::make_unique<Private>())
{
  pycodeYYlex_init_extra(&p->state,&p->yyscanner);
#ifdef FLEX_DEBUG
  pycodeYYset_debug(Debug::isFlagSet(Debug::Lex_pycode)?1:0,p->yyscanner);
#endif
  resetCodeParserState();
}

PythonCodeParser::~PythonCodeParser()
{
  pycodeYYlex_destroy(p->yyscanner);
}

void PythonCodeParser::resetCodeParserState()
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->codeClassMap.clear();
  yyextra->currentDefinition = 0;
  yyextra->currentMemberDef = 0;
  yyextra->doubleStringIsDoc = FALSE;
  yyextra->paramParens = 0;
  while (!yyextra->indents.empty()) yyextra->indents.pop();
  BEGIN( Body );
}

void PythonCodeParser::parseCode(OutputCodeList &codeOutIntf,
    const QCString &/* scopeName */,
    const QCString &input,
    SrcLangExt /*lang*/,
    bool isExampleBlock,
    const QCString &exampleName,
    const FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    const MemberDef * /* memberDef */,
    bool /* showLineNumbers */,
    const Definition *searchCtx,
    bool collectXRefs
    )
{
  yyscan_t yyscanner = p->yyscanner;
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  //printf("***parseCode(%s)\n",qPrint(input));

  if (input.isEmpty()) return;
  DebugLex debugLex(Debug::Lex_pycode, __FILE__, fileDef ? qPrint(fileDef->fileName()): NULL);
  yyextra->fileName      = fileDef ? fileDef->fileName():"";
  yyextra->code = &codeOutIntf;
  yyextra->inputString   = input.data();
  yyextra->inputPosition = 0;
  yyextra->currentFontClass = 0;
  yyextra->insideCodeLine = FALSE;
  yyextra->searchCtx=searchCtx;
  yyextra->collectXRefs=collectXRefs;
  if (startLine!=-1)
    yyextra->yyLineNr    = startLine;
  else
    yyextra->yyLineNr    = 1;
  if (endLine!=-1)
    yyextra->inputLines  = endLine+1;
  else
    yyextra->inputLines  = yyextra->yyLineNr + countLines(yyscanner) - 1;


  yyextra->exampleBlock  = isExampleBlock;
  yyextra->exampleName   = exampleName;
  yyextra->sourceFileDef = fileDef;
  yyextra->symbolResolver.setFileScope(fileDef);

  if (yyextra->exampleBlock && fileDef==0)
  {
    // create a dummy filedef for the example
    yyextra->exampleFileDef = createFileDef("",(!exampleName.isEmpty()?qPrint(exampleName):"generated"));
    yyextra->sourceFileDef = yyextra->exampleFileDef.get();
  }
  if (yyextra->sourceFileDef)
  {
    setCurrentDoc(yyscanner,"l00001");
  }

  yyextra->includeCodeFragment = inlineFragment;
  // Starts line 1 on the output
  startCodeLine(yyscanner);

  pycodeYYrestart(0,yyscanner);

  pycodeYYlex(yyscanner);

  if (!yyextra->indents.empty())
  {
    // printf("Exited pysourceparser in inconsistent state!\n");
  }

  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->exampleFileDef)
  {
    // delete the temporary file definition used for this example
    yyextra->exampleFileDef.reset();
    yyextra->sourceFileDef=0;
  }
  // write the tooltips
  yyextra->tooltipManager.writeTooltips(codeOutIntf);
}

static inline void pop_state(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if ( yyg->yy_start_stack_ptr <= 0 )
    warn(yyextra->fileName,yyextra->yyLineNr,"Unexpected statement '%s'",yytext );
  else
    yy_pop_state(yyscanner);
}

#if USE_STATE2STRING
#include "pycode.l.h"
#endif

