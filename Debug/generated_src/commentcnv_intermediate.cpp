#line 1 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define commentcnvYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer commentcnvYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define commentcnvYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer commentcnvYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define commentcnvYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer commentcnvYY_scan_buffer
#endif

#ifdef yy_scan_string
#define commentcnvYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string commentcnvYY_scan_string
#endif

#ifdef yy_scan_bytes
#define commentcnvYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes commentcnvYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define commentcnvYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer commentcnvYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define commentcnvYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer commentcnvYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define commentcnvYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define commentcnvYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define commentcnvYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state commentcnvYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define commentcnvYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state commentcnvYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define commentcnvYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack commentcnvYYensure_buffer_stack
#endif

#ifdef yylex
#define commentcnvYYlex_ALREADY_DEFINED
#else
#define yylex commentcnvYYlex
#endif

#ifdef yyrestart
#define commentcnvYYrestart_ALREADY_DEFINED
#else
#define yyrestart commentcnvYYrestart
#endif

#ifdef yylex_init
#define commentcnvYYlex_init_ALREADY_DEFINED
#else
#define yylex_init commentcnvYYlex_init
#endif

#ifdef yylex_init_extra
#define commentcnvYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra commentcnvYYlex_init_extra
#endif

#ifdef yylex_destroy
#define commentcnvYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy commentcnvYYlex_destroy
#endif

#ifdef yyget_debug
#define commentcnvYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug commentcnvYYget_debug
#endif

#ifdef yyset_debug
#define commentcnvYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug commentcnvYYset_debug
#endif

#ifdef yyget_extra
#define commentcnvYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra commentcnvYYget_extra
#endif

#ifdef yyset_extra
#define commentcnvYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra commentcnvYYset_extra
#endif

#ifdef yyget_in
#define commentcnvYYget_in_ALREADY_DEFINED
#else
#define yyget_in commentcnvYYget_in
#endif

#ifdef yyset_in
#define commentcnvYYset_in_ALREADY_DEFINED
#else
#define yyset_in commentcnvYYset_in
#endif

#ifdef yyget_out
#define commentcnvYYget_out_ALREADY_DEFINED
#else
#define yyget_out commentcnvYYget_out
#endif

#ifdef yyset_out
#define commentcnvYYset_out_ALREADY_DEFINED
#else
#define yyset_out commentcnvYYset_out
#endif

#ifdef yyget_leng
#define commentcnvYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng commentcnvYYget_leng
#endif

#ifdef yyget_text
#define commentcnvYYget_text_ALREADY_DEFINED
#else
#define yyget_text commentcnvYYget_text
#endif

#ifdef yyget_lineno
#define commentcnvYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno commentcnvYYget_lineno
#endif

#ifdef yyset_lineno
#define commentcnvYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno commentcnvYYset_lineno
#endif

#ifdef yyget_column
#define commentcnvYYget_column_ALREADY_DEFINED
#else
#define yyget_column commentcnvYYget_column
#endif

#ifdef yyset_column
#define commentcnvYYset_column_ALREADY_DEFINED
#else
#define yyset_column commentcnvYYset_column
#endif

#ifdef yywrap
#define commentcnvYYwrap_ALREADY_DEFINED
#else
#define yywrap commentcnvYYwrap
#endif

#ifdef yyalloc
#define commentcnvYYalloc_ALREADY_DEFINED
#else
#define yyalloc commentcnvYYalloc
#endif

#ifdef yyrealloc
#define commentcnvYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc commentcnvYYrealloc
#endif

#ifdef yyfree
#define commentcnvYYfree_ALREADY_DEFINED
#else
#define yyfree commentcnvYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[646] =
    {   0,
        2,    2,   54,   54,   54,   54,   42,   42,   42,   42,
       82,   82,  104,  102,  103,  103,    2,   35,  102,  103,
        3,   35,  102,  103,   12,  103,   35,  102,  103,   10,
       35,  102,  103,   21,   35,  102,  103,   11,   35,  102,
      103,    2,   35,  102,  103,   35,  102,  103,    2,   35,
      102,  103,   35,  102,  103,    2,   35,  102,  103,    1,
        2,   35,  102,  103,   35,  102,  103,   48,  102,  103,
       49,  103,   47,   48,  102,  103,   48,  102,  103,   52,
      102,  103,   53,  103,   51,   52,  102,  103,   52,  102,
      103,   78,  103,  102,  103,  102,  103,   54,   64,  102,

      103,   57,  103,   64,  102,  103,   64,  102,  103,   55,
       64,  102,  103,   54,   64,  102,  103,   64,  102,  103,
       64,  102,  103,   64,  102,  103,   54,   64,  102,  103,
       64,  102,  103,   54,   64,  102,  103,   64,  102,  103,
       64,  102,  103,   64,  102,  103,   64,  102,  103,   42,
       45,  102,  103,   43,  103,   45,  102,  103,   45,  102,
      103,   42,   45,  102,  103,   45,  102,  103,   45,  102,
      103,   45,  102,  103,   37,   45,  102,  103,   38,   45,
      102,  103,   45,  102,  103,   42,   45,  102,  103,   45,
      102,  103,   82,  101,  102,  103,   83,  103,   81,  101,

      102,  103,   82,  101,  102,  103,  101,  102,  103,   82,
      101,  102,  103,  101,  102,  103,   82,  101,  102,  103,
       82,  101,  102,  103,   82,  101,  102,  103,   82,  101,
      102,  103,   90,  102,  103,   87,   90,  102,  103,   89,
      103,   95,  100,  102,  103,   97,  103,  100,  102,  103,
       96,  100,  102,  103,   98,  100,  102,  103,   99,  100,
      102,  103,   95,  100,  102,  103,   95,  100,  102,  103,
        2,    8,   24,   20,   21,    2,    9,    2,    1,    2,
       19,    1,    2,    2,    2,    2,    2,    2,    1,    1,
        2,    1,    2,    1,    2,   33,   34,   46,   50,   54,

       63,   61,   62,   55,   55,   60,   54,   59,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   54,   54,   42,   42,   42,   41,   82,   83,   80,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   87,
       95,   94,   95,   95,   95,    6,    8,    5,    7,    9,
        2,   22,   23,    1,    1,    2,    2,    1,    2,   19,
       19,   17,16398,    1,    1,    1,    2,    1,    2,    2,
        2,    1,    2,    1,    2,    1,    2,    1,    1,    1,
        1,    2,   70,   56,   59,   84,   91,   92,   91,   91,
       91,   31,   31,   92,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   54,   29,   29,   36,   44,   39,   39,
       41,   79,   82,   82,   29,   82,   29,   82,   95,16477,
        4,   22,    1,    1,    2,    1,    2,   18,   17,   17,
    16398,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        2,    1,    2,    1,    2,    1,    2,    1,    2,    1,
       73,16456,16455,16460,16451,   65,   58,   84,   84,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   54,   29,   29,   39,   39,   82,   82,   29,
       82,   29,   82, 8285,   95, 8285,    1,    1,    1,    2,
       17,    1,    2,    2,    1,    1,    2,    1,    2,16459,

    16459,16458,16459,16461,16453,16453,   66,16453,16453, 8264,
     8263, 8268, 8259,   91,   91,   30,   30,   91,   30,   92,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   54,
       82,   82,    1,    2,    1,    2,    1,    1,    2,    1,
        1,    1,    2,    1,    2, 8267, 8266, 8269, 8261,   25,
       85,   85,   85,   88,   85,   91,   85,   92,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   54,   82,
       82,    1,    1,    1,    2,    1,    2,    1,    1,    1,
        1,    2,    1,    2,    1,    1,   68, 8267,   68, 8261,
       88,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   54,   27,   40,   82,   82,   13,   13,   13,    1,
        1,   68, 8266,   26,   91,   91,   91,   91,   91,   91,
       91,   91,   82,   16, 8206, 8206, 8206,   16,   91,   86,
       86,   91,   86,   92,   91,   32,   32,   91,   32,   92,
       91,   28,   91,   15,   17
    } ;

static const flex_int16_t yy_accept[652] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   13,   13,   13,   13,   14,   16,   17,   21,   25,
       27,   30,   34,   38,   42,   46,   49,   53,   56,   60,
       65,   68,   71,   73,   77,   80,   83,   85,   89,   92,
       94,   96,   98,  102,  104,  107,  110,  114,  118,  121,
      124,  127,  131,  134,  138,  141,  144,  147,  150,  154,
      156,  159,  162,  166,  169,  172,  175,  179,  183,  186,
      190,  193,  197,  199,  203,  207,  210,  214,  217,  221,
      225,  229,  233,  236,  240,  242,  246,  248,  251,  255,

      259,  263,  267,  271,  272,  272,  273,  274,  274,  274,
      275,  276,  277,  277,  278,  278,  279,  279,  281,  282,
      282,  282,  284,  285,  286,  287,  288,  289,  290,  292,
      294,  296,  297,  298,  299,  300,  300,  300,  300,  300,
      300,  301,  302,  302,  303,  304,  304,  305,  306,  307,
      308,  308,  309,  309,  309,  309,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
      323,  323,  323,  324,  324,  324,  324,  324,  324,  325,
      325,  325,  326,  326,  326,  326,  326,  326,  327,  327,
      328,  329,  330,  331,  332,  332,  333,  334,  335,  336,

      337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
      346,  348,  349,  349,  351,  352,  353,  354,  355,  357,
      358,  360,  361,  362,  362,  363,  363,  363,  364,  365,
      365,  365,  366,  368,  370,  371,  371,  372,  373,  374,
      376,  378,  379,  380,  381,  383,  383,  384,  384,  384,
      385,  385,  386,  386,  386,  387,  388,  389,  390,  391,
      392,  393,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  405,  405,  406,  407,  407,  408,  409,
      409,  410,  411,  412,  413,  414,  415,  417,  419,  421,
      422,  423,  424,  424,  425,  426,  426,  428,  429,  429,

      430,  430,  430,  431,  432,  433,  433,  434,  436,  437,
      439,  439,  440,  441,  442,  443,  444,  446,  448,  450,
      451,  452,  452,  452,  453,  454,  455,  456,  457,  457,
      457,  458,  458,  458,  459,  460,  461,  462,  463,  464,
      465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
      474,  474,  475,  476,  476,  476,  477,  478,  479,  480,
      482,  484,  486,  487,  488,  489,  491,  491,  491,  491,
      491,  492,  492,  492,  492,  492,  492,  493,  493,  494,
      495,  495,  496,  497,  498,  498,  500,  501,  502,  503,
      504,  505,  506,  507,  508,  508,  509,  510,  510,  511,

      511,  512,  512,  513,  513,  514,  514,  514,  514,  515,
      516,  517,  519,  521,  522,  523,  524,  525,  526,  527,
      528,  529,  530,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  532,  533,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      535,  535,  537,  537,  538,  540,  541,  542,  544,  546,
      546,  547,  547,  547,  547,  547,  548,  548,  548,  548,
      549,  549,  550,  550,  550,  550,  551,  551,  551,  552,
      553,  555,  557,  559,  560,  561,  562,  563,  564,  565,
      566,  567,  568,  569,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  571,
      572,  572,  572,  572,  572,  572,  572,  572,  573,  574,
      576,  578,  579,  580,  581,  583,  585,  586,  587,  587,
      587,  589,  589,  591,  591,  591,  591,  592,  593,  594,
      595,  596,  597,  598,  599,  600,  601,  602,  603,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      605,  606,  607,  608,  609,  610,  610,  610,  610,  610,
      610,  610,  610,  611,  612,  612,  614,  615,  615,  616,
      617,  618,  619,  620,  621,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  624,  625,  625,  626,

      627,  628,  629,  630,  631,  633,  635,  636,  637,  639,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  642,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  646,
      646
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   16,   25,
       16,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   36,
       34,   34,   34,   34,   37,   34,   34,   38,   34,   34,
       39,   40,   41,    1,   42,   43,   44,   45,   46,   47,

       48,   49,   34,   50,   51,   34,   52,   53,   54,   55,
       56,   36,   34,   57,   58,   59,   60,   61,   34,   62,
       63,   34,   64,   65,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    1,    8,
        9,    8,    8,   10,   11,    7,   12,   13,   14,   15,
       15,   15,   15,    1,   16,    1,   17,   18,   18,   18,
       18,   18,   18,   19,   19,   18,   19,   19,    1,   20,
        1,   21,   22,   18,   18,   18,   18,   18,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   23,    8,   24,   25,   26
    } ;

static const flex_int16_t yy_base[741] =
    {   0,
     1954, 1953,    0,   45,   29,   30,    1,   31, 1952,   24,
       91,  158,   17,   18,  162,  166,  171,  177,  244,  173,
      312,  380,  170,  345, 1954, 4675, 4675,    0, 4675, 4675,
      161, 1946,    7, 4675,  447, 1931,   56,   35,  477,  529,
       32, 4675, 4675, 4675,    0, 4675, 4675, 4675,    0,  189,
      327, 1926,    0,  195, 4675, 1936,   41,  589,   69, 1888,
      629,  692,  338,  355,  365, 1898, 1872,   46,    0, 4675,
     4675,   41,  339, 1919, 1889, 1892, 4675, 4675, 1867,  367,
     1908, 1923, 4675, 1906,  758, 1909,  825,    0,  892,  372,
      180,  315, 4675,    0, 4675,    0, 4675, 1896, 4675, 4675,

     4675,  395, 1894,    0, 1909, 4675, 1908, 1902, 1905, 4675,
     1904,  958, 1903, 4675, 1902,  997, 1898, 1027,  156,  410,
      413,  459,  506,  448,  156,  548, 1080, 1138, 1188,  160,
      186, 4675, 4675, 4675, 4675,  423, 1884,  438, 1883,  316,
        0, 4675,  454, 4675, 4675, 1894,  147,  205, 4675, 1856,
        0, 4675,  208, 1872,  290,    0, 1834,  143,  269,  290,
      466,  297,  178,  128,  432,  304,  307,  266,   20,   36,
      509,  296,  514,  516, 1854, 1823, 1846, 1821,    0, 1832,
      563,  518, 1867,  384, 1830, 1837, 1808,  529, 1855,  411,
     1870, 4675, 4675, 1788, 1817, 1248, 1315,  416,  541,  359,

      370,  398,  407,    0,    0, 4675,  573, 1811,  432, 1826,
     4675, 1822, 1813, 4675, 1381,    0, 4675, 1411, 1454,  597,
        0, 4675, 1796, 1811, 4675, 1810,  481,  482,  689,  620,
      724,  768,  835,  521,  565,  601,  918, 1797, 1488, 1537,
     1595, 1634,  430,  500,    0,  554, 1781, 1797,  555, 4675,
     1786, 1784,    0,  528,   26, 1738, 4675,  580,  586,  547,
     4675, 4675,  449,  516,  575,  582,  561,  363,  562,  539,
      492, 1694, 1745, 1742, 1749, 1724, 1743, 4675, 4675, 1742,
     1745, 1720, 4675, 4675,  655,  654,  606,  630,  709, 4675,
        0,    0,  733, 4675,  705,  772,  962, 4675, 1782,  715,

      712, 1781,  800,  710,    0, 1008,  902,  969,  787,  793,
     1033, 1143, 1766, 1750, 1789, 1740,    0,    0,  854, 4675,
      838, 1767, 1178, 1771, 1766, 1765, 1764, 4675,  711,    0,
     4675, 1748,  583,   33,  213,  687,  606,  732, 1852,  775,
      723,  747,  796,  676,  716,  753,  797,  756, 1920, 1718,
     1705, 1720, 1695, 1177,  826, 1715, 1690, 1986, 2053,  775,
      778,  845,    0, 1257, 1341, 1392,  925, 1736,  592, 1751,
      943, 1750,  991, 1004,  851, 1417,  926,  636,    0, 1050,
     1715,    0, 1282, 1004, 1012, 1626, 1747, 1037, 1150,  749,
     1746, 1745, 1242, 4675,  907, 1306,  849, 1743, 4675, 1742,

     4675, 1741, 4675, 1740, 4675, 1724,    0,  855, 2120,  912,
     4675, 1677, 4675,  914,  956,  864,  440,  888,  917,  890,
      843,  924, 2188, 1692, 1691, 1681, 1675, 1679, 1687, 1686,
     1670, 1679, 1668, 1663, 1661, 1658, 1659, 2254, 2321, 1703,
     1168, 1033, 1166, 1692, 1202, 1690, 1055,  870, 1315, 1192,
     1263, 1861, 1010, 2378, 1929, 1995,    0, 2062,    0, 1705,
     4675, 1345,  952, 1698, 1364, 4675, 1019, 1697, 1694, 4675,
     1689, 4675, 1368, 1084, 1686, 1670, 1668, 1145, 4675, 1414,
     4675, 1621, 4675, 1032, 1014, 1124,  988, 1138,  868, 1098,
      824, 1125, 1129, 1027, 1214, 1627, 1637, 1627, 1629, 1619,

     1621, 1623, 1613, 1615, 1618, 1604, 1616, 1600, 1170, 1176,
        0, 1261, 1421, 1234, 1216, 1338, 1451, 2129, 2197, 2263,
        0,    0, 1334, 2330, 2383,    0, 2417, 4675, 1648, 1647,
     4675, 1633, 4675, 1244, 1216, 1477, 4675, 1105, 1296, 1212,
     1311, 1243,  329,  784, 1314, 1342, 1232, 1215, 4675, 1590,
     1588, 1579, 1571, 1581, 1566, 1565, 1575, 1563, 1566, 4675,
     1377, 1273, 4675, 1466, 1546, 1499, 1545, 1192,    0, 1633,
     1688, 1396, 2422, 4675, 1607, 4675, 4675, 1582, 1346, 2475,
     1366, 1343, 1356, 2543, 1371, 1393, 1555, 1551, 1521, 1508,
     1492, 1498, 1490, 1500, 1488, 1424, 4675, 1446, 4675, 1672,

     1476, 1527, 1403, 4675, 1465, 4675, 1409, 4675, 1464, 4675,
     1493, 1471, 1469, 1466, 1466, 1462, 1461, 1454, 1459, 1350,
     1435, 4675, 1453, 1402, 1398, 1322, 1302, 1271, 1216, 1104,
     1004, 1421, 1043, 1034,  933,  889,  641, 1487,  596,  470,
     1466,  373, 1489,  125,  806, 1408,   10,    6, 4675, 4675,
     2611, 2637, 2663, 2689, 2715, 2741, 2767, 2793, 2819, 2845,
     2871, 2897, 2923, 2949, 2975, 3001, 3027, 3043, 3069, 3095,
     3121, 3147, 3172, 3193, 3219, 3245, 3271, 3297, 3323, 3349,
     3364, 3373, 3387, 3410, 3436, 3462, 3488, 3514, 3532, 3551,
     3577, 3592, 3608, 3633, 3643, 3666, 3692, 3718, 3744, 3770,

     3796, 3822, 3848, 3874, 3900, 3915, 3930, 3946, 3971, 3981,
     4004, 4030, 4056, 4082, 4108, 4134, 4160, 4186, 4212, 1649,
     1482, 4230, 4249, 4275, 4301, 4327, 4353, 4379, 4405, 4431,
     4446, 4461, 4477, 4503, 4529, 4544, 4570, 4596, 4622, 4648
    } ;

static const flex_int16_t yy_def[741] =
    {   0,
      651,  651,  652,  652,  653,  653,  654,  654,  651,  651,
      650,   11,   11,   11,  655,  655,  655,  655,  650,   19,
      656,  656,  657,  657,  650,  650,  650,  658,  650,  650,
      659,  650,  660,  650,  661,  650,  658,  650,  658,  658,
      650,  650,  650,  650,  662,  650,  650,  650,  663,  650,
      650,  650,  664,  665,  650,  650,  666,  667,  650,  668,
      650,  667,  650,  664,  650,  650,  650,  650,  669,  650,
      650,  650,  669,  650,  650,  650,  650,  650,  650,  669,
      650,  670,  650,  650,  671,  650,  672,   61,  671,  670,
      670,  670,  650,  673,  650,  674,  650,  650,  650,  650,

      650,  674,  674,  658,  659,  650,  675,  650,  660,  650,
      660,  661,  676,  650,  677,  678,  679,  658,  650,  680,
      650,  658,  658,   39,  658,  658,  650,  650,  658,  658,
      658,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      664,  650,  665,  650,  650,  650,  666,  666,  650,   62,
      681,  650,  650,  668,  668,  682,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,   62,
      650,  650,  664,  650,  650,  650,  650,  650,  684,  650,
      650,  684,  650,  650,  650,  650,  650,  684,  650,  650,
      670,  650,  650,   89,  650,  685,  685,   89,  670,  670,

      670,  670,  670,  673,  674,  650,  674,  674,  674,  675,
      650,  650,  677,  650,  678,  686,  650,  650,  658,  658,
      658,  650,  650,  680,  650,  687,  680,  688,  650,  650,
      650,  650,  658,  658,  658,  650,  658,  689,  658,  650,
      240,  650,  650,  650,  658,  650,  690,  650,  691,  650,
      681,  650,  692,  693,  694,  695,  650,  695,  695,  695,
      650,  650,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  696,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  197,   89,  670,  670,  697,  650,
      686,  218,  650,  650,  658,  650,  658,  650,  687,  650,

      680,  698,  699,  688,  218,  650,  650,  658,  650,  658,
      650,  658,  689,  658,  650,  239,  240,  241,  241,  650,
      700,  650,  701,  702,  703,  704,  705,  650,  650,  706,
      650,  707,  708,  650,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  711,  650,
      650,  650,  650,  650,  650,  650,  650,  712,  713,  714,
      714,  715,  716,  650,  650,  658,  650,  650,  717,  718,
      650,  719,  719,  650,  719,  650,  650,  720,  314,  658,
      721,  315,  722,  658,  650,  241,  723,  723,  724,  723,
      725,  726,  726,  650,  650,  726,  726,  727,  650,  728,

      650,  729,  650,  730,  650,  731,  732,  733,  710,  710,
      650,  710,  650,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  711,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  712,  713,  650,
      650,  717,  650,  650,  650,  650,  719,  720,  650,  658,
      650,  658,  720,  722,  658,  650,  454,  241,  241,  723,
      650,  723,  723,  724,  724,  650,  724,  734,  725,  650,
      726,  650,  726,  726,  735,  731,  736,  733,  650,  650,
      650,  710,  650,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  423,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  438,  439,
      737,  737,  650,  717,  650,  650,  719,  650,  650,  658,
      658,  454,  722,  650,  658,  658,  650,  650,  738,  734,
      650,  735,  650,  736,  733,  650,  650,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  423,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      438,  439,  650,  650,  650,  650,  650,  717,  739,  739,
      719,  719,  650,  650,  738,  650,  650,  733,  710,  710,
      710,  710,  710,  710,  710,  710,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  438,  650,  717,  650,  650,

      650,  719,  710,  650,  710,  650,  710,  650,  710,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  717,
      710,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      717,  710,  650,  650,  650,  650,  650,  717,  650,  650,
      717,  650,  717,  650,  717,  717,  740,  740,  650,    0,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650
    } ;

static const flex_int16_t yy_nxt[4744] =
    {   0,
      650,   29,   30,   47,   29,   31,   32,   33,  649,  110,
       34,   48,  649,   35,  111,   29,   36,   37,   38,   39,
       40,   40,   40,   55,   55,   51,   50,  334,   51,   35,
      334,   43,   43,   47,  334,   44,   44,  334,  132,   41,
       49,   48,   52,   68,   68,   35,   29,   30,  119,   29,
       31,   32,   33,  120,  148,   34,   68,   68,   35,  149,
       29,   36,   37,   38,   39,   40,   40,   40,   45,   45,
       49,  133,  156,  271,   35,  118,  118,  118,  118,  150,
       55,   55,  152,  257,   41,  156,  272,  153,  180,  181,
       35,   53,   53,   54,   53,   55,   55,   56,   53,   53,

       53,   53,   53,   53,   57,   58,   53,   58,   58,   59,
       58,   58,   58,   58,   53,   60,   53,   61,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   53,
       61,   53,   58,   55,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   62,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   63,   53,   53,   55,   58,   64,
      650,  222,   65,  106,   70,  650,  107,   73,   70,  223,
       73,  265,   97,   70,   90,  234,  234,   90,   80,   70,
       71,   80,  192,   98,   74,  107,  107,  278,   72,   71,
      136,  257,   72,  136,  245,   81,  143,   75,  258,  143,

       66,   72,  144,   75,   71,   72,  257,  137,   71,   99,
       75,  145,  245,   76,  334,   91,   75,  334,  148,   76,
      130,  252,  202,  149,   67,   71,  153,   71,   71,   71,
      264,   71,   71,  100,   77,  101,   78,   79,  130,   92,
       77,  257,   78,   79,   82,   82,   83,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   84,   85,   82,
       85,   85,   86,   85,   85,   85,   85,   82,   87,   82,
       88,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   82,   88,   82,   85,   82,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   89,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   82,   82,   82,
       82,   85,   93,  270,   95,   93,  253,  192,   93,   93,
       93,  247,   93,  248,  259,   93,   93,   93,  138,  257,
       93,  138,  257,  254,  249,   93,   93,   93,   93,  171,
      182,  273,  171,  182,  260,  139,  102,   97,  274,  102,
       93,   93,   93,  257,   93,  263,  173,  183,   98,  174,
      257,  192,  268,  103,  172,  269,  174,  257,  188,  174,
      257,  188,  192,  199,  192,   93,  199,   93,   93,   93,
       93,  203,   95,   93,   99,  189,   93,   93,   93,  279,
       93,  584,  257,   93,   93,   93,  207,  175,   93,  207,

      192,  202,  279,   93,   93,   93,   93,  175,  100,  192,
      101,  345,  225,  208,  200,  226,  283,  227,   93,   93,
       93,  176,   93,  121,  136,  644,  257,  136,  228,  283,
      229,  176,  230,  230,  230,  230,  203,  289,  201,  138,
      287,  137,  138,   93,  231,   93,   93,   93,  113,  114,
      289,  113,  115,  113,  113,  143,  139,  113,  143,  194,
      231,  144,  113,  113,  320,  113,  286,  124,  124,  124,
      145,  116,  116,  288,  261,  266,  104,  261,  118,  118,
      118,  118,  320,  225,  303,  104,  113,  121,  301,  267,
      220,  221,  104,  221,  122,  257,  123,  123,  123,  124,

      304,  488,  341,  257,  261,  125,  220,  221,  126,  104,
      171,  221,  257,  171,  127,  173,  232,  174,  174,  182,
      174,  125,  182,  122,  126,  233,  233,  233,  124,  262,
      188,  309,  278,  188,  243,  172,  183,  126,  127,  128,
      310,  310,  199,  192,  348,  199,  122,  189,  129,  129,
      129,  129,  243,  126,  253,  257,  175,  328,  175,  321,
      126,  322,  235,  130,  236,  131,  342,  237,  237,  237,
      237,  278,  323,  329,  207,  278,  126,  207,  333,  257,
      176,  130,  176,  200,  237,  237,  237,  237,  131,  141,
      141,  208,  141,  340,  225,  347,  141,  141,  141,  141,

      141,  141,  257,  278,  141,  346,  339,  201,  192,  253,
      257,  295,  141,  296,  141,  151,  297,  297,  297,  297,
      306,  306,  306,  306,  257,  257,  336,  141,  278,  141,
      121,  338,  192,  343,  337,  408,  344,  229,  257,  230,
      230,  230,  230,  257,  339,  257,  378,  442,  360,  257,
      642,  231,  409,  141,  141,  156,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  231,  156,  257,
      157,  449,  157,  157,  158,  159,  160,  161,  162,  163,
      157,  164,  165,  157,  157,  166,  167,  157,  157,  168,
      169,  157,  141,  141,  278,  141,  361,  194,  196,  141,

      141,  141,  141,  141,  141,  358,  359,  141,  305,  305,
      305,  305,  303,  328,  225,  141,  367,  141,  151,  367,
      293,  294,  363,  294,  297,  297,  297,  297,  304,  329,
      141,  418,  141,  368,  339,  170,  293,  294,  236,  257,
      236,  294,  369,  306,  306,  306,  306,  296,  363,  296,
      257,  461,  364,  364,  364,  364,  141,  141,  191,  191,
      192,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  419,  363,  191,  363,  415,  410,  192,  232,  257,
      192,  191,  191,  191,  151,  229,  257,  307,  307,  307,
      230,  364,  364,  364,  364,  257,  191,  309,  191,  231,

      191,  373,  374,  309,  373,  416,  377,  377,  225,  420,
      257,  422,  310,  310,  468,  231,  257,  360,  375,  257,
      414,  191,  191,  191,  191,  191,  191,  192,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  257,  388,
      191,  421,  388,  417,  361,  232,  584,  257,  191,  191,
      191,  472,  122,  374,  308,  308,  308,  124,  363,  257,
      257,  646,  389,  191,  390,  191,  126,  191,  384,  447,
      385,  434,  435,  386,  386,  386,  386,  390,  197,  436,
      378,  253,  126,  545,  363,  437,  492,  257,  191,  191,
      191,  191,  191,  191,  192,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  449,  257,  191,  363,  394,
      363,  487,  232,  478,  475,  191,  191,  191,  151,  229,
      543,  307,  307,  307,  230,  395,  367,  257,  311,  367,
      191,  257,  191,  231,  191,  198,  309,  312,  312,  312,
      312,  640,  489,  368,  443,  377,  377,  443,  491,  231,
      221,  257,  221,  257,  461,  191,  191,  191,  191,  113,
      114,  444,  113,  113,  113,  113,  221,  484,  113,  485,
      221,  490,  365,  113,  113,  257,  113,  257,  493,  232,
      257,  366,  366,  366,  366,  278,  122,  257,  308,  308,
      308,  124,  373,  374,  221,  373,  221,  113,  213,  214,

      126,  213,  213,  213,  213,  445,  225,  213,  445,  375,
      221,  486,  213,  213,  221,  213,  126,  468,  311,  257,
      378,  466,  446,  455,  455,  455,  455,  376,  376,  376,
      376,  456,  456,  456,  456,  225,  213,  218,  462,  461,
      294,  462,  294,  311,  541,  449,  219,  219,  219,  219,
      548,  257,  376,  376,  376,  376,  294,  374,  220,  221,
      294,  221,  638,  463,  450,  294,  451,  294,  539,  452,
      452,  452,  452,  517,  220,  221,  463,  257,  514,  221,
      104,  294,  150,  104,  529,  294,  472,  538,  104,  104,
      238,  104,  104,  104,  104,  257,  278,  239,  639,  240,

      240,  240,  240,  104,  104,  104,  104,  240,  240,  240,
      240,  240,  240,  241,  241,  241,  241,  241,  104,  517,
      104,  104,  104,  240,  240,  240,  240,  240,  240,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  104,  104,  104,  104,  104,  128,  475,
      544,  465,  466,  311,  465,  229,  579,  242,  242,  242,
      242,  257,  312,  312,  312,  312,  278,  443,  257,  231,
      443,  253,  243,  511,  244,  221,  467,  221,  540,  393,
      394,  547,  393,  546,  444,  231,  512,  257,  257,  467,
      243,  221,  257,  542,  225,  221,  395,  244,  128,  562,

      535,  257,  396,  445,  397,  122,  445,  129,  129,  129,
      129,  452,  452,  452,  452,  549,  549,  397,  549,  126,
      446,  569,  130,  426,  131,  561,  427,  428,  196,  429,
      430,  194,  513,  431,  570,  126,  225,  432,  433,  578,
      130,  650,  253,  473,  472,  598,  473,  131,  191,  191,
      192,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  407,  564,  191,  581,  564,  637,  365,  474,  577,
      150,  191,  191,  191,  253,  257,  440,  440,  440,  440,
      513,  474,  518,  518,  518,  518,  191,  565,  191,  294,
      191,  294,  238,  568,  584,  257,  385,  583,  385,  650,

      565,  454,  454,  454,  454,  294,  257,  473,  472,  294,
      473,  191,  191,  191,  191,  191,  191,  192,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  194,  451,
      191,  451,  474,  278,  518,  518,  518,  518,  191,  191,
      191,  253,  580,  569,  238,  474,  462,  461,  650,  462,
      650,  365,  225,  191,  582,  191,  569,  191,  285,  257,
      440,  440,  440,  440,  278,  465,  466,  585,  465,  473,
      472,  463,  473,  294,  257,  294,  636,  257,  191,  191,
      191,  191,  213,  214,  463,  213,  213,  213,  213,  294,
      467,  213,  586,  294,  474,  584,  213,  213,  374,  213,

      596,  603,  365,  467,  631,  257,  257,  474,  607,  257,
      225,  366,  366,  366,  366,  536,  537,  536,  536,  257,
      213,  218,  566,  339,  221,  566,  221,  311,  584,  257,
      292,  292,  292,  292,  257,  196,  376,  376,  376,  376,
      221,  635,  293,  294,  221,  294,  584,  567,  225,  294,
      650,  294,  571,  374,  634,  571,  257,  621,  293,  294,
      567,  602,  647,  294,  218,  294,  257,  566,  225,  294,
      566,  584,  257,  219,  219,  219,  219,  572,  536,  537,
      536,  536,  196,  584,  257,  220,  221,  632,  221,  225,
      572,  225,  567,  620,  622,  622,  453,  622,  257,  453,

      566,  220,  221,  566,  633,  567,  221,  314,  314,  314,
      314,  630,  629,  628,  627,  314,  314,  314,  314,  314,
      314,  626,  625,  624,  643,  567,  623,  257,  257,  374,
      641,  314,  314,  314,  314,  314,  314,  104,  567,  645,
      104,  597,  619,  618,  617,  104,  104,  315,  104,  104,
      104,  104,  616,  615,  316,  614,  317,  317,  317,  317,
      104,  104,  104,  104,  317,  317,  317,  317,  317,  317,
      318,  318,  319,  318,  318,  104,  613,  104,  104,  104,
      317,  317,  317,  317,  317,  317,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,

      104,  104,  104,  104,  104,  238,  612,  611,  650,  576,
      597,  597,  104,  560,  318,  318,  318,  318,  595,  594,
      593,  592,  318,  318,  318,  318,  318,  318,  591,  590,
      318,  589,  588,  587,  600,  533,  457,  600,  318,  318,
      318,  318,  318,  318,  128,  458,  458,  458,  458,  531,
      576,  229,  560,  242,  242,  242,  242,  448,  459,  601,
      459,  560,  560,  448,  559,  231,  448,  558,  243,  557,
      244,  556,  601,  566,  459,  555,  566,  554,  459,  553,
      552,  231,  551,  550,  257,  407,  243,  330,  533,  571,
      374,  472,  571,  244,  141,  141,  470,  141,  567,  531,

      466,  141,  141,  141,  141,  141,  141,  461,  516,  141,
      515,  567,  508,  365,  572,  507,  506,  141,  505,  141,
      151,  504,  440,  440,  440,  440,  503,  572,  502,  501,
      500,  499,  141,  498,  141,  294,  497,  294,  496,  495,
      257,  330,  405,  403,  401,  399,  349,  472,  470,  461,
      449,  294,  374,  371,  441,  294,  357,  356,  141,  141,
      378,  353,  352,  425,  424,  407,  405,  403,  401,  379,
      379,  379,  379,  399,  391,  380,  238,  379,  379,  379,
      379,  379,  379,  371,  300,  380,  357,  356,  355,  354,
      353,  352,  351,  379,  379,  379,  379,  379,  379,  315,

      350,  257,  331,  330,  326,  325,  381,  238,  382,  382,
      382,  382,  300,  225,  298,  214,  382,  382,  382,  382,
      382,  382,  313,  313,  383,  313,  313,  290,  211,  209,
      284,  194,  382,  382,  382,  382,  382,  382,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  412,  411,
      411,  519,  192,  190,  282,  411,  411,  411,  411,  281,
      520,  520,  520,  520,  280,  184,  277,  276,  275,  178,
      411,  411,  411,  521,  411,  521,  177,  257,  253,  150,

      250,  140,  246,  217,  214,  114,  110,  110,  212,  521,
      211,  106,  209,  521,  206,  413,  411,  411,  411,  411,
      141,  141,  195,  141,  193,  192,  190,  141,  141,  141,
      141,  141,  141,  187,  186,  141,  185,  184,  178,  524,
      177,  155,  146,  141,  140,  141,  151,  117,  525,  525,
      525,  525,  108,  650,   50,   27,   27,  650,  141,  650,
      141,  526,  650,  526,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  526,  423,  650,
      650,  526,  650,  650,  141,  141,  191,  191,  192,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  650,

      650,  191,  650,  650,  650,  524,  650,  650,  650,  191,
      191,  191,  253,  650,  527,  527,  527,  527,  650,  650,
      650,  650,  650,  650,  191,  650,  191,  528,  191,  528,
      650,  650,  650,  650,  650,  650,  650,  650,  438,  650,
      650,  650,  650,  528,  650,  650,  650,  528,  650,  191,
      191,  191,  191,  191,  191,  192,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  650,  650,  191,  650,
      650,  650,  457,  650,  650,  650,  191,  191,  191,  151,
      650,  458,  458,  458,  458,  650,  650,  650,  650,  650,
      650,  191,  650,  191,  459,  191,  459,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      459,  439,  650,  650,  459,  650,  191,  191,  191,  191,
      479,  480,  481,  480,  480,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  482,  479,  479,  519,
      650,  650,  650,  479,  479,  479,  479,  650,  573,  573,
      573,  573,  650,  650,  650,  650,  650,  650,  479,  479,
      479,  574,  479,  574,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  574,  650,  650,
      650,  574,  650,  483,  479,  479,  479,  479,  141,  141,
      650,  141,  650,  650,  650,  141,  141,  141,  141,  141,

      141,  650,  650,  141,  650,  650,  650,  519,  650,  650,
      650,  141,  650,  141,  151,  650,  573,  573,  573,  573,
      650,  650,  650,  650,  650,  650,  141,  650,  141,  574,
      650,  574,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  494,  650,  574,  650,  650,  650,  574,
      650,  650,  141,  141,  191,  191,  192,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  650,  650,  191,
      650,  650,  650,  519,  650,  650,  650,  191,  191,  191,
      253,  650,  520,  520,  520,  520,  650,  650,  650,  650,
      650,  650,  191,  650,  191,  521,  191,  521,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  521,  509,  650,  650,  521,  650,  191,  191,  191,
      191,  191,  191,  192,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  650,  650,  191,  650,  650,  650,
      524,  650,  650,  650,  191,  191,  191,  151,  650,  527,
      527,  527,  527,  650,  650,  650,  650,  650,  650,  191,
      650,  191,  528,  191,  528,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  510,  650,  528,  650,
      650,  650,  528,  650,  191,  191,  191,  191,  457,  650,
      650,  650,  650,  524,  650,  650,  650,  522,  522,  522,

      522,  650,  525,  525,  525,  525,  650,  650,  650,  650,
      523,  650,  523,  650,  650,  526,  650,  526,  650,  650,
      650,  650,  650,  650,  650,  650,  523,  524,  650,  650,
      523,  526,  519,  650,  650,  526,  527,  527,  527,  527,
      650,  573,  573,  573,  573,  650,  650,  650,  650,  528,
      650,  528,  650,  650,  574,  650,  574,  650,  650,  650,
      650,  650,  650,  650,  650,  528,  650,  650,  650,  528,
      574,  650,  650,  650,  574,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  605,  604,  604,  650,  650,  650,  650,  604,  604,

      604,  604,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  604,  604,  604,  650,  604,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  606,  604,
      604,  604,  604,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  609,
      608,  608,  650,  650,  650,  650,  608,  608,  608,  608,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  608,  608,  608,  650,  608,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  610,  608,  608,  608,
      608,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,  104,  650,  650,  650,  650,  650,  650,

      104,  650,  104,  104,  650,  104,  650,  104,  104,  104,
      104,  104,  650,  104,  104,  104,  104,  104,  104,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  134,  134,  650,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  135,  135,  650,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  141,
      141,  650,  650,  650,  650,  141,  141,  141,  650,  141,
      141,  141,  650,  141,  650,  650,  141,  141,  650,  141,
      650,  650,  141,  650,  141,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  147,  147,  650,  147,  147,  650,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  650,  147,  147,
      650,  147,  147,  650,  147,  147,  147,  150,  150,  650,
      650,  650,  650,  150,  150,  150,  650,  150,  150,  150,
      650,  150,  650,  150,  150,  150,  650,  150,  650,  650,
      150,  650,  150,  154,  154,  154,  650,  154,  650,  650,
      154,  154,  650,  154,  650,  650,  650,  650,  154,  179,
      179,  650,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  650,  179,  179,  650,  179,  179,  650,  179,
      650,  650,  650,  650,  179,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  650,  191,  191,  191,  650,  191,
      191,  650,  191,  191,  650,  191,  191,  191,  191,  191,
      191,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      650,  194,  194,  194,  650,  194,  194,  194,  194,  194,
      650,  194,  194,  194,  194,  194,  194,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  650,  196,  196,  196,
      650,  196,  196,  650,  196,  196,  650,  196,  196,  196,
      196,  196,  196,  204,  650,  204,  204,  650,  650,  204,
      650,  650,  650,  204,  204,  650,  204,  650,  650,  204,
      204,  650,  204,  205,  205,  650,  205,  205,  205,  205,

      205,  205,  650,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  650,  205,  205,  650,  650,  205,  205,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  251,  650,  650,  251,  650,
      650,  251,  251,  650,  251,  650,  650,  650,  650,  251,
      255,  255,  650,  255,  650,  650,  650,  255,  256,  650,

      650,  256,  650,  650,  256,  256,  650,  256,  650,  256,
      179,  179,  650,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  650,  179,  179,  650,  179,  179,  650,
      179,  650,  650,  650,  650,  179,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  650,  196,  196,  196,  650,
      196,  196,  196,  196,  196,  650,  196,  196,  196,  196,
      196,  196,  291,  291,  650,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      313,  650,  650,  650,  650,  650,  313,  650,  650,  313,
      313,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  332,  650,  650,  332,  650,  650,  332,
      332,  650,  332,  650,  650,  650,  650,  332,  154,  154,
      154,  650,  154,  650,  154,  154,  154,  650,  154,  650,
      650,  650,  650,  154,  335,  650,  335,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  335,  650,  650,
      335,  335,  650,  335,  256,  650,  650,  256,  650,  650,
      256,  256,  650,  256,  650,  256,  150,  150,  650,  650,
      650,  650,  150,  150,  150,  650,  150,  150,  150,  650,
      150,  650,  150,  150,  150,  650,  150,  650,  650,  150,
      650,  150,  362,  362,  650,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      387,  387,  650,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  406,  650,  650,  406,
      650,  650,  406,  406,  650,  406,  650,  650,  650,  650,
      406,  332,  332,  650,  332,  650,  650,  332,  332,  650,
      332,  650,  650,  650,  650,  332,  154,  154,  154,  650,
      154,  650,  154,  154,  154,  650,  154,  650,  650,  650,
      650,  154,  335,  650,  335,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  335,  650,  650,  335,  335,
      650,  335,  256,  650,  650,  256,  650,  650,  256,  256,

      650,  256,  650,  256,  150,  150,  650,  650,  650,  650,
      150,  150,  150,  650,  150,  150,  150,  650,  150,  650,
      150,  150,  150,  650,  150,  650,  650,  150,  650,  150,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  650,
      196,  196,  196,  650,  196,  196,  196,  196,  196,  650,
      196,  196,  196,  196,  196,  196,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  650,  194,  194,  194,  650,
      194,  194,  194,  194,  194,  650,  194,  194,  194,  194,
      194,  194,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  650,  191,  191,  191,  650,  191,  191,  650,  191,

      191,  650,  191,  191,  191,  191,  191,  191,  362,  362,
      650,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  363,  363,  650,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  313,  650,
      313,  313,  650,  650,  313,  650,  650,  313,  313,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,

      464,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  400,  400,  400,  400,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  476,  476,  650,
      476,  650,  650,  476,  476,  650,  476,  650,  650,  650,
      650,  476,  477,  650,  650,  477,  650,  650,  477,  477,
      650,  477,  650,  650,  650,  650,  477,  154,  154,  154,
      650,  154,  650,  154,  154,  154,  650,  154,  650,  650,

      650,  650,  154,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  534,  534,  650,  534,  650,
      650,  534,  534,  650,  534,  650,  650,  650,  650,  534,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  650,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  650,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,   25,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650
    } ;

static const flex_int16_t yy_chk[4744] =
    {   0,
        0,    3,    3,    7,    3,    3,    3,    3,  648,   33,
        3,    7,  647,    3,   33,    3,    3,    3,    3,    3,
        3,    3,    3,   13,   14,   10,   10,  255,   10,    3,
      255,    5,    6,    8,  334,    5,    6,  334,   41,    3,
        7,    8,   10,   13,   14,    3,    4,    4,   38,    4,
        4,    4,    4,   38,   57,    4,   13,   14,    4,   57,
        4,    4,    4,    4,    4,    4,    4,    4,    5,    6,
        8,   41,   68,  169,    4,   37,   37,   37,   37,  170,
       13,   14,   59,  169,    4,   68,  170,   59,   72,   72,
        4,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
      147,  119,   12,   31,   15,  147,   31,   16,   16,  119,
       16,  164,   23,   17,   20,  125,  125,   20,   18,   18,
       15,   18,   91,   23,   16,   31,   31,  644,   15,   17,
       50,  164,   16,   50,  130,   18,   54,   17,  158,   54,

       12,   15,   54,   18,   15,   16,  158,   50,   16,   23,
       17,   54,  130,   17,  335,   20,   18,  335,  148,   18,
      131,  153,   91,  148,   12,   15,  153,   15,   15,   16,
      163,   16,   16,   23,   17,   23,   17,   17,  131,   20,
       18,  163,   18,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,  168,   21,   21,  155,   92,   21,   21,
       21,  140,   21,  140,  159,   21,   21,   21,   51,  168,
       21,   51,  159,  155,  140,   21,   21,   21,   21,   63,
       73,  172,   63,   73,  160,   51,   24,   24,  172,   24,
       21,   21,   21,  160,   21,  162,   64,   73,   24,   64,
      162,  200,  166,   24,   63,  167,   65,  166,   80,   65,
      167,   80,  201,   90,   90,   21,   90,   21,   21,   21,
       22,   92,   22,   22,   24,   80,   22,   22,   22,  184,
       22,  543,  543,   22,   22,   22,  102,   64,   22,  102,

      202,  200,  184,   22,   22,   22,   22,   65,   24,  203,
       24,  268,  120,  102,   90,  120,  190,  120,   22,   22,
       22,   64,   22,  121,  136,  642,  268,  136,  120,  190,
      121,   65,  121,  121,  121,  121,  201,  209,   90,  138,
      202,  136,  138,   22,  121,   22,   22,   22,   35,   35,
      209,   35,   35,   35,   35,  143,  138,   35,  143,  198,
      121,  143,   35,   35,  243,   35,  198,  124,  124,  124,
      143,   35,   35,  203,  161,  165,  124,  161,  122,  122,
      122,  122,  243,  227,  228,  124,   35,   39,  227,  165,
      122,  122,  124,  122,   39,  165,   39,   39,   39,   39,

      228,  417,  263,  417,  161,   39,  122,  122,   39,  124,
      171,  122,  263,  171,   39,  173,  123,  174,  173,  182,
      174,   39,  182,  123,   39,  123,  123,  123,  123,  161,
      188,  234,  640,  188,  244,  171,  182,  123,   39,   40,
      234,  234,  199,  199,  271,  199,   40,  188,   40,   40,
       40,   40,  244,  123,  254,  271,  173,  249,  174,  246,
       40,  246,  126,   40,  126,   40,  264,  126,  126,  126,
      126,  181,  246,  249,  207,  181,   40,  207,  254,  264,
      173,   40,  174,  199,  235,  235,  235,  235,   40,   58,
       58,  207,   58,  260,  369,  270,   58,   58,   58,   58,

       58,   58,  270,  181,   58,  269,  267,  199,  287,  333,
      260,  220,   58,  220,   58,   58,  220,  220,  220,  220,
      236,  236,  236,  236,  267,  269,  258,   58,  181,   58,
      230,  259,  288,  265,  258,  333,  266,  230,  265,  230,
      230,  230,  230,  258,  259,  266,  378,  369,  287,  259,
      639,  230,  337,   58,   58,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,  230,   61,  337,
       61,  378,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   62,   62,  637,   62,  288,  286,  285,   62,

       62,   62,   62,   62,   62,  285,  286,   62,  229,  229,
      229,  229,  304,  329,  301,   62,  300,   62,   62,  300,
      229,  229,  289,  229,  295,  295,  295,  295,  304,  329,
       62,  344,   62,  300,  336,   62,  229,  229,  231,  344,
      231,  229,  301,  231,  231,  231,  231,  293,  289,  293,
      336,  390,  293,  293,  293,  293,   62,   62,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  345,  289,   85,  289,  341,  338,  360,  232,  345,
      361,   85,   85,   85,   85,  232,  341,  232,  232,  232,
      232,  296,  296,  296,  296,  338,   85,  309,   85,  232,

       85,  303,  303,  310,  303,  342,  309,  309,  645,  346,
      342,  348,  310,  310,  390,  232,  346,  360,  303,  348,
      340,   85,   85,   85,   85,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,  340,  321,
       87,  347,  321,  343,  361,  233,  544,  544,   87,   87,
       87,  397,  233,  375,  233,  233,  233,  233,  362,  343,
      347,  645,  321,   87,  321,   87,  233,   87,  319,  375,
      319,  355,  355,  319,  319,  319,  319,  321,   87,  355,
      448,  408,  233,  491,  362,  355,  421,  491,   87,   87,
       87,   87,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,  448,  421,   89,  362,  395,
      362,  416,  307,  408,  397,   89,   89,   89,   89,  307,
      489,  307,  307,  307,  307,  395,  367,  416,  237,  367,
       89,  489,   89,  307,   89,   89,  377,  237,  237,  237,
      237,  636,  418,  367,  371,  377,  377,  371,  420,  307,
      237,  418,  237,  420,  463,   89,   89,   89,   89,  112,
      112,  371,  112,  112,  112,  112,  237,  410,  112,  414,
      237,  419,  297,  112,  112,  410,  112,  414,  422,  308,
      419,  297,  297,  297,  297,  635,  308,  422,  308,  308,
      308,  308,  373,  373,  297,  373,  297,  112,  116,  116,

      308,  116,  116,  116,  116,  374,  631,  116,  374,  373,
      297,  415,  116,  116,  297,  116,  308,  463,  306,  415,
      453,  467,  374,  384,  384,  384,  384,  306,  306,  306,
      306,  385,  385,  385,  385,  442,  116,  118,  388,  388,
      306,  388,  306,  311,  487,  453,  118,  118,  118,  118,
      494,  487,  311,  311,  311,  311,  306,  447,  118,  118,
      306,  118,  631,  388,  380,  311,  380,  311,  485,  380,
      380,  380,  380,  447,  118,  118,  388,  485,  442,  118,
      127,  311,  494,  127,  467,  311,  474,  484,  127,  127,
      127,  127,  127,  127,  127,  484,  634,  127,  633,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  447,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  474,
      490,  389,  389,  312,  389,  128,  538,  128,  128,  128,
      128,  490,  312,  312,  312,  312,  630,  443,  538,  128,
      443,  478,  128,  441,  128,  312,  389,  312,  486,  323,
      323,  493,  323,  492,  443,  128,  441,  486,  492,  389,
      128,  312,  493,  488,  568,  312,  323,  128,  129,  510,

      478,  488,  323,  445,  323,  129,  445,  129,  129,  129,
      129,  450,  450,  450,  450,  495,  495,  323,  495,  129,
      445,  515,  129,  354,  129,  509,  354,  354,  509,  354,
      354,  510,  441,  354,  515,  129,  514,  354,  354,  535,
      129,  548,  535,  393,  393,  568,  393,  129,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  534,  512,  196,  540,  512,  629,  364,  393,  534,
      548,  196,  196,  196,  196,  540,  364,  364,  364,  364,
      515,  393,  451,  451,  451,  451,  196,  512,  196,  364,
      196,  364,  383,  514,  547,  547,  383,  542,  383,  562,

      512,  383,  383,  383,  383,  364,  542,  396,  396,  364,
      396,  196,  196,  196,  196,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  562,  449,
      197,  449,  396,  628,  449,  449,  449,  449,  197,  197,
      197,  197,  539,  516,  523,  396,  462,  462,  523,  462,
      523,  365,  620,  197,  541,  197,  516,  197,  197,  539,
      365,  365,  365,  365,  627,  465,  465,  545,  465,  473,
      473,  462,  473,  365,  541,  365,  626,  545,  197,  197,
      197,  197,  215,  215,  462,  215,  215,  215,  215,  365,
      465,  215,  546,  365,  473,  582,  215,  215,  572,  215,

      561,  579,  366,  465,  620,  546,  582,  473,  583,  579,
      646,  366,  366,  366,  366,  480,  480,  480,  480,  583,
      215,  218,  513,  585,  366,  513,  366,  376,  581,  581,
      218,  218,  218,  218,  585,  561,  376,  376,  376,  376,
      366,  625,  218,  218,  366,  218,  586,  513,  598,  376,
      596,  376,  517,  517,  624,  517,  586,  603,  218,  218,
      513,  572,  646,  218,  219,  376,  603,  564,  641,  376,
      564,  607,  607,  219,  219,  219,  219,  517,  536,  536,
      536,  536,  596,  632,  632,  219,  219,  621,  219,  638,
      517,  643,  564,  598,  611,  611,  721,  611,  621,  721,

      566,  219,  219,  566,  623,  564,  219,  239,  239,  239,
      239,  619,  618,  617,  616,  239,  239,  239,  239,  239,
      239,  615,  614,  613,  641,  566,  612,  609,  605,  602,
      638,  239,  239,  239,  239,  239,  239,  240,  566,  643,
      240,  601,  595,  594,  593,  240,  240,  240,  240,  240,
      240,  240,  592,  591,  240,  590,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  589,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  241,  588,  587,  578,  575,
      567,  565,  241,  559,  241,  241,  241,  241,  558,  557,
      556,  555,  241,  241,  241,  241,  241,  241,  554,  553,
      241,  552,  551,  550,  570,  532,  386,  570,  241,  241,
      241,  241,  241,  241,  242,  386,  386,  386,  386,  530,
      529,  242,  508,  242,  242,  242,  242,  720,  386,  570,
      386,  507,  506,  720,  505,  242,  720,  504,  242,  503,
      242,  502,  570,  600,  386,  501,  600,  500,  386,  499,
      498,  242,  497,  496,  482,  477,  242,  476,  475,  571,
      571,  471,  571,  242,  272,  272,  469,  272,  600,  468,

      464,  272,  272,  272,  272,  272,  272,  460,  446,  272,
      444,  600,  437,  440,  571,  436,  435,  272,  434,  272,
      272,  433,  440,  440,  440,  440,  432,  571,  431,  430,
      429,  428,  272,  427,  272,  440,  426,  440,  425,  424,
      412,  406,  404,  402,  400,  398,  272,  392,  391,  387,
      381,  440,  372,  370,  368,  440,  357,  356,  272,  272,
      314,  353,  352,  351,  350,  332,  327,  326,  325,  314,
      314,  314,  314,  324,  322,  316,  313,  314,  314,  314,
      314,  314,  314,  302,  299,  314,  282,  281,  280,  277,
      276,  275,  274,  314,  314,  314,  314,  314,  314,  315,

      273,  256,  252,  251,  248,  247,  315,  238,  315,  315,
      315,  315,  226,  224,  223,  213,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  212,  210,  208,
      195,  194,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  452,  191,  189,  187,  339,  339,  339,  339,  186,
      452,  452,  452,  452,  185,  183,  180,  178,  177,  176,
      339,  339,  339,  452,  339,  452,  175,  157,  154,  150,

      146,  139,  137,  117,  115,  113,  111,  109,  108,  452,
      107,  105,  103,  452,   98,  339,  339,  339,  339,  339,
      349,  349,   86,  349,   84,   82,   81,  349,  349,  349,
      349,  349,  349,   79,   76,  349,   75,   74,   67,  455,
       66,   60,   56,  349,   52,  349,  349,   36,  455,  455,
      455,  455,   32,   25,    9,    2,    1,    0,  349,    0,
      349,  455,    0,  455,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  455,  349,    0,
        0,  455,    0,    0,  349,  349,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,    0,

        0,  358,    0,    0,    0,  456,    0,    0,    0,  358,
      358,  358,  358,    0,  456,  456,  456,  456,    0,    0,
        0,    0,    0,    0,  358,    0,  358,  456,  358,  456,
        0,    0,    0,    0,    0,    0,    0,    0,  358,    0,
        0,    0,    0,  456,    0,    0,    0,  456,    0,  358,
      358,  358,  358,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,    0,    0,  359,    0,
        0,    0,  458,    0,    0,    0,  359,  359,  359,  359,
        0,  458,  458,  458,  458,    0,    0,    0,    0,    0,
        0,  359,    0,  359,  458,  359,  458,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      458,  359,    0,    0,  458,    0,  359,  359,  359,  359,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  518,
        0,    0,    0,  409,  409,  409,  409,    0,  518,  518,
      518,  518,    0,    0,    0,    0,    0,    0,  409,  409,
      409,  518,  409,  518,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  518,    0,    0,
        0,  518,    0,  409,  409,  409,  409,  409,  423,  423,
        0,  423,    0,    0,    0,  423,  423,  423,  423,  423,

      423,    0,    0,  423,    0,    0,    0,  519,    0,    0,
        0,  423,    0,  423,  423,    0,  519,  519,  519,  519,
        0,    0,    0,    0,    0,    0,  423,    0,  423,  519,
        0,  519,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  423,    0,  519,    0,    0,    0,  519,
        0,    0,  423,  423,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,    0,    0,  438,
        0,    0,    0,  520,    0,    0,    0,  438,  438,  438,
      438,    0,  520,  520,  520,  520,    0,    0,    0,    0,
        0,    0,  438,    0,  438,  520,  438,  520,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  520,  438,    0,    0,  520,    0,  438,  438,  438,
      438,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,    0,    0,  439,    0,    0,    0,
      524,    0,    0,    0,  439,  439,  439,  439,    0,  524,
      524,  524,  524,    0,    0,    0,    0,    0,    0,  439,
        0,  439,  524,  439,  524,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  439,    0,  524,    0,
        0,    0,  524,    0,  439,  439,  439,  439,  454,    0,
        0,    0,  454,  525,  454,    0,    0,  454,  454,  454,

      454,    0,  525,  525,  525,  525,    0,    0,    0,    0,
      454,    0,  454,    0,    0,  525,    0,  525,    0,    0,
        0,    0,    0,    0,    0,    0,  454,  527,    0,    0,
      454,  525,  573,    0,    0,  525,  527,  527,  527,  527,
        0,  573,  573,  573,  573,    0,    0,    0,    0,  527,
        0,  527,    0,    0,  573,    0,  573,    0,    0,    0,
        0,    0,    0,    0,    0,  527,    0,    0,    0,  527,
      573,    0,    0,    0,  573,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,    0,    0,    0,    0,  580,  580,

      580,  580,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  580,  580,  580,    0,  580,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  580,  580,
      580,  580,  580,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,    0,    0,    0,    0,  584,  584,  584,  584,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  584,  584,  584,    0,  584,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  584,  584,  584,  584,
      584,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  658,    0,    0,    0,    0,    0,    0,

      658,    0,  658,  658,    0,  658,    0,  658,  658,  658,
      658,  658,    0,  658,  658,  658,  658,  658,  658,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  662,  662,    0,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  663,  663,    0,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  664,
      664,    0,    0,    0,    0,  664,  664,  664,    0,  664,
      664,  664,    0,  664,    0,    0,  664,  664,    0,  664,
        0,    0,  664,    0,  664,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  666,  666,    0,  666,  666,    0,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,    0,  666,  666,
        0,  666,  666,    0,  666,  666,  666,  667,  667,    0,
        0,    0,    0,  667,  667,  667,    0,  667,  667,  667,
        0,  667,    0,  667,  667,  667,    0,  667,    0,    0,
      667,    0,  667,  668,  668,  668,    0,  668,    0,    0,
      668,  668,    0,  668,    0,    0,    0,    0,  668,  669,
      669,    0,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,    0,  669,  669,    0,  669,  669,    0,  669,
        0,    0,    0,    0,  669,  670,  670,  670,  670,  670,

      670,  670,  670,  670,    0,  670,  670,  670,    0,  670,
      670,    0,  670,  670,    0,  670,  670,  670,  670,  670,
      670,  671,  671,  671,  671,  671,  671,  671,  671,  671,
        0,  671,  671,  671,    0,  671,  671,  671,  671,  671,
        0,  671,  671,  671,  671,  671,  671,  672,  672,  672,
      672,  672,  672,  672,  672,  672,    0,  672,  672,  672,
        0,  672,  672,    0,  672,  672,    0,  672,  672,  672,
      672,  672,  672,  673,    0,  673,  673,    0,    0,  673,
        0,    0,    0,  673,  673,    0,  673,    0,    0,  673,
      673,    0,  673,  674,  674,    0,  674,  674,  674,  674,

      674,  674,    0,  674,  674,  674,  674,  674,  674,  674,
      674,  674,    0,  674,  674,    0,    0,  674,  674,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  681,    0,    0,  681,    0,
        0,  681,  681,    0,  681,    0,    0,    0,    0,  681,
      682,  682,    0,  682,    0,    0,    0,  682,  683,    0,

        0,  683,    0,    0,  683,  683,    0,  683,    0,  683,
      684,  684,    0,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,    0,  684,  684,    0,  684,  684,    0,
      684,    0,    0,    0,    0,  684,  685,  685,  685,  685,
      685,  685,  685,  685,  685,    0,  685,  685,  685,    0,
      685,  685,  685,  685,  685,    0,  685,  685,  685,  685,
      685,  685,  686,  686,    0,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      689,    0,    0,    0,    0,    0,  689,    0,    0,  689,
      689,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  692,    0,    0,  692,    0,    0,  692,
      692,    0,  692,    0,    0,    0,    0,  692,  693,  693,
      693,    0,  693,    0,  693,  693,  693,    0,  693,    0,
        0,    0,    0,  693,  694,    0,  694,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  694,    0,    0,
      694,  694,    0,  694,  695,    0,    0,  695,    0,    0,
      695,  695,    0,  695,    0,  695,  696,  696,    0,    0,
        0,    0,  696,  696,  696,    0,  696,  696,  696,    0,
      696,    0,  696,  696,  696,    0,  696,    0,    0,  696,
        0,  696,  697,  697,    0,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      700,  700,    0,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  706,    0,    0,  706,
        0,    0,  706,  706,    0,  706,    0,    0,    0,    0,
      706,  707,  707,    0,  707,    0,    0,  707,  707,    0,
      707,    0,    0,    0,    0,  707,  708,  708,  708,    0,
      708,    0,  708,  708,  708,    0,  708,    0,    0,    0,
        0,  708,  709,    0,  709,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  709,    0,    0,  709,  709,
        0,  709,  710,    0,    0,  710,    0,    0,  710,  710,

        0,  710,    0,  710,  711,  711,    0,    0,    0,    0,
      711,  711,  711,    0,  711,  711,  711,    0,  711,    0,
      711,  711,  711,    0,  711,    0,    0,  711,    0,  711,
      712,  712,  712,  712,  712,  712,  712,  712,  712,    0,
      712,  712,  712,    0,  712,  712,  712,  712,  712,    0,
      712,  712,  712,  712,  712,  712,  713,  713,  713,  713,
      713,  713,  713,  713,  713,    0,  713,  713,  713,    0,
      713,  713,  713,  713,  713,    0,  713,  713,  713,  713,
      713,  713,  714,  714,  714,  714,  714,  714,  714,  714,
      714,    0,  714,  714,  714,    0,  714,  714,    0,  714,

      714,    0,  714,  714,  714,  714,  714,  714,  715,  715,
        0,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  716,  716,    0,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  722,    0,
      722,  722,    0,    0,  722,    0,    0,  722,  722,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,

      724,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  731,  731,    0,
      731,    0,    0,  731,  731,    0,  731,    0,    0,    0,
        0,  731,  732,    0,    0,  732,    0,    0,  732,  732,
        0,  732,    0,    0,    0,    0,  732,  733,  733,  733,
        0,  733,    0,  733,  733,  733,    0,  733,    0,    0,

        0,    0,  733,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  736,  736,    0,  736,    0,
        0,  736,  736,    0,  736,    0,    0,    0,    0,  736,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,    0,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,    0,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2023 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 28 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"


#include <stdio.h>
#include <stdlib.h>
#include <stack>
#include <algorithm>

#include "bufstr.h"
#include "debug.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "condparser.h"

#include <assert.h>

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define ADDCHAR(c)    yyextra->outBuf.addChar(c)
#define ADDARRAY(a,s) yyextra->outBuf.addArray(a,s)

#define USE_STATE2STRING 0

struct commentcnvYY_CondCtx
{
  commentcnvYY_CondCtx(int line,const QCString &id,bool b)
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct CommentCtx
{
  CommentCtx(int line)
    : lineNr(line) {}
  int lineNr;
};

struct commentcnvYY_state
{
  commentcnvYY_state(const BufStr &i,BufStr &o) : inBuf(i), outBuf(o) {}
  const BufStr &inBuf;
  BufStr &outBuf;
  int      inBufPos = 0;
  int      col = 0;
  int      blockHeadCol = 0;
  bool     mlBrief = FALSE;
  int      readLineCtx = 0;
  bool     skip = FALSE;
  QCString fileName;
  int      lineNr = 0;
  int      condCtx = 0;
  std::stack<commentcnvYY_CondCtx> condStack;
  std::stack<int> commentStack;
  QCString blockName;
  int      lastCommentContext = 0;
  bool     inSpecialComment = FALSE;
  bool     inRoseComment= FALSE;
  int      stringContext = 0;
  int      charContext = 0;
  int      javaBlock = 0;
  bool     specialComment = FALSE;

  QCString aliasString;
  int      blockCount = 0;
  bool     lastEscaped = FALSE;
  int      lastBlockContext= 0;
  bool     pythonDocString = FALSE;
  int      nestingCount= 0;

  bool     vhdl = FALSE; // for VHDL old style --! comment

  SrcLangExt lang = SrcLangExt_Unknown;
  bool       isFixedForm = FALSE; // For Fortran
};

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif
static inline int computeIndent(const char *s);

static void replaceCommentMarker(yyscan_t yyscanner,const char *s,int len);
static inline void copyToOutput(yyscan_t yyscanner,const char *s,int len);
static void startCondSection(yyscan_t yyscanner,const QCString &sectId);
static void endCondSection(yyscan_t yyscanner);
static void handleCondSectionId(yyscan_t yyscanner,const char *expression);
static void replaceAliases(yyscan_t yyscanner,const QCString &s);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);
static void replaceComment(yyscan_t yyscanner,int offset);
static void clearCommentStack(yyscan_t yyscanner);




#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 2119 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv_intermediate.cpp"

#line 151 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
  //- start: NUMBER -------------------------------------------------------------------------
  // Note same defines in code.l: keep in sync
  //- end: NUMBER ---------------------------------------------------------------------------
  // C start comment
  // C end comment
  // Cpp comment
  // Optional any character
  // Optional white space
  // readline non special
  // Optional slash
#line 2132 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv_intermediate.cpp"

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define CNComment 6
#define Verbatim 7
#define VerbatimCode 8
#define ReadLine 9
#define CondLine 10
#define ReadAliasArgs 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct commentcnvYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 196 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"


#line 2424 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 651 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 650 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 198 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ //Note similar code in code.l
                                      if (yyextra->lang!=SrcLangExt_Cpp) REJECT;
                                      copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 202 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* eat anything that is not " / , or \n */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 205 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* eat , so we have a nice separator in long initialization lines */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 208 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of python long comment */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->pythonDocString = TRUE;
                                       yyextra->nestingCount=1;
                                       clearCommentStack(yyscanner); /*  to be on the save side */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
                                   }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 223 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of python long comment */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
                                     else if (Config_getBool(PYTHON_DOCSTRING))
                                     {
				       REJECT;
                                     }
				     else
				     { /* handle as if """! */
                                       yyextra->pythonDocString = TRUE;
                                       yyextra->nestingCount=1;
                                       clearCommentStack(yyscanner); /*  to be on the save side */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
                                   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 242 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount=0; // Fortran doesn't have an end comment
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       /* check for fixed format; we might have some conditional as part of multiline if like C<5 .and. & */
                                       if (yyextra->isFixedForm && (yyextra->col == 0))
                                       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng);
                                         yyextra->nestingCount=0; // Fortran doesn't have an end comment
                                         clearCommentStack(yyscanner); /*  to be on the save side */
				         BEGIN(CComment);
                                         yyextra->commentStack.push(yyextra->lineNr);
				       }
				       else
				       {
				         REJECT;
				       }
				     }
  				   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 278 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  			             if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				     }
                                   }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 288 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  			             if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       if (yyextra->col == 0)
                                       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng);
				       }
				       else
				       {
				         REJECT;
				       }
				     }
                                   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 305 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of a string */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->stringContext = YY_START;
				     BEGIN(SkipString);
                                   }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 310 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->charContext = YY_START;
                                     if (yyextra->lang!=SrcLangExt_VHDL)
                                     {
				       BEGIN(SkipChar);
                                     }
  				   }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 318 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* new line */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 322 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 322 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start C++ style special comment block */
  				     if (yyextra->mlBrief)
				     {
				       REJECT; // bail out if we do not need to convert
				     }
				     else
				     {
				       int i=3;
				       if (yytext[2]=='/')
				       {
					 while (i<(int)yyleng && yytext[i]=='/') i++;
				       }
				       yyextra->blockHeadCol=yyextra->col;
				       copyToOutput(yyscanner,"/**",3);
				       replaceAliases(yyscanner,QCString(yytext+i));
				       yyextra->inSpecialComment=TRUE;
				       //BEGIN(SComment);
				       yyextra->readLineCtx=SComment;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 343 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* Start of Rational Rose ANSI C++ comment block */
                                     if (yyextra->mlBrief) REJECT;
                                     int i=17; //=strlen("//##Documentation");
				     yyextra->blockHeadCol=yyextra->col;
				     copyToOutput(yyscanner,"/**",3);
				     replaceAliases(yyscanner,QCString(yytext+i));
				     yyextra->inRoseComment=TRUE;
				     BEGIN(SComment);
  				   }
	YY_BREAK
case 16:
/* rule 16 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 352 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // next line contains an end marker, see bug 752712
				     yyextra->inSpecialComment=yytext[2]=='/' || yytext[2]=='!';
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 358 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* one line C++ comment */
				     yyextra->inSpecialComment=yytext[2]=='/' || yytext[2]=='!';
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
				   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 364 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* avoid matching next rule for empty C comment, see bug 711723 */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 367 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of a C comment */
                                     if (yyextra->lang==SrcLangExt_Python)
				     {
				       REJECT;
                                     }
  			             yyextra->specialComment=(int)yyleng==3;
                                     yyextra->nestingCount=1;
                                     clearCommentStack(yyscanner); /*  to be on the save side */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     if (yyextra->specialComment)
				       BEGIN(CComment);
                                     else
				       BEGIN(CNComment);
                                     yyextra->commentStack.push(yyextra->lineNr);
                                   }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 382 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_PHP)
				     {
				       REJECT;
				     }
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 389 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount=0; // Python doesn't have an end comment for #
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 403 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				     }
  				   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 413 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->vhdl = TRUE;
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount=0;  // VHDL doesn't have an end comment
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 428 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount=0;  // Fortran doesn't have an end comment
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 25:
#line 443 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 26:
YY_RULE_SETUP
#line 443 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // Mail address, to prevent seeing e.g x@code-factory.org as start of a code block
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 446 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,"@iliteral{code}",15);
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=1;
				     yyextra->blockName=&yytext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 453 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,"@iliteral",9);
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=1;
				     yyextra->blockName=&yytext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 460 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of markdown code block */
                                     if (!Config_getBool(MARKDOWN_SUPPORT))
                                     {
                                       REJECT;
                                     }
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     yyextra->lastCommentContext = YY_START;
                                     yyextra->javaBlock=0;
                                     yyextra->blockName=QCString(yytext).stripWhiteSpace().left(3); // take the ``` or ~~~ part
                                     BEGIN(VerbatimCode);
                                   }
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 471 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=0;
                                     if (qstrcmp(&yytext[1],"startuml")==0)
                                     {
                                       yyextra->blockName="uml";
                                     }
                                     else
                                     {
				       yyextra->blockName=&yytext[1];
                                     }
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 485 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->blockName=&yytext[1];
				     if (yyextra->blockName.at(1)=='[')
				     {
				       yyextra->blockName.at(1)=']';
				     }
				     else if (yyextra->blockName.at(1)=='{')
				     {
				       yyextra->blockName.at(1)='}';
				     }
				     else if (yyextra->blockName.at(1)=='(')
				     {
				       yyextra->blockName.at(1)=')';
				     }
				     yyextra->lastCommentContext = YY_START;
				     BEGIN(Verbatim);
  			           }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 503 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->blockName=&yytext[1];
				     yyextra->lastCommentContext = YY_START;
                                     BEGIN(Verbatim);
                                   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 509 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* escaped double quote */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 512 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* escaped backslash */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 515 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* any other character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 518 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     if (&yytext[1]==yyextra->blockName) // end of formula
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
				     else if (&yytext[4]==yyextra->blockName)
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
                                   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 529 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       yyextra->javaBlock++;
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				     }
                                   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 540 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       yyextra->javaBlock--;
				       if (yyextra->javaBlock==0)
				       {
                                         copyToOutput(yyscanner," @endiliteral ",14);
				         BEGIN(yyextra->lastCommentContext);
				       }
				       else
				       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng);
				       }
				     }
  				   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 559 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of markdown code block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     if (yytext[0]==yyextra->blockName[0])
                                     {
                                       BEGIN(yyextra->lastCommentContext);
                                     }
                                   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 566 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     if (&yytext[4]==yyextra->blockName)
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
                                   }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 573 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* skip leading comments */
  				     if (!yyextra->inSpecialComment)
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				     }
                                     else
                                     {
                                       int l=0;
                                       while (yytext[l]==' ' || yytext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(yyscanner,yytext,l);
                                       if (yyleng-l==3) // ends with //! or ///
                                       {
                                         copyToOutput(yyscanner," * ",3);
                                       }
                                       else // ends with //
                                       {
                                         copyToOutput(yyscanner,"//",2);
                                       }
                                     }
  				   }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 596 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* any character not a backslash or new line or } */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 599 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* new line in verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 602 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  				     if (yyextra->blockName=="dot" || yyextra->blockName=="msc" || yyextra->blockName=="uml" || yyextra->blockName.at(0)=='f')
				     {
				       // see bug 487871, strip /// from dot images and formulas.
                                       int l=0;
                                       while (yytext[l]==' ' || yytext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(yyscanner,yytext,l);
				       copyToOutput(yyscanner,"   ",3);
				     }
				     else // even slashes are verbatim (e.g. \verbatim, \code)
				     {
				       REJECT;
				     }
  				   }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 619 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* any other character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 622 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* escaped character in string */
                                     if (yyextra->lang==SrcLangExt_Fortran || yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       unput(yytext[1]);
                                       copyToOutput(yyscanner,yytext,1);
                                     }
                                     else
                                     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                     }
                                   }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 633 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of string */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(yyextra->stringContext);
                                   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 637 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* any other string character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 640 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* new line inside string (illegal for some compilers) */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 643 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* escaped character */
                                     if (yyextra->lang==SrcLangExt_Fortran || yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       unput(yytext[1]);
                                       copyToOutput(yyscanner,yytext,1);
                                     }
                                     else
                                     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                     }
                                   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 654 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of character literal */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     BEGIN(yyextra->charContext);
                                   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 658 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* any other string character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 661 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* new line character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 665 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* anything that is not a '*' or command */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 668 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* stars without slashes */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 671 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of Python docstring */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->nestingCount--;
                                       yyextra->pythonDocString = FALSE;
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 684 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* new line in comment */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     /* in case of Fortran always end of comment */
  				     if (yyextra->lang==SrcLangExt_Fortran)
				     {
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 58:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 692 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* we are already in C-comment so not a start of a nested comment but
                                      * just the end of the comment (the end part is handled later). */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 696 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* nested C comment */
                                     if (yyextra->lang==SrcLangExt_Python ||
                                         yyextra->lang==SrcLangExt_Markdown)
				     {
				       REJECT;
                                     }
                                     yyextra->nestingCount++;
                                     yyextra->commentStack.push(yyextra->lineNr);
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 706 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of C comment */
                                     if (yyextra->lang==SrcLangExt_Python ||
                                         yyextra->lang==SrcLangExt_Markdown)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount--;
                                       if (yyextra->nestingCount<=0)
                                       {
				         BEGIN(Scan);
                                       }
                                       else
                                       {
                                         //yyextra->nestingCount--;
                                         yyextra->commentStack.pop();
                                       }
				     }
                                   }
	YY_BREAK
/* Python an VHDL share CComment,CNComment, so special attention for ending comments is required */
case 61:
/* rule 61 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 728 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
                                     {
                                       REJECT;
                                     }
                                     else
                                     {
                                       if (yyextra->vhdl) // inside --! comment
                                       {
                                         yyextra->vhdl = FALSE;
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 747 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Python || yyextra->pythonDocString)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 758 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lang==SrcLangExt_Python)
                                     {
                                       if (yyextra->pythonDocString)
                                       {
                                         REJECT;
                                       }
                                       else
                                       {
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                     }
                                     else if (yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       if (yyextra->vhdl) // inside --! comment
                                       {
                                         yyextra->vhdl = FALSE;
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                     else
                                     {
				       REJECT;
                                     }
                                   }
	YY_BREAK
/* removed for bug 674842 (bug was introduced in rev 768)
<CComment,CNComment>"'"			   {
  			             yyextra->charContext = YY_START;
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(SkipChar);
  				   }
<CComment,CNComment>"\""			   {
  			             yyextra->stringContext = YY_START;
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(SkipString);
  				   }
   */
case 64:
YY_RULE_SETUP
#line 801 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 804 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  				     replaceComment(yyscanner,0);
  				   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 807 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     replaceComment(yyscanner,1);
                                   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 810 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  				     replaceComment(yyscanner,0);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 815 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     /* See Bug 752712: end the multiline comment when finding a @} or \} command */
                                     copyToOutput(yyscanner," */",3);
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->inSpecialComment=FALSE;
				     yyextra->inRoseComment=FALSE;
				     BEGIN(Scan);
                                   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 823 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     replaceComment(yyscanner,1);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 70:
#line 829 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 71:
/* rule 71 can match eol */
#line 830 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 830 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{    // or   //!something
  				     replaceComment(yyscanner,0);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
#line 836 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 74:
/* rule 74 can match eol */
#line 837 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 837 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     replaceComment(yyscanner,1);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 842 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (!yyextra->inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
  				       replaceComment(yyscanner,0);
				       yyextra->readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 854 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (!yyextra->inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
                                       replaceComment(yyscanner,1);
				       yyextra->readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 866 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ /* end of special comment */
                                     copyToOutput(yyscanner," */",3);
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     yyextra->inSpecialComment=FALSE;
				     yyextra->inRoseComment=FALSE;
                                     yyextra->readLineCtx = Scan; // reset, otherwise there will be problems with:
                                                                  //   static void handleCondSectionId
				     BEGIN(Scan);
                                   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 875 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,"/&zwj;**",8);
				   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 878 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,"*&zwj;/",7);
				   }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 881 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 884 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				   }
	YY_BREAK
case 83:
/* rule 83 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 887 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(yyextra->readLineCtx);
				   }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 891 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // escaped command
				     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 894 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // conditional section
  				     yyextra->condCtx = YY_START;
  				     BEGIN(CondLine);
  				   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 898 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // end of conditional section
  				     bool oldSkip=yyextra->skip;
  				     endCondSection(yyscanner);
				     if (YY_START==CComment && oldSkip && !yyextra->skip)
    			             {
				       //printf("** Adding start of comment!\n");
				       if (yyextra->lang!=SrcLangExt_Python &&
					   yyextra->lang!=SrcLangExt_VHDL &&
					   yyextra->lang!=SrcLangExt_Markdown &&
					   yyextra->lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('/');
     				         ADDCHAR('*');
					 if (yyextra->specialComment)
					 {
					   ADDCHAR('*');
					 }
				       }
    				     }
				    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 918 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     handleCondSectionId(yyscanner,yytext);
  				   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 921 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  				     yyextra->condCtx=YY_START;
                                     handleCondSectionId(yyscanner," "); // fake section id causing the section to be hidden unconditionally
                                   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
#line 926 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 926 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // forgot section id?
                                     handleCondSectionId(yyscanner," "); // fake section id causing the section to be hidden unconditionally
				     if (*yytext=='\n') { yyextra->lineNr++; copyToOutput(yyscanner,"\n",1);}
  				   }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 930 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // expand alias without arguments
				     replaceAliases(yyscanner,QCString(yytext));
  				   }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 933 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // expand alias with arguments
                                     yyextra->lastBlockContext=YY_START;
				     yyextra->blockCount=1;
				     yyextra->aliasString=yytext;
				     yyextra->lastEscaped=0;
				     BEGIN( ReadAliasArgs );
  				   }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 940 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // skip leading special comments (see bug 618079)
  				   }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 942 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{ // oops, end of comment in the middle of an alias?
                                     if (yyextra->lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else // abort the alias, restart scanning
				     {
				       copyToOutput(yyscanner,yyextra->aliasString.data(),yyextra->aliasString.length());
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 954 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 958 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     if (yyextra->lastEscaped)  yyextra->lastEscaped=FALSE;
                                     else                yyextra->lastEscaped=TRUE;
                                     yyextra->aliasString+=yytext;
                                   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 963 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
                                     yyextra->lineNr++;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 968 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
                                     if (!yyextra->lastEscaped) yyextra->blockCount++;
				     yyextra->lastEscaped=FALSE;
                                   }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 973 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     if (!yyextra->lastEscaped) yyextra->blockCount--;
				     if (yyextra->blockCount==0)
				     {
				       replaceAliases(yyscanner,yyextra->aliasString);
				       BEGIN( yyextra->lastBlockContext );
				     }
				     yyextra->lastEscaped=FALSE;
  			           }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 983 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 987 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 991 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
{
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
/*
<*>\n  { fprintf(stderr,"Lex scanner %s (%s) default rule newline for state %s.\n", __FILE__, qPrint(yyextra->fileName),stateToString(YY_START));}
  */
case 103:
YY_RULE_SETUP
#line 997 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"
ECHO;
	YY_BREAK
#line 3819 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv_intermediate.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(CNComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 651 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 651 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 650);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 997 "/home/vsc/github/doxygen/Debug/generated_src/commentcnv.l"


static void replaceCommentMarker(yyscan_t yyscanner,const char *s,int len)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=s;
  char c;
  // copy leading blanks
  while ((c=*p) && (c==' ' || c=='\t' || c=='\n'))
  {
    ADDCHAR(c);
    yyextra->lineNr += c=='\n';
    p++;
  }
  // replace start of comment marker by blanks and the last character by a *
  int blanks=0;
  while ((c=*p) && (c=='/' || c=='!' || c=='#'))
  {
    blanks++;
    p++;
    if (*p=='<') // comment-after-item marker
    {
      blanks++;
      p++;
    }
    if (c=='!') // end after first !
    {
      break;
    }
  }
  if (blanks>0)
  {
    while (blanks>2)
    {
      ADDCHAR(' ');
      blanks--;
    }
    if (blanks>1) ADDCHAR('*');
    ADDCHAR(' ');
  }
  // copy comment line to output
  ADDARRAY(p,len-(int)(p-s));
}

static inline int computeIndent(const char *s)
{
  int col=0;
  int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static inline void copyToOutput(yyscan_t yyscanner,const char *s,int len)
{
  int tabSize=Config_getInt(TAB_SIZE);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int i;
  if (yyextra->skip) // only add newlines.
  {
    for (i=0;i<len;i++)
    {
      switch(s[i])
      {
        case '\n':
	  ADDCHAR('\n');
	  yyextra->lineNr++;
          yyextra->col=0;
          break;
        case '\t':
          yyextra->col+=tabSize-(yyextra->col%tabSize);
          break;
        default:
          yyextra->col++;
          break;
      }
    }
  }
  else if (len>0)
  {
    ADDARRAY(s,len);
    for (i=0;i<len;i++)
    {
      switch (s[i])
      {
	case '\n': yyextra->col=0;
	           //fprintf(stderr,"---> copy %d\n",g_lineNr);
		   yyextra->lineNr++; break;
	case '\t': yyextra->col+=tabSize-(yyextra->col%tabSize); break;
	default:   yyextra->col++; break;
      }
    }
  }
}

static void clearCommentStack(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  while (!yyextra->commentStack.empty()) yyextra->commentStack.pop();
}

static void startCondSection(yyscan_t yyscanner,const QCString &sectId)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(yyextra->fileName,yyextra->lineNr,sectId);
  yyextra->condStack.push(commentcnvYY_CondCtx(yyextra->lineNr,sectId,yyextra->skip));
  if (!expResult) // not enabled
  {
    yyextra->skip=TRUE;
  }
}

static void endCondSection(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->condStack.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,"Found \\endcond command without matching \\cond");
    yyextra->skip=FALSE;
  }
  else
  {
    const commentcnvYY_CondCtx &ctx = yyextra->condStack.top();
    yyextra->skip=ctx.skip;
    yyextra->condStack.pop();
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void handleCondSectionId(yyscan_t yyscanner,const char *expression)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool oldSkip=yyextra->skip;
  startCondSection(yyscanner,QCString(expression));
  if ((yyextra->condCtx==CComment || yyextra->readLineCtx==SComment) &&
      !oldSkip && yyextra->skip)
  {
    if (yyextra->lang!=SrcLangExt_Python &&
        yyextra->lang!=SrcLangExt_VHDL &&
        yyextra->lang!=SrcLangExt_Markdown &&
        yyextra->lang!=SrcLangExt_Fortran)
    {
      ADDCHAR('*');
      ADDCHAR('/');
    }
  }
  if (yyextra->readLineCtx==SComment)
  {
    BEGIN(SComment);
  }
  else
  {
    BEGIN(yyextra->condCtx);
  }
}

/** copies string \a s with length \a len to the output, while
 *  replacing any alias commands found in the string.
 */
static void replaceAliases(yyscan_t yyscanner,const QCString &s)
{
  QCString result = resolveAliasCmd(s);
  //printf("replaceAliases(%s)->'%s'\n",s,result.data());
  copyToOutput(yyscanner,result.data(),result.length());
}


static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int bytesInBuf = static_cast<int>(yyextra->inBuf.curPos())-yyextra->inBufPos;
  int bytesToCopy = std::min(max_size,bytesInBuf);
  memcpy(buf,yyextra->inBuf.data()+yyextra->inBufPos,bytesToCopy);
  yyextra->inBufPos+=bytesToCopy;
  return bytesToCopy;
}

static void replaceComment(yyscan_t yyscanner,int offset)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->mlBrief || yyextra->skip)
  {
    copyToOutput(yyscanner,yytext,(int)yyleng);
  }
  else
  {
    //printf("replaceComment(%s)\n",yytext);
    int i=computeIndent(&yytext[offset]);
    if (i==yyextra->blockHeadCol)
    {
      replaceCommentMarker(yyscanner,yytext,(int)yyleng);
    }
    else
    {
      copyToOutput(yyscanner," */",3);
      for (i=(int)yyleng-1;i>=0;i--) unput(yytext[i]);
      yyextra->inSpecialComment=FALSE;
      BEGIN(Scan);
    }
  }
}

/*! This function does three things:
 *  -# It converts multi-line C++ style comment blocks (that are aligned)
 *     to C style comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO).
 *  -# It replaces aliases with their definition (see ALIASES)
 *  -# It handles conditional sections (cond...endcond blocks)
 */
void convertCppComments(const BufStr &inBuf,BufStr &outBuf,const QCString &fileName)
{
  yyscan_t yyscanner;
  commentcnvYY_state extra(inBuf,outBuf);
  commentcnvYYlex_init_extra(&extra,&yyscanner);
#ifdef FLEX_DEBUG
  commentcnvYYset_debug(Debug::isFlagSet(Debug::Lex_commentcnv)?1:0,yyscanner);
#endif
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("convertCppComments(%s)\n",fileName);
  yyextra->inBufPos = 0;
  yyextra->col      = 0;
  yyextra->mlBrief = Config_getBool(MULTILINE_CPP_IS_BRIEF);
  yyextra->skip     = FALSE;
  yyextra->fileName = fileName;
  yyextra->lang = getLanguageFromFileName(fileName);
  yyextra->pythonDocString = FALSE;
  yyextra->lineNr   = 1;
  while (!yyextra->condStack.empty()) yyextra->condStack.pop();
  clearCommentStack(yyscanner);
  yyextra->vhdl = FALSE;

  DebugLex debugLex(Debug::Lex_commentcnv,__FILE__, qPrint(fileName));
  yyextra->isFixedForm = FALSE;
  if (yyextra->lang==SrcLangExt_Fortran)
  {
    FortranFormat fmt = convertFileNameFortranParserCode(fileName);
    yyextra->isFixedForm = recognizeFixedForm(QCString(inBuf.data()),fmt);
  }

  if (yyextra->lang==SrcLangExt_Markdown)
  {
    yyextra->nestingCount=0;
    BEGIN(CComment);
    yyextra->commentStack.push(yyextra->lineNr);
  }
  else
  {
    BEGIN(Scan);
  }
  yylex(yyscanner);
  while (!yyextra->condStack.empty())
  {
    const commentcnvYY_CondCtx &ctx = yyextra->condStack.top();
    QCString sectionInfo(" ");
    if (ctx.sectionId!=" ") sectionInfo.sprintf(" with label '%s' ",ctx.sectionId.stripWhiteSpace().data());
    warn(yyextra->fileName,ctx.lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
    yyextra->condStack.pop();
  }
  if (yyextra->nestingCount>0 && yyextra->lang!=SrcLangExt_Markdown && yyextra->lang!=SrcLangExt_Fortran)
  {
    QCString tmp("(probable line reference: ");
    bool first = TRUE;
    while (!yyextra->commentStack.empty())
    {
      int lineNr = yyextra->commentStack.top();
      if (!first) tmp += ", ";
      tmp += QCString().setNum(lineNr);
      first = FALSE;
      yyextra->commentStack.pop();
    }
    tmp += ")";
    warn(yyextra->fileName,yyextra->lineNr,"Reached end of file while still inside a (nested) comment. "
        "Nesting level %d %s",yyextra->nestingCount,tmp.data());
  }
  yyextra->nestingCount = 0;
  if (Debug::isFlagSet(Debug::CommentCnv))
  {
    yyextra->outBuf.at(yyextra->outBuf.curPos())='\0';
    Debug::print(Debug::CommentCnv,0,"-----------\nCommentCnv: %s\n"
                 "output=[\n%s]\n-----------\n",qPrint(fileName),yyextra->outBuf.data()
                );
  }
  commentcnvYYlex_destroy(yyscanner);
}


//----------------------------------------------------------------------------

#if USE_STATE2STRING
#include "commentcnv.l.h"
#endif

