#line 1 "/home/vsc/github/doxygen/Debug/generated_src/lexscanner_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "/home/vsc/github/doxygen/Debug/generated_src/lexscanner_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define lexscannerYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer lexscannerYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define lexscannerYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer lexscannerYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define lexscannerYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer lexscannerYY_scan_buffer
#endif

#ifdef yy_scan_string
#define lexscannerYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string lexscannerYY_scan_string
#endif

#ifdef yy_scan_bytes
#define lexscannerYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes lexscannerYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define lexscannerYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer lexscannerYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define lexscannerYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer lexscannerYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define lexscannerYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state lexscannerYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define lexscannerYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer lexscannerYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define lexscannerYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state lexscannerYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define lexscannerYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state lexscannerYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define lexscannerYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack lexscannerYYensure_buffer_stack
#endif

#ifdef yylex
#define lexscannerYYlex_ALREADY_DEFINED
#else
#define yylex lexscannerYYlex
#endif

#ifdef yyrestart
#define lexscannerYYrestart_ALREADY_DEFINED
#else
#define yyrestart lexscannerYYrestart
#endif

#ifdef yylex_init
#define lexscannerYYlex_init_ALREADY_DEFINED
#else
#define yylex_init lexscannerYYlex_init
#endif

#ifdef yylex_init_extra
#define lexscannerYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra lexscannerYYlex_init_extra
#endif

#ifdef yylex_destroy
#define lexscannerYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy lexscannerYYlex_destroy
#endif

#ifdef yyget_debug
#define lexscannerYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug lexscannerYYget_debug
#endif

#ifdef yyset_debug
#define lexscannerYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug lexscannerYYset_debug
#endif

#ifdef yyget_extra
#define lexscannerYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra lexscannerYYget_extra
#endif

#ifdef yyset_extra
#define lexscannerYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra lexscannerYYset_extra
#endif

#ifdef yyget_in
#define lexscannerYYget_in_ALREADY_DEFINED
#else
#define yyget_in lexscannerYYget_in
#endif

#ifdef yyset_in
#define lexscannerYYset_in_ALREADY_DEFINED
#else
#define yyset_in lexscannerYYset_in
#endif

#ifdef yyget_out
#define lexscannerYYget_out_ALREADY_DEFINED
#else
#define yyget_out lexscannerYYget_out
#endif

#ifdef yyset_out
#define lexscannerYYset_out_ALREADY_DEFINED
#else
#define yyset_out lexscannerYYset_out
#endif

#ifdef yyget_leng
#define lexscannerYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng lexscannerYYget_leng
#endif

#ifdef yyget_text
#define lexscannerYYget_text_ALREADY_DEFINED
#else
#define yyget_text lexscannerYYget_text
#endif

#ifdef yyget_lineno
#define lexscannerYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno lexscannerYYget_lineno
#endif

#ifdef yyset_lineno
#define lexscannerYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno lexscannerYYset_lineno
#endif

#ifdef yyget_column
#define lexscannerYYget_column_ALREADY_DEFINED
#else
#define yyget_column lexscannerYYget_column
#endif

#ifdef yyset_column
#define lexscannerYYset_column_ALREADY_DEFINED
#else
#define yyset_column lexscannerYYset_column
#endif

#ifdef yywrap
#define lexscannerYYwrap_ALREADY_DEFINED
#else
#define yywrap lexscannerYYwrap
#endif

#ifdef yyalloc
#define lexscannerYYalloc_ALREADY_DEFINED
#else
#define yyalloc lexscannerYYalloc
#endif

#ifdef yyrealloc
#define lexscannerYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc lexscannerYYrealloc
#endif

#ifdef yyfree
#define lexscannerYYfree_ALREADY_DEFINED
#else
#define yyfree lexscannerYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define lexscannerYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 158
#define YY_END_OF_BUFFER 159
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[729] =
    {   0,
    16506,16506,  159,  158,    1,  158,  158,  158,   18,  158,
      158,   27,  158,    1,   18,   27,  158,   18,  158,   18,
      158,    8,  158,    9,  158,   10,  158,    1,    8,   10,
      158,    8,  158,    8,  158,    8,  158,  158,  158,   29,
      158,    1,   29,  158,   31,  158,  158,   33,  158,    1,
       31,   33,  158,   31,  158,   72,  158,   69,   72,  158,
       69,  158,    1,   69,   72,  158,   38,   72,  158,   56,
       72,  158,   72,  158,   72,  158,   44,   72,  158,   72,
      158,   72,  158,   68,   69,   72,  158,   67,   69,  158,
        1,   67,   69,   72,  158,   72,  158,   43,  158,    1,

       43,  158,   41,   43,  158,   43,  158,   42,   43,  158,
       51,  158,    1,   51,  158,   51,  158,   51,  158,   48,
       51,  158,   49,   51,  158,   65,  158,   64,   65,  158,
       63,  158,    1,   63,   65,  158,   59,   65,  158,   61,
       65,  158,   62,   65,  158,   58,   65,  158,   65,  158,
       65,  158,   54,  158,   53,   54,  158,    1,   53,   54,
      158,   55,  158,  158,  157,  158,    1,  157,  158,  158,
       15,  158,    1,   15,  158,  158,  158,   17,  158,    1,
       17,  158,  158,   23,   26,  158,   25,  158,    1,   23,
       25,   26,  158,   26,  158,   23,   26,  158,   84,   89,

      158,   84,   89,  158,   95,  158,    1,   84,   89,  158,
       81,   89,  158,   89,  158,   88,   89,  158,   89,  158,
       89,  158,   84,   89,  158,   84,   89,  158,   84,   89,
      158,   77,   89,  158,   79,   89,  158,   84,   89,  158,
       82,   89,  158,  156,  158,   75,  158,   76,  158,    1,
       75,  158,   75,  158,  158,16506,  158,16506,  123,  158,
        1,  158,16506,  158,16506,  138,  140,  158,  138,  140,
      158,  139,  158,    1,  138,  140,  158,  140,  158,  140,
      158,  138,  140,  158,  140,  158,  140,  158,  138,  140,
      158,  140,  158,  140,  158,  138,  140,  158,  140,  158,

      151,  154,  158,  153,  158,    1,  151,  154,  158,  154,
      158,  154,  158,  154,  158,  154,  158,  154,  158,  151,
      154,  158, 8340,  154,  158,16529,16530,16531,16532,  151,
      154,  158,  154,  158,  100,  158,   99,  158,    1,  100,
      158,   97,  100,  158,  100,  158,  100,  158,  100,  158,
      117,  118,  158,  119,  158,    1,  117,  118,  158,  118,
      158,  112,  158,  112,  158,  113,  158,    1,  112,  158,
      115,  158,  112,  158,  158,  102,  158,    1,  158,  158,
      108,  110,  158,  103,  110,  158,  103,  158,    1,  103,
      110,  158,  110,  158,  110,  158,  110,  158,  108,  110,

      158,   28,   28,   27,   20,    8,    9,   10,    8,    8,
        8,    4,   29,   29,   29,   32,   32,   33,   66,   69,
       52,   71,   36,   35,   35,   35,   70,   37,   68,   67,
       67,   67,   69,   40,   39,   46,   50,   47,   63,   60,
       60,   57,   53,  157,  157,  157,   15,   15,   15,   14,
       15,   14,   15,   17,   17,   17,   23,   25,   22,   24,
       23,   24,   84,   84,   84,   84,   84,   85,   86,   84,
       82,   74,16506,  123,16506,16506,16506,  138,  138,  138,
      124,  129,  128,  138,  138,  138,  138,  125,  126,  125,
      126,  125,  125,  125,  126,  125,  126,  127,  128,  138,

      151,  152,  151, 8340,16529,16530,16531,16532,  151, 8337,
     8340, 8337, 8340, 8339, 8339,  151,   98,   96,  117,  116,
      112,  112,  114,  111,  111,  112,  102,  101,  102,  108,
      103,  109,  104,  105,  108,  108,  108,  108,   19,   19,
       28,   20,   11,   11,   13,   13,    8,    8,    8,   32,
       30,   30,   14,   15,   16,   17,   16,   17,   21,   21,
       87,   90,   93,   83,16506,  138,  138,  131,  138,  125,
      127,  127,  136,  138,  135,  143,  151, 8337, 8340, 8338,
     8339,  150,  151,  149,  116,  108,  108,  108,  108,   19,
        8,    8,    8,   45,   16,   17,   87,   92,   94,   94,

      120,16506,  138,  138,  130,  130,  138,  136,  126,  136,
      138,  135,  151, 8337, 8340, 8338,  150,  150,  151,  149,
      116,  108,  108,  108,  108,    8,    8,    8,   73,   91,
       80,  155,  120,16506,  121,  123,  132,  138,  138,  134,
      136, 8337, 8340,  150,  116,  106,  108,  108,  108,  108,
      108,  108,   12,   12,    8,    8,    8,   36, 8314,  137,
      138,  141,  116,  108,  108,  108,  108,  108,    2,    8,
        8,    3,    8,    8,   34,  142,  116,  108,  108,  108,
      108,  108,    8,    8,    3,    3,    8,   78,  144,  116,
      107,  108,  108,  108,  108,  108,    8,    8,    5,    8,

      116,  108,  108,    8,    8,  133,  116,  108,  108,    8,
        8,  116,  108,  108,    6,    8,    8,  116,    8,  116,
        8,  116,    7,    8,  116,  116,  116,  116
    } ;

static const flex_int16_t yy_accept[788] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    5,    7,
        8,    9,   11,   12,   14,   18,   20,   22,   24,   26,
       28,   32,   34,   36,   38,   39,   40,   42,   45,   47,
       48,   50,   54,   56,   58,   61,   63,   67,   70,   73,
       75,   77,   80,   82,   84,   88,   91,   96,   98,  100,

      103,  106,  108,  111,  113,  116,  118,  120,  123,  126,
      128,  131,  133,  137,  140,  143,  146,  149,  151,  153,
      155,  158,  162,  164,  165,  167,  170,  171,  173,  176,
      177,  178,  180,  183,  184,  187,  189,  194,  196,  199,
      202,  205,  207,  211,  214,  216,  219,  221,  223,  226,
      229,  232,  235,  238,  241,  244,  246,  248,  250,  253,
      255,  257,  259,  261,  264,  266,  269,  272,  274,  278,
      280,  282,  285,  287,  289,  292,  294,  296,  299,  301,
      304,  306,  310,  312,  314,  316,  318,  320,  323,  330,
      333,  335,  337,  339,  342,  345,  347,  349,  351,  354,

      356,  360,  362,  364,  366,  368,  371,  373,  375,  376,
      378,  380,  381,  384,  387,  389,  393,  395,  397,  399,
      402,  402,  402,  402,  402,  403,  404,  404,  405,  405,
      405,  405,  406,  407,  408,  409,  410,  411,  412,  412,
      413,  413,  414,  415,  416,  416,  417,  418,  419,  419,
      419,  420,  421,  422,  423,  423,  423,  424,  425,  426,
      428,  428,  429,  430,  431,  432,  434,  435,  436,  436,
      437,  438,  439,  440,  441,  442,  442,  443,  444,  444,
      445,  446,  447,  447,  448,  449,  450,  452,  454,  454,
      455,  456,  457,  457,  458,  459,  460,  461,  463,  464,

      465,  465,  466,  467,  468,  468,  468,  468,  469,  470,
      470,  470,  470,  471,  472,  472,  472,  472,  473,  474,
      475,  476,  477,  477,  477,  478,  479,  480,  481,  481,
      482,  483,  484,  485,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  487,  487,  487,
      488,  488,  490,  492,  493,  494,  496,  498,  500,  501,
      501,  502,  503,  503,  503,  503,  504,  509,  510,  510,
      512,  514,  515,  516,  516,  517,  517,  518,  519,  520,
      520,  521,  522,  523,  523,  524,  525,  527,  527,  528,
      528,  530,  531,  532,  533,  534,  535,  536,  537,  538,

      539,  539,  539,  540,  541,  542,  543,  544,  545,  545,
      546,  547,  548,  549,  550,  551,  552,  553,  553,  553,
      553,  555,  557,  559,  559,  560,  561,  561,  561,  562,
      562,  562,  563,  563,  563,  564,  564,  564,  565,  565,
      565,  565,  565,  565,  566,  567,  568,  568,  568,  568,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      570,  571,  572,  572,  572,  572,  573,  573,  575,  576,
      576,  576,  576,  577,  578,  580,  581,  582,  582,  584,
      585,  585,  586,  587,  588,  589,  590,  590,  591,  591,
      592,  593,  594,  594,  595,  597,  597,  597,  598,  598,

      599,  599,  599,  600,  601,  601,  601,  601,  602,  603,
      604,  605,  606,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  608,  608,  609,  610,
      612,  613,  613,  613,  613,  614,  616,  617,  618,  620,
      621,  621,  622,  623,  624,  625,  626,  626,  626,  627,
      628,  629,  629,  630,  630,  630,  630,  631,  631,  631,
      631,  632,  633,  633,  634,  634,  635,  637,  639,  640,
      640,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  644,  645,  645,  646,  648,  649,  650,

      651,  652,  653,  653,  654,  655,  656,  657,  658,  659,
      659,  659,  660,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  664,  665,  666,
      667,  668,  669,  670,  671,  672,  672,  674,  675,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  678,  679,  680,  681,  682,  683,  684,
      685,  686,  687,  688,  688,  689,  689,  689,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  691,  693,  694,  695,  696,  697,  698,  699,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  702,  703,  704,  705,  706,  706,
      706,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  708,  709,  710,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  713,  714,  715,  717,  718,  718,
      718,  718,  718,  719,  720,  720,  720,  720,  721,  722,
      722,  722,  722,  723,  725,  725,  725,  726,  726,  726,
      727,  727,  727,  728,  728,  729,  729
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,   11,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   20,   21,    1,   22,
       23,   24,   25,   26,   27,   27,   28,   29,   30,   31,
       27,   27,   27,   27,   27,   32,   27,   27,   33,   34,
       27,   35,   27,   27,   36,   27,   27,   27,   27,   27,
       37,   38,   39,    1,   27,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   27,   50,   51,   52,   53,
       54,   55,   27,   56,   57,   58,   59,   60,   27,   61,
       62,   27,   63,   64,   65,   66,    1,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    2,    3,    4,    2,    1,    5,    5,    6,    1,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
        1,   15,    1,    1,    1,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,   18,   19,   20,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   21,    1,    5,   22,   23
    } ;

static const flex_int16_t yy_base[898] =
    {   0,
     3717, 3716,    0,    3,   19,   23,    5,    7,   12,   15,
     3715,   27,   78,  140,   31,   38,   46,   48,   54,   59,
       64,   67,  116,  156,   43,  104,   36,   40,   56,   69,
       84,  121,  123,  132,  218,  282,   29,   44,  107,  163,
      169,  178,  210,  346,  256,  411,  193,  254,  109,  135,
      185,  298,  201,  205,  326,  353, 3718, 3722, 3722, 3663,
     3699, 3722,  321, 3722, 3712,  188,  116,    0,  228, 3722,
     3711, 3664, 3656, 3666, 3703,  152, 3722,  161, 3722,  172,
     3722, 3706, 3698, 3722,  232, 3722, 3704, 3722, 3681, 3691,
       42, 3722,  473, 3639,  330, 3722, 3700, 3692, 3722, 3722,

     3722,  178, 3722, 3722, 3722, 3680,  225, 3722, 3722, 3722,
     3722, 3722, 3697, 3722, 3722, 3722, 3722,  534, 3634, 3722,
     3722, 3695, 3722,  188, 3722,  214,  263, 3722,  271,  276,
      294, 3722,  302,  306,    0, 3722, 3694, 3679,  224,    0,
      372, 3722,    0, 3722,  247, 3657,  255, 3722, 3659, 3686,
      272, 3722,  385,  422,  311,  393, 3722, 3722, 3722, 3685,
     3688,  436,  376, 3687,  336,    0,  360, 3722,    0,  359,
      386,  389,  574, 3722,  450,  635,  392, 3649, 3622,    0,
     3722,    0, 3722, 3670,  404, 3669,  291,  454,  520, 3645,
     3618, 3722, 3722, 3722, 3722, 3666,  405,    0,    0, 3722,

        0, 3675,    0,  460, 3722,    0, 3664,  412,   51, 3722,
      308,  316,    0,  443,  496,  500, 3663, 3722,  426,  470,
     3624,  431,  457,  504, 3722,  466,  479, 3722,  472, 3624,
      484, 3722,    0,  461, 3722, 3620, 3631, 3630, 3667, 3722,
      488, 3722,  514, 3722,  523, 3722,  525, 3722,  539,  543,
     3722, 3722, 3722, 3722, 3649,  297, 3722, 3722, 3722, 3722,
     3607, 3722,  547, 3722, 3668, 3722, 3722, 3722, 3649, 3722,
     3722, 3722, 3722, 3722, 3722, 3604, 3722, 3722,  550, 3722,
      558, 3722,  560, 3722,  562, 3722, 3722,  564,  566, 3722,
      571, 3722,  573,    0, 3722,  576, 3722,    0,    0,  701,

      580, 3633, 3660,  340,  585, 3655, 3647,  241,  589, 3652,
      611,  575,  703,  591,  710,  584, 3656, 3722, 3659,  702,
      715,  382,  723, 3644,  585,    0,  719,  688,  607, 3722,
     3722, 3722,  479, 3606,    0, 3605, 3604,  714, 3599, 3605,
     3614,  360, 3596, 3595, 3607, 3599,  742,  808, 3633, 3609,
     3582, 3722,  740,  615, 3722, 3607, 3580,  744, 3600, 3565,
        0, 3722,  720, 3571,  760,  874,  878, 3577, 3542,  882,
      763,    0, 3722, 3567, 3561, 3528, 3722, 3722,    0, 3578,
     3571,    0,  769, 3554, 3722, 3722,    0,  433, 3722,  493,
     3722,    0,  782, 3722, 3722, 3722, 3508, 3508, 3504, 3503,

     3481,  580, 3722,  605, 3722,  726, 3722, 3529, 3470, 3722,
     3513, 3461, 3463, 3449, 3722, 3722, 3490,  359, 3465, 3440,
     3722, 3722,  749,  786, 3722, 3467,  774, 3458, 3722, 3452,
      522, 3722, 3442,  889, 3722, 3433, 3428, 3722,  613,  467,
      764,  538,  744,  778,  727, 3389,  948, 3380,  835, 3722,
     3371, 3368, 3352, 3348, 3351, 3341, 3337, 3321, 3320, 1014,
        0,  893, 1015, 3324, 3315,  895, 3334, 3301, 3266,  701,
      854, 3287, 3722, 1016, 1020,  798,    0, 3285, 3278, 3243,
     3295, 3288, 3242, 3241, 3230, 3215, 3219, 3722, 3202, 3196,
     3191, 3175,  773, 3722, 3722,  897, 3215, 3722,  787, 3722,

      921, 3203, 3722,  897, 3204, 3188, 3181, 1024,  910, 3170,
     3142, 3722,    0,    0, 3135, 3129,    0, 3119, 3106, 3111,
     3099, 3080, 3069, 3076, 3057,  914,  868, 3062, 3722, 3061,
     3029,  876,  887, 1015,  928, 1037, 1085, 3048, 3039, 3006,
     3058, 3049, 3010,  984, 2991, 3000, 2979,  934, 3011, 2958,
     2954, 2985, 3722, 2992, 2984, 1089, 3722,  915, 2978, 2977,
     2967, 3722, 1047, 3722, 2899, 1067, 1030,    0, 2933, 2896,
     3722, 2881, 2882, 2857, 2864, 2858, 2845, 2859, 2846, 2841,
     1008, 2848, 2811, 2799, 2772, 2761, 2756, 1004, 2716, 2721,
     2670, 2662, 1093, 2672, 2699, 2698,    0, 2650, 2615, 2614,

     2606, 2601, 2588, 3722, 2632, 1006, 1097, 2578, 2589, 2597,
     2593, 3722,    0, 2553, 2553, 2549, 2549, 2551, 2549, 2540,
     2540, 2546, 2572, 3722, 2551, 1025, 2542, 2541, 2530, 2534,
     2542, 2538, 2532, 2526, 2530, 2573, 2571, 2532, 2525, 2513,
     2510, 2507, 3722, 2507, 2508, 1099,  941, 2507, 3722, 2545,
     2538, 2500, 2453, 2455, 2434, 2418, 2396, 2398, 2386, 2327,
     3722, 2252, 2254,    0, 2187, 2179, 2190, 2175, 2174, 2185,
     2135, 2175, 2167, 2120, 2106, 2116, 2101, 2087, 2064, 2065,
     1103, 1104, 2048, 2093, 3722, 2049, 2040, 2050, 2048, 2047,
     2044, 2040, 3722, 2038, 2042, 2023, 2030, 2028, 2039, 2025,

     2068, 2064,    0, 2023, 2023, 2009, 2006, 2011, 2011,    0,
     2033, 1946, 1918,    0, 1922, 1918, 1912, 1912, 1914, 1912,
     1899, 1904, 1946, 1930, 1874, 1798, 1791, 1775, 1803, 1741,
     3722, 1650, 1648, 1080, 1066, 1056, 1054, 1066, 1052, 1106,
     1105, 1069, 1035, 1034, 1029, 1053,  981,  983,  885,  894,
      890,  887,  894,  870,  756,  744,    0,  662,  698,  580,
      548,  552,  550,  436,  467,  391,  404,  398,  309,  349,
      282,  281,  238,    0,  216,  204,  199,  189,  177,  144,
      120,   92,   70,   24, 3722, 3722, 1122, 1145, 1168, 1191,
     1214, 1237, 1260, 1283, 1306, 1329, 1352, 1375, 1398, 1421,

     1444, 1467, 1490, 1513, 1536, 1559, 1582, 1605, 1628, 1651,
     1674, 1697, 1720, 1743, 1766, 1789, 1812, 1835, 1858, 1881,
     1904, 1927, 1950, 1973, 1996, 2019, 2042, 2065, 2087, 2110,
     2133, 2156, 2179, 2202, 2225, 2248, 2271, 2294, 2317, 2340,
     2363, 2386, 2409, 2432, 2455, 2478, 2501, 2524, 1094, 2547,
     2569, 2587, 2610, 2633, 2656, 2679, 2702, 2725, 2748, 2771,
     2794, 2817, 2840, 2863, 2886, 2909, 2932, 2955, 2978, 3001,
     3024, 3047, 3070, 3093, 3116, 3139, 3162, 3185, 3208, 3231,
     3254, 3277, 3300, 3323, 3346, 3369, 3392, 3415, 3438, 3461,
     3484, 3507, 3530, 3553, 3576, 3599, 3622

    } ;

static const flex_int16_t yy_def[898] =
    {   0,
      787,  787,  787,  788,  789,  789,  787,  787,  790,  790,
      787,  791,  792,  792,  793,  793,  793,  793,  794,  794,
      794,  794,  795,  795,  796,  796,  797,  797,  798,  798,
      799,  799,  800,  800,  801,  801,  787,  787,  802,  802,
      803,  803,  804,  804,  805,  805,  806,  806,  807,  807,
      808,  808,  809,  809,  810,  810,  786,  786,  786,  786,
      786,  786,  811,  786,  786,  786,  786,  812,  786,  786,
      812,  812,  812,  812,  813,  814,  786,  814,  786,  815,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      816,  786,  786,  817,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  818,  786,
      786,  786,  786,  819,  786,  819,  820,  786,  820,  820,
      821,  786,  821,  821,  822,  786,  822,  786,  822,  823,
      823,  786,  823,  786,  786,  824,  786,  786,  823,  823,
      823,  786,  786,  823,  786,  786,  786,  786,  786,  825,
      826,  826,  786,  826,  826,  827,  827,  786,  827,  786,
      786,  827,  786,  786,  827,  786,  786,  827,  786,  828,
      786,  828,  786,  786,  786,  786,  786,  828,  829,  828,
      786,  786,  786,  786,  786,  786,  786,  830,  831,  786,

      831,  832,  833,  833,  786,  833,  786,  833,  834,  786,
      834,  834,  835,  786,  786,  786,  786,  786,  786,  835,
      786,  836,  837,  837,  786,  837,  837,  786,  786,  786,
      786,  786,  838,  786,  786,  838,  838,  838,  839,  786,
      840,  786,  840,  786,  841,  786,  841,  786,  786,  786,
      786,  786,  786,  786,  842,  842,  786,  786,  786,  786,
      817,  786,  786,  786,  786,  786,  786,  786,  843,  786,
      786,  786,  786,  786,  786,  818,  786,  786,  819,  786,
      819,  786,  820,  786,  820,  786,  786,  820,  821,  786,
      821,  786,  821,  822,  786,  786,  786,  822,  823,  823,

      786,  823,  823,  823,  786,  844,  845,  786,  786,  846,
      786,  786,  823,  786,  786,  786,  847,  786,  848,  786,
      848,  848,  786,  786,  848,  827,  827,  827,  786,  786,
      786,  786,  827,  827,  849,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  827,  786,  786,  827,
      786,  786,  786,  348,  786,  786,  786,  786,  827,  786,
      850,  786,  786,  786,  786,  850,  851,  850,  786,  786,
      786,  852,  786,  786,  850,  786,  786,  786,  853,  854,
      854,  855,  855,  786,  786,  786,  855,  856,  786,  856,
      786,  857,  786,  786,  786,  786,  857,  857,  857,  857,

      786,  858,  786,  858,  786,  859,  786,  786,  786,  786,
      786,  860,  860,  860,  786,  786,  786,  842,  843,  786,
      786,  786,  821,  786,  786,  786,  786,  861,  786,  786,
      786,  786,  862,  786,  786,  863,  864,  786,  786,  786,
      786,  786,  786,  848,  827,  827,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  827,
      348,  786,  786,  786,  786,  786,  865,  827,  786,  786,
      786,  786,  786,  850,  786,  786,  852,  786,  850,  786,
      866,  866,  857,  857,  857,  857,  786,  786,  786,  860,
      860,  860,  842,  786,  786,  786,  867,  786,  786,  786,

      786,  786,  786,  786,  868,  786,  786,  786,  848,  827,
      827,  786,  447,  447,  786,  786,  869,  786,  786,  786,
      786,  786,  786,  786,  786,  827,  786,  786,  786,  827,
      786,  786,  786,  786,  850,  786,  786,  786,  850,  786,
      870,  870,  857,  857,  857,  857,  786,  786,  860,  860,
      860,  842,  786,  786,  786,  786,  786,  786,  862,  871,
      786,  786,  786,  786,  786,  848,  786,  827,  827,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  872,  872,  857,  857,  857,  857,

      857,  857,  786,  786,  786,  860,  860,  860,  786,  873,
      786,  786,  827,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  874,  874,  857,  857,  857,
      857,  857,  786,  860,  860,  786,  860,  860,  786,  875,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  876,  786,  786,  786,  786,  786,  786,
      786,  877,  877,  857,  857,  857,  857,  857,  860,  860,
      786,  786,  860,  878,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      879,  879,  857,  857,  857,  857,  857,  860,  860,  860,
      880,  786,  786,  881,  786,  786,  786,  786,  786,  786,
      786,  786,  882,  882,  857,  857,  860,  860,  883,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  884,
      884,  857,  857,  860,  860,  885,  786,  786,  786,  786,
      786,  786,  886,  886,  857,  857,  860,  860,  887,  786,
      786,  888,  888,  860,  889,  786,  890,  890,  860,  891,
      786,  892,  892,  860,  893,  894,  894,  895,  896,  896,
      897,  786,  786,  786,  786,    0,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786

    } ;

static const flex_int16_t yy_nxt[3790] =
    {   0,
      786,  786,  786,   59,   63,   64,   65,   63,   59,   60,
       59,   75,   66,   75,   77,   78,   61,   77,   78,   67,
       69,   70,   71,   69,   69,   70,   71,   69,   80,   81,
       82,   80,   59,   58,  100,  438,   83,  101,  125,  126,
       58,  100,  125,  126,  101,  121,  122,   59,   58,  100,
       58,  100,  103,  389,  103,  123,   58,  105,  128,  129,
       72,   58,  105,  256,   72,  257,   58,  105,  102,   58,
      105,  128,  129,   73,   74,  102,  785,   73,   74,   85,
       86,   87,   85,  102,   88,  102,  132,  133,  390,   89,
      106,  107,  108,  156,   90,  106,  107,  108,  785,   91,

      106,  107,  109,  106,  107,  109,  121,  122,  156,  158,
      159,  200,  201,  160,   92,   93,  123,  111,  112,  113,
      111,  202,  114,  132,  133,  136,  137,  115,  116,  232,
      134,  438,  222,  130,  136,  137,  138,  200,  201,  139,
       94,   95,   96,   97,   95,  138,   88,  202,  139,   98,
      783,   89,  117,  118,  242,  243,   90,  111,  112,  113,
      111,   91,  114,  244,  243,  158,  159,  115,  116,  160,
      162,  163,  164,  162,  246,  247,   92,   93,  119,  162,
      163,  164,  162,  783,  267,  165,  204,  205,  206,  204,
      280,  281,  117,  118,  165,  193,  194,  229,  207,  195,

      438,  208,   94,  210,  211,  780,  196,  210,  211,  197,
      780,  167,  168,  169,  167,  268,  282,  281,  119,  141,
      142,  143,  141,  170,  144,  145,  171,  438,  146,  234,
      198,  172,  234,  250,  147,  173,  250,  297,  212,  148,
      298,  221,  212,  148,  777,  230,  432,  173,  305,  149,
      231,  305,  150,  149,  433,  148,  193,  194,  181,  182,
      195,  270,  271,  272,  183,  284,  285,  196,  308,  184,
      197,  309,  185,  286,  285,  174,  151,  186,  287,  288,
      152,  187,  153,  154,  142,  143,  154,  777,  144,  155,
      302,  198,  146,  187,  183,  251,  290,  291,  147,  204,

      205,  206,  204,  148,  292,  291,  303,  148,  290,  291,
      389,  207,  305,  149,  208,  305,  150,  149,  391,  148,
      257,  183,  224,  225,  226,  224,  418,  214,  215,  216,
      214,  263,  264,  265,  263,  364,  365,  227,  320,  217,
      151,  218,  219,  664,  152,  390,  153,  175,  168,  169,
      175,  220,  325,  390,  214,  215,  216,  214,  302,  176,
      438,  327,  177,  220,  327,  774,  217,  172,  218,  219,
      293,  173,  329,  300,  303,  330,  300,  323,  220,  301,
      323,  328,  257,  173,  320,  178,  311,  311,  311,  311,
      220,  493,  324,  251,  315,  315,  315,  315,  325,  331,

      454,  312,  332,  302,  773,  331,  303,  302,  358,  316,
      773,  179,  188,  181,  182,  188,  455,  362,  377,  183,
      362,  377,  333,  313,  189,  386,  313,  185,  387,  314,
      304,  334,  186,  403,  404,  389,  187,  321,  320,  395,
      321,  771,  396,  333,  393,  393,  393,  393,  187,  183,
      190,  347,  322,  302,  347,  366,  303,  302,  366,  225,
      226,  383,  234,  348,  383,  234,  349,  367,  405,  226,
      390,  328,  506,  384,  407,  408,  191,  258,  438,  258,
      304,  225,  226,  506,  258,  259,  410,  411,  769,  350,
      242,  243,  406,  368,  258,  391,  259,  393,  393,  393,

      393,  393,  393,  393,  393,  224,  225,  226,  224,  258,
      260,  259,  397,  445,  398,  351,  244,  243,  399,  369,
      227,  370,  371,  371,  370,  246,  247,  415,  247,  400,
      390,  373,  498,  367,  445,  258,  362,  259,  274,  499,
      274,  416,  417,  507,  250,  274,  275,  250,  263,  264,
      265,  263,  280,  281,  507,  274,  768,  275,  768,  374,
      282,  281,  284,  285,  286,  285,  421,  285,  290,  291,
      274,  274,  275,  292,  291,  422,  423,  424,  425,  426,
      424,  305,  403,  404,  305,  369,  305,  320,  439,  305,
      434,  440,  305,  434,  435,  305,  274,  441,  275,  335,

      442,  444,  427,  427,  427,  436,  251,  488,  404,  664,
      251,  335,  311,  311,  311,  311,  336,  337,  506,  338,
      329,  339,  340,  330,  341,  342,  506,  312,  354,  343,
      344,  330,  766,  345,  346,  352,  353,  352,  352,  353,
      352,  352,  352,  352,  352,  352,  352,  352,  354,  352,
      352,  330,  355,  355,  355,  352,  352,  352,  352,  352,
      352,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  352,  352,  352,  356,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  352,  352,  352,

      357,  352,  300,  323,  313,  300,  323,  313,  301,  438,
      314,  315,  315,  315,  315,  764,  321,  320,  324,  321,
      327,  333,  450,  327,  323,  450,  316,  323,  225,  226,
      334,  322,  302,  532,  302,  303,  302,  303,  302,  324,
      328,  463,  333,  460,  463,  466,  460,  470,  466,  508,
      450,  495,  291,  471,  532,  348,  510,  467,  349,  304,
      508,  304,  470,  328,  371,  371,  371,  371,  473,  507,
      383,  510,  473,  383,  471,  496,  450,  507,  496,  464,
      320,  350,  384,  393,  393,  393,  393,  424,  425,  426,
      424,  427,  427,  427,  509,  703,  257,  429,  473,  537,

      537,  537,  537,  552,  555,  351,  703,  351,  352,  353,
      352,  352,  353,  352,  352,  352,  352,  352,  352,  352,
      352,  461,  352,  352,  473,  355,  355,  355,  352,  352,
      352,  352,  352,  352,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  352,  352,  352,  356,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      352,  352,  352,  357,  352,  474,  763,  516,  474,  370,
      371,  371,  370,  475,  371,  371,  475,  367,  533,  373,
      434,  367,  517,  434,  466,  476,  466,  466,  496,  466,

      763,  496,  432,  553,  581,  502,  467,  464,  467,  533,
      559,  566,  567,  368,  566,  526,  582,  374,  526,  581,
      432,  374,  556,  557,  556,  556,  509,  348,  559,  535,
      349,  582,  535,  351,  501,  328,  604,  605,  664,  369,
      761,  367,  682,  369,  664,  682,  664,  369,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  512,  512,  512,
      512,  512,  512,  512,  512,  514,  514,  514,  512,  512,
      512,  512,  512,  512,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  512,  512,  512,  512,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      512,  512,  512,  512,  513,  526,  527,  535,  526,  527,
      535,  536,  371,  371,  536,  563,  598,  348,  563,  367,
      349,  323,  599,  476,  323,  328,  760,  623,  593,  371,
      371,  593,  517,  600,  630,  564,  324,  644,  563,  565,
      476,  563,  623,  350,  464,  368,  645,  583,  584,  374,
      631,  565,  585,  586,  438,  587,  588,  663,  566,  567,
      589,  566,  565,  590,  591,  592,  374,  758,  757,  351,
      351,  369,  664,  756,  565,  369,  537,  537,  537,  537,
      556,  557,  556,  556,  593,  371,  371,  593,  646,  447,

      646,  646,  369,  646,  682,  682,  476,  682,  682,  755,
      447,  754,  754,  664,  752,  664,  447,  664,  751,  647,
      750,  681,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  233,  749,  748,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  255,
      255,  747,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  261,  261,  438,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  745,  261,  261,  276,  276,  744,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  743,  276,  276,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  294,  294,  742,
      294,  294,  294,  294,  294,  294,  741,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      299,  299,  741,  299,  739,  299,  738,  299,  299,  299,
      299,  299,  737,  299,  736,  735,  299,  734,  299,  299,
      733,  299,  299,  306,  306,  732,  306,  306,  306,  517,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  317,  317,  730,  317,

      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  326,  326,  438,  326,  326,  326,  326,  326,
      326,  728,  326,  326,  727,  326,  326,  597,  326,  597,
      326,  326,  326,  726,  326,  361,  361,  725,  361,  361,
      724,  361,  361,  361,  724,  361,  361,  722,  361,  721,
      720,  361,  719,  718,  361,  361,  717,  361,  372,  372,
      372,  716,  372,  715,  372,  517,  372,  714,  713,  372,

      517,  517,  712,  372,  438,  710,  372,  709,  372,  372,
      378,  378,  708,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  379,  707,  379,  379,  379,  379,
      379,  706,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  380,  705,  380,  380,
      380,  380,  380,  704,  703,  380,  380,  380,  380,  380,
      380,  380,  380,  702,  380,  380,  380,  380,  380,  382,
      382,  702,  382,  382,  382,  382,  382,  382,  700,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  392,  699,  698,  697,  392,
      392,  392,  392,  392,  696,  392,  695,  694,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  233,  692,  664,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  255,  255,  517,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  428,  428,  691,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  690,
      428,  428,  428,  428,  428,  430,  430,  517,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  437,  517,
      437,  437,  437,  437,  437,  437,  689,  437,  437,  437,
      437,  437,  437,  437,  437,  688,  437,  437,  437,  437,

      437,  317,  317,  687,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  361,  361,  686,
      361,  361,  685,  361,  361,  361,  438,  361,  361,  683,
      361,  680,  679,  361,  678,  677,  361,  361,  676,  361,
      372,  372,  372,  675,  372,  674,  372,  673,  372,  673,
      671,  670,  664,  669,  664,  372,  668,  667,  372,  666,
      372,  372,  477,  665,  662,  661,  660,  659,  658,  657,

      477,  656,  655,  477,  654,  653,  652,  651,  438,  477,
      379,  379,  649,  379,  379,  379,  379,  379,  648,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  481,  604,  481,  481,  481,  481,  481,
      643,  642,  481,  481,  481,  481,  481,  481,  481,  481,
      641,  481,  481,  481,  481,  481,  382,  382,  640,  382,
      382,  382,  382,  382,  382,  639,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  392,  638,  637,  637,  392,  392,  392,  392,
      392,  594,  392,  635,  634,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  233,  633,  632,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  497,  497,  629,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  628,  497,  497,  497,  497,  497,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  627,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  626,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  505,  625,  505,  505,  505,  505,  505,
      505,  624,  505,  505,  505,  505,  505,  505,  505,  505,
      580,  505,  505,  505,  505,  505,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  622,  621,

      529,  529,  620,  529,  529,  529,  529,  529,  529,  541,
      619,  541,  541,  541,  541,  541,  618,  617,  541,  541,
      541,  541,  541,  541,  541,  541,  616,  541,  541,  541,
      541,  541,  554,  554,  615,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  614,
      554,  554,  554,  554,  554,  560,  613,  560,  560,  560,
      560,  560,  560,  612,  560,  560,  560,  560,  560,  560,
      560,  560,  611,  560,  560,  560,  560,  560,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  438,  571,
      571,  786,  571,  571,  429,  571,  571,  571,  571,  571,

      571,  595,  429,  595,  595,  595,  595,  595,  609,  608,
      595,  595,  595,  595,  595,  595,  595,  595,  607,  595,
      595,  595,  595,  595,  610,  606,  610,  610,  610,  610,
      610,  610,  603,  610,  610,  610,  610,  610,  610,  610,
      610,  602,  610,  610,  610,  610,  610,  636,  601,  636,
      636,  636,  636,  636,  597,  596,  636,  636,  636,  636,
      636,  636,  636,  636,  596,  636,  636,  636,  636,  636,
      650,  540,  650,  650,  650,  650,  650,  650,  539,  650,
      650,  650,  650,  650,  650,  650,  650,  594,  650,  650,
      650,  650,  650,  672,  531,  672,  672,  672,  672,  672,

      530,  580,  672,  672,  672,  672,  672,  672,  672,  672,
      579,  672,  672,  672,  672,  672,  684,  578,  684,  684,
      684,  684,  684,  684,  577,  684,  684,  684,  684,  684,
      684,  684,  684,  576,  684,  684,  684,  684,  684,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  575,  693,  693,  574,  693,  693,  693,  693,
      693,  693,  701,  573,  701,  701,  701,  701,  701,  572,
      570,  701,  701,  701,  701,  701,  701,  701,  701,  517,
      701,  701,  701,  701,  701,  711,  569,  711,  711,  711,
      711,  711,  711,  568,  711,  711,  711,  711,  711,  711,

      711,  711,  562,  711,  711,  711,  711,  711,  723,  561,
      723,  723,  723,  723,  723,  438,  558,  723,  723,  723,
      723,  723,  723,  723,  723,  429,  723,  723,  723,  723,
      723,  729,  551,  729,  729,  729,  729,  729,  729,  550,
      729,  729,  729,  729,  729,  729,  729,  729,  549,  729,
      729,  729,  729,  729,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  548,  731,  731,  547,  731,  731,
      546,  731,  731,  731,  731,  731,  731,  740,  545,  740,
      740,  740,  740,  740,  544,  543,  740,  740,  740,  740,
      740,  740,  740,  740,  542,  740,  740,  740,  740,  740,

      746,  542,  746,  746,  746,  746,  746,  746,  540,  746,
      746,  746,  746,  746,  746,  746,  746,  539,  746,  746,
      746,  746,  746,  753,  538,  753,  753,  753,  753,  753,
      534,  531,  753,  753,  753,  753,  753,  753,  753,  753,
      530,  753,  753,  753,  753,  753,  759,  467,  759,  759,
      759,  759,  759,  759,  528,  759,  759,  759,  759,  759,
      759,  759,  759,  465,  759,  759,  759,  759,  759,  762,
      525,  762,  762,  762,  762,  762,  524,  523,  762,  762,
      762,  762,  762,  762,  762,  762,  522,  762,  762,  762,
      762,  762,  765,  517,  765,  765,  765,  765,  765,  765,

      521,  765,  765,  765,  765,  765,  765,  765,  765,  520,
      765,  765,  765,  765,  765,  767,  519,  767,  767,  767,
      767,  767,  518,  515,  767,  767,  767,  767,  767,  767,
      767,  767,  511,  767,  767,  767,  767,  767,  770,  438,
      770,  770,  770,  770,  770,  770,  504,  770,  770,  770,
      770,  770,  770,  770,  770,  501,  770,  770,  770,  770,
      770,  772,  429,  772,  772,  772,  772,  772,  429,  425,
      772,  772,  772,  772,  772,  772,  772,  772,  494,  772,
      772,  772,  772,  772,  775,  420,  775,  775,  775,  775,
      775,  775,  416,  775,  775,  775,  775,  775,  775,  775,

      775,  492,  775,  775,  775,  775,  775,  776,  491,  776,
      776,  776,  776,  776,  490,  410,  776,  776,  776,  776,
      776,  776,  776,  776,  489,  776,  776,  776,  776,  776,
      778,  407,  778,  778,  778,  778,  778,  778,  487,  778,
      778,  778,  778,  778,  778,  778,  778,  486,  778,  778,
      778,  778,  778,  779,  485,  779,  779,  779,  779,  779,
      484,  483,  779,  779,  779,  779,  779,  779,  779,  779,
      385,  779,  779,  779,  779,  779,  781,  482,  781,  781,
      781,  781,  781,  781,  482,  781,  781,  781,  781,  781,
      781,  781,  781,  480,  781,  781,  781,  781,  781,  782,

      479,  782,  782,  782,  782,  782,  478,  376,  782,  782,
      782,  782,  782,  782,  782,  782,  375,  782,  782,  782,
      782,  782,  784,  472,  784,  784,  784,  784,  784,  784,
      469,  784,  784,  784,  784,  784,  784,  784,  784,  468,
      784,  784,  784,  784,  784,  360,  465,  360,  359,  462,
      459,  458,  457,  456,  453,  452,  451,  449,  448,  446,
      443,  320,  318,  438,  431,  429,  310,  303,  277,  420,
      264,  262,  257,  240,  414,  413,  412,  409,  401,  394,
      385,  381,  377,  376,  375,  363,  362,  360,  359,  320,
      320,  318,  310,  303,  307,  296,  295,  278,  277,  273,

      269,  249,  266,  262,  254,  253,  252,  249,  248,  240,
      238,  237,  236,  235,  228,  222,  221,  786,   59,   59,
       59,   57,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786
    } ;

static const flex_int16_t yy_chk[3790] =
    {   0,
        0,    0,    0,    3,    4,    4,    4,    4,    7,    3,
        8,    7,    4,    8,    9,    9,    3,   10,   10,    4,
        5,    5,    5,    5,    6,    6,    6,    6,   12,   12,
       12,   12,   37,   15,   15,  784,   12,   15,   27,   27,
       16,   16,   28,   28,   16,   25,   25,   38,   17,   17,
       18,   18,   17,  209,   18,   25,   19,   19,   29,   29,
        5,   20,   20,   91,    6,   91,   21,   21,   15,   22,
       22,   30,   30,    5,    5,   16,  783,    6,    6,   13,
       13,   13,   13,   17,   13,   18,   31,   31,  209,   13,
       19,   19,   19,   37,   13,   20,   20,   20,  782,   13,

       21,   21,   21,   22,   22,   22,   26,   26,   38,   39,
       39,   49,   49,   39,   13,   13,   26,   23,   23,   23,
       23,   49,   23,   32,   32,   33,   33,   23,   23,   67,
       32,  781,   67,   30,   34,   34,   33,   50,   50,   33,
       13,   14,   14,   14,   14,   34,   14,   50,   34,   14,
      780,   14,   23,   23,   76,   76,   14,   24,   24,   24,
       24,   14,   24,   78,   78,   40,   40,   24,   24,   40,
       41,   41,   41,   41,   80,   80,   14,   14,   23,   42,
       42,   42,   42,  779,  102,   41,   51,   51,   51,   51,
      124,  124,   24,   24,   42,   47,   47,   66,   51,   47,

      778,   51,   14,   53,   53,  777,   47,   54,   54,   47,
      776,   43,   43,   43,   43,  102,  126,  126,   24,   35,
       35,   35,   35,   43,   35,   35,   43,  775,   35,   69,
       47,   43,   69,   85,   35,   43,   85,  139,   53,   35,
      139,   66,   54,   35,  773,   66,  308,   43,  145,   35,
       66,  145,   35,   35,  308,   35,   48,   48,   45,   45,
       48,  107,  107,  107,   45,  127,  127,   48,  147,   45,
       48,  147,   45,  129,  129,   43,   35,   45,  130,  130,
       35,   45,   35,   36,   36,   36,   36,  772,   36,   36,
      151,   48,   36,   45,   45,   85,  131,  131,   36,   52,

       52,   52,   52,   36,  133,  133,  151,   36,  134,  134,
      211,   52,  155,   36,   52,  155,   36,   36,  212,   36,
      256,   45,   63,   63,   63,   63,  256,   55,   55,   55,
       55,   95,   95,   95,   95,  187,  187,   63,  165,   55,
       36,   55,   55,  771,   36,  211,   36,   44,   44,   44,
       44,   55,  165,  212,   56,   56,   56,   56,  304,   44,
      770,  167,   44,   55,  167,  769,   56,   44,   56,   56,
      134,   44,  170,  141,  304,  170,  141,  163,   56,  141,
      163,  167,  418,   44,  322,   44,  153,  153,  153,  153,
       56,  418,  163,   95,  156,  156,  156,  156,  322,  171,

      342,  153,  171,  141,  768,  177,  141,  141,  177,  156,
      767,   44,   46,   46,   46,   46,  342,  185,  197,   46,
      185,  197,  172,  154,   46,  208,  154,   46,  208,  154,
      141,  172,   46,  222,  222,  388,   46,  162,  162,  219,
      162,  766,  219,  172,  214,  214,  214,  214,   46,   46,
       46,  175,  162,  154,  175,  188,  154,  154,  188,  223,
      223,  204,  234,  175,  204,  234,  175,  188,  226,  226,
      388,  175,  440,  204,  229,  229,   46,   93,  765,   93,
      154,  227,  227,  440,   93,   93,  231,  231,  764,  175,
      241,  241,  227,  188,   93,  390,   93,  215,  215,  215,

      215,  216,  216,  216,  216,  224,  224,  224,  224,   93,
       93,   93,  220,  333,  220,  175,  243,  243,  220,  188,
      224,  189,  189,  189,  189,  245,  245,  247,  247,  220,
      390,  189,  431,  189,  333,   93,  189,   93,  118,  431,
      118,  249,  249,  442,  250,  118,  118,  250,  263,  263,
      263,  263,  279,  279,  442,  118,  763,  118,  762,  189,
      281,  281,  283,  283,  285,  285,  288,  288,  289,  289,
      118,  118,  118,  291,  291,  293,  293,  296,  296,  296,
      296,  301,  402,  402,  301,  189,  305,  325,  312,  305,
      309,  312,  314,  309,  309,  314,  118,  316,  118,  173,

      316,  325,  305,  305,  305,  309,  250,  404,  404,  761,
      263,  173,  311,  311,  311,  311,  173,  173,  439,  173,
      329,  173,  173,  329,  173,  173,  439,  311,  354,  173,
      173,  354,  760,  173,  173,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  300,  320,  313,  300,  320,  313,  300,  759,
      313,  315,  315,  315,  315,  758,  321,  321,  320,  321,
      327,  328,  338,  327,  323,  338,  315,  323,  406,  406,
      328,  321,  300,  470,  313,  300,  300,  313,  313,  323,
      327,  353,  328,  347,  353,  358,  347,  363,  358,  443,
      338,  423,  423,  363,  470,  347,  445,  358,  347,  300,
      443,  313,  363,  347,  371,  371,  371,  371,  365,  441,
      383,  445,  365,  383,  363,  427,  338,  441,  427,  353,
      444,  347,  383,  393,  393,  393,  393,  424,  424,  424,
      424,  427,  427,  427,  444,  756,  493,  499,  365,  476,

      476,  476,  476,  493,  499,  353,  755,  347,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  365,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  366,  754,  449,  366,  367,
      367,  367,  367,  370,  370,  370,  370,  366,  471,  367,
      434,  367,  449,  434,  462,  370,  466,  462,  496,  466,

      753,  496,  504,  496,  532,  434,  462,  527,  466,  471,
      504,  509,  509,  366,  509,  526,  533,  367,  526,  532,
      558,  370,  501,  501,  501,  501,  509,  526,  558,  535,
      526,  533,  535,  527,  501,  526,  548,  548,  752,  366,
      751,  535,  647,  367,  750,  647,  749,  370,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  460,  463,  474,  460,  463,
      474,  475,  475,  475,  475,  508,  544,  460,  508,  474,
      460,  567,  544,  475,  567,  460,  748,  581,  536,  536,
      536,  536,  747,  544,  588,  508,  567,  606,  563,  508,
      536,  563,  581,  460,  463,  474,  606,  534,  534,  475,
      588,  508,  534,  534,  746,  534,  534,  626,  566,  566,
      534,  566,  563,  534,  534,  534,  536,  745,  744,  460,
      463,  474,  626,  743,  563,  475,  537,  537,  537,  537,
      556,  556,  556,  556,  593,  593,  593,  593,  607,  849,

      646,  607,  536,  646,  681,  682,  593,  681,  682,  742,
      849,  741,  740,  739,  738,  737,  849,  736,  735,  607,
      734,  646,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  812,  733,  732,

      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  816,
      816,  730,  816,  816,  816,  816,  816,  816,  816,  816,

      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  817,  817,  729,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  728,  817,  817,  818,  818,  727,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  726,  818,  818,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  822,  822,  725,
      822,  822,  822,  822,  822,  822,  724,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      823,  823,  723,  823,  722,  823,  721,  823,  823,  823,
      823,  823,  720,  823,  719,  718,  823,  717,  823,  823,
      716,  823,  823,  824,  824,  715,  824,  824,  824,  713,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  825,  825,  712,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  827,  827,  711,  827,  827,  827,  827,  827,
      827,  709,  827,  827,  708,  827,  827,  707,  827,  706,
      827,  827,  827,  705,  827,  828,  828,  704,  828,  828,
      702,  828,  828,  828,  701,  828,  828,  700,  828,  699,
      698,  828,  697,  696,  828,  828,  695,  828,  829,  829,
      829,  694,  829,  692,  829,  691,  829,  690,  689,  829,

      688,  687,  686,  829,  684,  683,  829,  680,  829,  829,
      830,  830,  679,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  831,  831,  678,  831,  831,  831,  831,
      831,  677,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  832,  676,  832,  832,
      832,  832,  832,  675,  674,  832,  832,  832,  832,  832,
      832,  832,  832,  673,  832,  832,  832,  832,  832,  833,
      833,  672,  833,  833,  833,  833,  833,  833,  671,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      833,  833,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  835,  670,  669,  668,  835,
      835,  835,  835,  835,  667,  835,  666,  665,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  838,  663,  662,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  842,  842,  660,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,

      842,  842,  842,  842,  842,  842,  842,  842,  842,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  844,  844,  659,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  658,
      844,  844,  844,  844,  844,  845,  845,  657,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  846,  656,
      846,  846,  846,  846,  846,  846,  655,  846,  846,  846,
      846,  846,  846,  846,  846,  654,  846,  846,  846,  846,

      846,  847,  847,  653,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  850,  850,  652,
      850,  850,  651,  850,  850,  850,  650,  850,  850,  648,
      850,  645,  644,  850,  642,  641,  850,  850,  640,  850,
      851,  851,  851,  639,  851,  638,  851,  637,  851,  636,
      635,  634,  633,  632,  631,  851,  630,  629,  851,  628,
      851,  851,  852,  627,  625,  623,  622,  621,  620,  619,

      852,  618,  617,  852,  616,  615,  614,  611,  610,  852,
      853,  853,  609,  853,  853,  853,  853,  853,  608,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  854,  605,  854,  854,  854,  854,  854,
      603,  602,  854,  854,  854,  854,  854,  854,  854,  854,
      601,  854,  854,  854,  854,  854,  855,  855,  600,  855,
      855,  855,  855,  855,  855,  599,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  857,  598,  596,  595,  857,  857,  857,  857,
      857,  594,  857,  592,  591,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  860,  590,  589,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  861,  861,  587,  861,  861,  861,

      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  586,  861,  861,  861,  861,  861,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  585,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  584,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  864,  583,  864,  864,  864,  864,  864,
      864,  582,  864,  864,  864,  864,  864,  864,  864,  864,
      580,  864,  864,  864,  864,  864,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  579,  578,

      865,  865,  577,  865,  865,  865,  865,  865,  865,  866,
      576,  866,  866,  866,  866,  866,  575,  574,  866,  866,
      866,  866,  866,  866,  866,  866,  573,  866,  866,  866,
      866,  866,  867,  867,  572,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  570,
      867,  867,  867,  867,  867,  868,  569,  868,  868,  868,
      868,  868,  868,  565,  868,  868,  868,  868,  868,  868,
      868,  868,  561,  868,  868,  868,  868,  868,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  560,  869,
      869,  559,  869,  869,  555,  869,  869,  869,  869,  869,

      869,  870,  554,  870,  870,  870,  870,  870,  552,  551,
      870,  870,  870,  870,  870,  870,  870,  870,  550,  870,
      870,  870,  870,  870,  871,  549,  871,  871,  871,  871,
      871,  871,  547,  871,  871,  871,  871,  871,  871,  871,
      871,  546,  871,  871,  871,  871,  871,  872,  545,  872,
      872,  872,  872,  872,  543,  542,  872,  872,  872,  872,
      872,  872,  872,  872,  541,  872,  872,  872,  872,  872,
      873,  540,  873,  873,  873,  873,  873,  873,  539,  873,
      873,  873,  873,  873,  873,  873,  873,  538,  873,  873,
      873,  873,  873,  874,  531,  874,  874,  874,  874,  874,

      530,  528,  874,  874,  874,  874,  874,  874,  874,  874,
      525,  874,  874,  874,  874,  874,  875,  524,  875,  875,
      875,  875,  875,  875,  523,  875,  875,  875,  875,  875,
      875,  875,  875,  522,  875,  875,  875,  875,  875,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  521,  876,  876,  520,  876,  876,  876,  876,
      876,  876,  877,  519,  877,  877,  877,  877,  877,  518,
      516,  877,  877,  877,  877,  877,  877,  877,  877,  515,
      877,  877,  877,  877,  877,  878,  511,  878,  878,  878,
      878,  878,  878,  510,  878,  878,  878,  878,  878,  878,

      878,  878,  507,  878,  878,  878,  878,  878,  879,  506,
      879,  879,  879,  879,  879,  505,  502,  879,  879,  879,
      879,  879,  879,  879,  879,  497,  879,  879,  879,  879,
      879,  880,  492,  880,  880,  880,  880,  880,  880,  491,
      880,  880,  880,  880,  880,  880,  880,  880,  490,  880,
      880,  880,  880,  880,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  489,  881,  881,  487,  881,  881,
      486,  881,  881,  881,  881,  881,  881,  882,  485,  882,
      882,  882,  882,  882,  484,  483,  882,  882,  882,  882,
      882,  882,  882,  882,  482,  882,  882,  882,  882,  882,

      883,  481,  883,  883,  883,  883,  883,  883,  480,  883,
      883,  883,  883,  883,  883,  883,  883,  479,  883,  883,
      883,  883,  883,  884,  478,  884,  884,  884,  884,  884,
      472,  469,  884,  884,  884,  884,  884,  884,  884,  884,
      468,  884,  884,  884,  884,  884,  885,  467,  885,  885,
      885,  885,  885,  885,  465,  885,  885,  885,  885,  885,
      885,  885,  885,  464,  885,  885,  885,  885,  885,  886,
      459,  886,  886,  886,  886,  886,  458,  457,  886,  886,
      886,  886,  886,  886,  886,  886,  456,  886,  886,  886,
      886,  886,  887,  455,  887,  887,  887,  887,  887,  887,

      454,  887,  887,  887,  887,  887,  887,  887,  887,  453,
      887,  887,  887,  887,  887,  888,  452,  888,  888,  888,
      888,  888,  451,  448,  888,  888,  888,  888,  888,  888,
      888,  888,  446,  888,  888,  888,  888,  888,  889,  437,
      889,  889,  889,  889,  889,  889,  436,  889,  889,  889,
      889,  889,  889,  889,  889,  433,  889,  889,  889,  889,
      889,  890,  430,  890,  890,  890,  890,  890,  428,  426,
      890,  890,  890,  890,  890,  890,  890,  890,  420,  890,
      890,  890,  890,  890,  891,  419,  891,  891,  891,  891,
      891,  891,  417,  891,  891,  891,  891,  891,  891,  891,

      891,  414,  891,  891,  891,  891,  891,  892,  413,  892,
      892,  892,  892,  892,  412,  411,  892,  892,  892,  892,
      892,  892,  892,  892,  409,  892,  892,  892,  892,  892,
      893,  408,  893,  893,  893,  893,  893,  893,  401,  893,
      893,  893,  893,  893,  893,  893,  893,  400,  893,  893,
      893,  893,  893,  894,  399,  894,  894,  894,  894,  894,
      398,  397,  894,  894,  894,  894,  894,  894,  894,  894,
      384,  894,  894,  894,  894,  894,  895,  381,  895,  895,
      895,  895,  895,  895,  380,  895,  895,  895,  895,  895,
      895,  895,  895,  376,  895,  895,  895,  895,  895,  896,

      375,  896,  896,  896,  896,  896,  374,  369,  896,  896,
      896,  896,  896,  896,  896,  896,  368,  896,  896,  896,
      896,  896,  897,  364,  897,  897,  897,  897,  897,  897,
      360,  897,  897,  897,  897,  897,  897,  897,  897,  359,
      897,  897,  897,  897,  897,  357,  356,  351,  350,  349,
      346,  345,  344,  343,  341,  340,  339,  337,  336,  334,
      324,  319,  317,  310,  307,  306,  303,  302,  276,  269,
      265,  261,  255,  239,  238,  237,  236,  230,  221,  217,
      207,  202,  196,  191,  190,  186,  184,  179,  178,  164,
      161,  160,  150,  149,  146,  138,  137,  122,  119,  113,

      106,   98,   97,   94,   90,   89,   87,   83,   82,   75,
       74,   73,   72,   71,   65,   61,   60,   57,   11,    2,
        1,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/vsc/github/doxygen/src/lexscanner.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2021 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 30 "/home/vsc/github/doxygen/src/lexscanner.l"

/*
 *      includes
 */

#include <algorithm>
#include <vector>
#include <utility>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "config.h"
#include "lexscanner.h"
#include "entry.h"
#include "message.h"
#include "util.h"
#include "scanner.h"
#include "debug.h"

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

#define repeatChar(chr, cnt) std::string(cnt, chr).c_str()

struct lexscannerYY_state
{
  COutlineParser   cOutlineParser;
  const char *     inputString = 0;
  int              inputPosition = 0;

  int              lastContext = 0;
  int              lastCContext = 0;
  int              lastStringContext = 0;
  int              docBlockContext  = 0;
  int              lastPreLineCtrlContext = 0;
  int              lastRawStringContext = 0;
  int              curlyCount = 0;

  bool             insideCode = FALSE;
  QCString         delimiter;
  QCString         docBlockName;
  uint32_t         fencedSize = 0;
  bool             nestedComment = false;

  QCString         prefix = "yy";
  bool             reentrant = false;
  bool             bison_bridge = false;
  bool             bison_locations = false;
  QCString         cCodeBuffer;
  int              roundCount = 0;

  QCString         fileName;
  ClangTUParser   *clangParser = 0;

  std::shared_ptr<Entry> current;
  std::shared_ptr<Entry> current_root;
  SrcLangExt language;
};

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif
//-----------------------------------------------------------------------------

// forward declarations for statefull functions
static void handleCCode(yyscan_t yyscanner);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);

/* ----------------------------------------------------------------- */
#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1943 "/home/vsc/github/doxygen/Debug/generated_src/lexscanner_intermediate.cpp"
#line 146 "/home/vsc/github/doxygen/src/lexscanner.l"
  /* no comment start / end signs inside square brackets */
  // C start comment
  // C end comment
  // Cpp comment
  // doxygen start comment
  // Optional any character
  // Optional all but newline



























#line 1979 "/home/vsc/github/doxygen/Debug/generated_src/lexscanner_intermediate.cpp"

#define INITIAL 0
#define DefSection 1
#define Option 2
#define OptPrefix 3
#define DefSectionLine 4
#define RulesSectionInit 5
#define RulesPattern 6
#define RulesDouble 7
#define RulesRoundDouble 8
#define RulesSquare 9
#define RulesRoundSquare 10
#define RulesRound 11
#define RulesRoundQuest 12
#define UserSection 13
#define TopSection 14
#define LiteralSection 15
#define COMMENT 16
#define SkipCurly 17
#define SkipCurlyEndDoc 18
#define PreLineCtrl 19
#define DocLine 20
#define DocBlock 21
#define DocCopyBlock 22
#define SkipString 23
#define RawString 24
#define SkipComment 25
#define SkipCxxComment 26
#define Comment 27

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct lexscannerYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 193 "/home/vsc/github/doxygen/src/lexscanner.l"


#line 2287 "/home/vsc/github/doxygen/Debug/generated_src/lexscanner_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 787 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 786 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 195 "/home/vsc/github/doxygen/src/lexscanner.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 196 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           BEGIN (Option);
                         }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 199 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           BEGIN (OptPrefix);
                         }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 202 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->prefix = yytext;
                           yyextra->prefix = yyextra->prefix.mid(1,yyleng-2);
                           BEGIN (Option);
                         }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 207 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra-> reentrant = true;
                         }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 210 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra-> bison_bridge = true;
                         }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 213 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra-> bison_bridge = true;
                           yyextra-> bison_locations = true;
                         }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 217 "/home/vsc/github/doxygen/src/lexscanner.l"

	YY_BREAK
case 9:
YY_RULE_SETUP
#line 218 "/home/vsc/github/doxygen/src/lexscanner.l"

	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 219 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                           BEGIN (DefSection);
                         }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 223 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           {
                             bool fill = false;
                             yyextra->cCodeBuffer += "int " + yyextra->prefix + "lex (";
                             if (yyextra->bison_bridge )
                             {
                               if (fill) yyextra->cCodeBuffer += ",";
                               yyextra->cCodeBuffer += "YYSTYPE * yylval_param";
                               fill = true;
                             }
                             if (yyextra->bison_locations)
                             {
                               if (fill) yyextra->cCodeBuffer += ",";
                               yyextra->cCodeBuffer += "YYLTYPE * yylloc_param";
                               fill = true;
                             }
                             if (yyextra->reentrant)
                             {
                               if (fill) yyextra->cCodeBuffer += ",";
                               yyextra->cCodeBuffer += "yyscan_t yyscanner";
                               fill = true;
                             }
                             if (!yyextra->bison_bridge && !yyextra->bison_locations && !yyextra->reentrant)
                             {
                               yyextra->cCodeBuffer += "void";
                             }
                             yyextra->cCodeBuffer += ") {\n";
                           }
                           BEGIN (RulesSectionInit);
                         }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 253 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                           yyextra->lastContext = YY_START;
                           BEGIN (TopSection);
                         }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 258 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                           yyextra->lastContext = YY_START;
                           BEGIN (LiteralSection);
                         }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 263 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                           BEGIN( yyextra->lastContext ) ;
                         }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 267 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 270 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                           BEGIN( yyextra->lastContext ) ;
                         }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 274 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 277 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           BEGIN(DefSectionLine);
                         }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 280 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 283 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(COMMENT);
                         }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 288 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer+=yytext;
                           BEGIN(yyextra->lastContext);
                         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 292 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer+=yytext;
                           BEGIN(yyextra->lastContext);
                         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 296 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 299 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 302 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 305 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 308 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                         }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 311 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 314 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                           BEGIN(DefSection);
                         }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 318 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "}\n";
                           BEGIN (UserSection);
                         }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 322 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           unput(*yytext);
                           BEGIN(RulesPattern);
                         }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 326 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 329 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 332 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 335 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 338 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 341 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 344 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesDouble);
                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 349 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 352 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 355 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN( yyextra->lastContext ) ;
                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 359 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN(RulesRound) ;
                        }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 363 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 366 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesSquare);
                        }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 371 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 46:
#line 375 "/home/vsc/github/doxygen/src/lexscanner.l"
case 47:
YY_RULE_SETUP
#line 375 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 378 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN(RulesPattern);
                        }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 382 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN(RulesRound) ;
                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 386 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 389 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 392 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesRoundQuest);
                         }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 397 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                         }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 400 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 403 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN(yyextra->lastContext);
                         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 407 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->roundCount++;
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           yyextra->lastContext = YY_START;
                           BEGIN(RulesRound);
                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 413 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 416 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN(RulesRoundSquare);
                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 420 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           BEGIN(RulesRoundDouble);
                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 424 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 427 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->roundCount++;
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 431 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->roundCount--;
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           if (!yyextra->roundCount) BEGIN( yyextra->lastContext ) ;
                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 436 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 439 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 442 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 445 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                           yyextra->curlyCount = 0;
                           BEGIN(SkipCurly);
                         }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 450 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += "\n";
                         }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 453 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                         }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 456 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           unput(*yytext);
                           yyextra->curlyCount = 0;
                           BEGIN(SkipCurly);
                         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 461 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 464 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += yytext;
                           yyextra->lastContext = YY_START;
                           BEGIN(COMMENT);
                         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 469 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                           yyextra->cCodeBuffer += repeatChar(' ', yyleng);
                         }
	YY_BREAK
case 73:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 472 "/home/vsc/github/doxygen/src/lexscanner.l"
{ /* line control directive */
                            yyextra->cCodeBuffer += yytext;
                            yyextra->lastPreLineCtrlContext = YY_START;
                            BEGIN( PreLineCtrl );
                          }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 477 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 480 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 483 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            BEGIN( yyextra->lastPreLineCtrlContext );
                          }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 487 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                                          ++yyextra->curlyCount ;
                          }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 492 "/home/vsc/github/doxygen/src/lexscanner.l"
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 492 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            if( yyextra->curlyCount )
                            {
                              --yyextra->curlyCount ;
                            }
                          }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 499 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            if ( yyextra->curlyCount )
                            {
                              --yyextra->curlyCount ;
                            }
                            else
                            {
                              yyextra->docBlockContext   = SkipCurlyEndDoc;
                              if (yytext[yyleng-3]=='/')
                              {
                                BEGIN( DocLine );
                              }
                              else
                              {
                                BEGIN( DocBlock );
                              }
                            }
                          }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 518 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->lastStringContext=SkipCurly;
                            BEGIN( SkipString );
                          }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 523 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->lastPreLineCtrlContext = YY_START;
                            BEGIN( PreLineCtrl );
                          }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 528 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            QCString raw=QCString(yytext).stripWhiteSpace();
                            yyextra->delimiter = raw.mid(2);
                            yyextra->delimiter=yyextra->delimiter.left(yyextra->delimiter.length()-1);
                            yyextra->lastRawStringContext = YY_START;
                            yyextra->cCodeBuffer += yytext;
                            BEGIN(RawString);
                          }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 536 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 539 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                                          yyextra->lastCContext = YY_START;
                                          BEGIN(SkipComment);
                          }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 544 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                                          yyextra->lastCContext = YY_START;
                                          BEGIN(SkipCxxComment);
                          }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 549 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 552 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 555 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 558 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocBlock );
                          }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 563 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            bool javadocBanner = Config_getBool(JAVADOC_BANNER);
                            yyextra->cCodeBuffer += yytext;
                            if( javadocBanner )
                            {
                              yyextra->docBlockContext   = YY_START;
                              BEGIN( DocBlock );
                            }
                            else
                            {
                              BEGIN( Comment ) ;
                            }
                          }
	YY_BREAK
case 92:
/* rule 92 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 576 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                             yyextra->cCodeBuffer += yytext;
                             yyextra->docBlockContext   = YY_START;
                             BEGIN( DocBlock );
                          }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 581 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocLine );
                          }
	YY_BREAK
case 94:
/* rule 94 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 586 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockContext   = YY_START;
                            BEGIN( DocLine );
                          }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 592 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            if (yyextra->curlyCount<=0)
                            {
                              BEGIN(RulesPattern);
                            }
                          }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 599 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                             yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 602 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                             yyextra->cCodeBuffer += yytext;
                             BEGIN( yyextra->lastStringContext );
                          }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 606 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 609 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 612 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 615 "/home/vsc/github/doxygen/src/lexscanner.l"
{  // line continuation
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 102:
/* rule 102 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 618 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            BEGIN( yyextra->lastCContext ) ;
                          }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 622 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext ;
                          }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 625 "/home/vsc/github/doxygen/src/lexscanner.l"
{ yyextra->cCodeBuffer += yytext ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 626 "/home/vsc/github/doxygen/src/lexscanner.l"
{ yyextra->cCodeBuffer += yytext ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 627 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->insideCode=TRUE;
                            yyextra->cCodeBuffer += yytext ;
                          }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 631 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->insideCode=FALSE;
                            yyextra->cCodeBuffer += yytext ;
                          }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 635 "/home/vsc/github/doxygen/src/lexscanner.l"
{ yyextra->cCodeBuffer += yytext ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 636 "/home/vsc/github/doxygen/src/lexscanner.l"
{ yyextra->cCodeBuffer += yytext ;
                                          if (!yyextra->insideCode) BEGIN( yyextra->lastContext ) ;
                          }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 639 "/home/vsc/github/doxygen/src/lexscanner.l"
{ yyextra->cCodeBuffer += *yytext ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 641 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 644 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 647 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 650 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            BEGIN( yyextra->lastCContext );
                          }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 654 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 657 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            QCString delimiter = yytext+1;
                            delimiter=delimiter.left(delimiter.length()-1);
                            if (delimiter==yyextra->delimiter)
                            {
                              BEGIN(yyextra->lastRawStringContext);
                            }
                          }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 666 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 669 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 672 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
/* ---- Single line comments ------ */
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 678 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // continuation of multiline C++-style comment
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 681 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // ignore marker line (see bug700345)
                            yyextra->cCodeBuffer += yytext;
                            BEGIN( yyextra->docBlockContext );
                          }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 685 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // next line is an end group marker, see bug 752712
                            yyextra->cCodeBuffer += yytext;
                            BEGIN( yyextra->docBlockContext );
                          }
	YY_BREAK
case 123:
/* rule 123 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 689 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // whole line
                            yyextra->cCodeBuffer += yytext;
                            BEGIN( yyextra->docBlockContext );
                          }
	YY_BREAK
/* ---- Comments blocks ------ */
case 124:
YY_RULE_SETUP
#line 696 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // end of comment block
                            yyextra->cCodeBuffer += yytext;
                            BEGIN(yyextra->docBlockContext);
                          }
	YY_BREAK
case 125:
/* rule 125 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 700 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 126:
/* rule 126 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 703 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // start of a comment line
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 706 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // strip embedded C++ comments if at the start of a line
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 709 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // slashes in the middle of a comment block
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 712 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // start of a new comment in the
                            // middle of a comment block
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 130:
/* rule 130 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 716 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // escaped command
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 719 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockName=&yytext[1];
                            if (yyextra->docBlockName.at(1)=='[')
                            {
                              yyextra->docBlockName.at(1)=']';
                            }
                            if (yyextra->docBlockName.at(1)=='{')
                            {
                              yyextra->docBlockName.at(1)='}';
                            }
                            if (yyextra->docBlockName.at(1)=='(')
                            {
                              yyextra->docBlockName.at(1)=')';
                            }
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 738 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockName="<pre>";
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 133:
/* rule 133 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 745 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // verbatim type command (which could contain nested comments!)
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockName="uml";
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 752 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // verbatim command (which could contain nested comments!)
                            yyextra->cCodeBuffer += yytext;
                            yyextra->docBlockName=&yytext[1];
                            yyextra->fencedSize=0;
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 759 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            yyextra->docBlockName="~~~";
                            yyextra->fencedSize=pat.stripWhiteSpace().length();
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 767 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            yyextra->docBlockName="```";
                            yyextra->fencedSize=pat.stripWhiteSpace().length();
                            yyextra->nestedComment=FALSE;
                            BEGIN(DocCopyBlock);
                          }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 775 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            REJECT;
                          }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 778 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // any character that isn't special
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 781 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // newline
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 784 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // command block
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 141:
YY_RULE_SETUP
#line 789 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // end of a <pre> block
                            yyextra->cCodeBuffer += yytext;
                            if (yyextra->docBlockName=="<pre>")
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 796 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // end of a <code> block
                            yyextra->cCodeBuffer += yytext;
                            if (yyextra->docBlockName=="<code>")
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 803 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            if (yyextra->docBlockName==&yytext[1])
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 810 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // end of verbatim block
                            yyextra->cCodeBuffer += yytext;
                            if (yyextra->docBlockName==&yytext[4])
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 817 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // start of a comment line
                            yyextra->cCodeBuffer += yytext;
                            if ((yyextra->docBlockName=="verbatim") || (yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              REJECT;
                            }
                            else
                            {
                              yyextra->cCodeBuffer += yytext;
                            }
                          }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 828 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // start of a comment line with two *'s
                            if ((yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              yyextra->cCodeBuffer += yytext;
                            }
                            else
                            {
                              REJECT;
                            }
                          }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 838 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // Assume *var or *(... is part of source code (see bug723516)
                            if ((yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              yyextra->cCodeBuffer += yytext;
                            }
                            else
                            {
                              REJECT;
                            }
                          }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 848 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // start of a comment line with one *
                            if ((yyextra->docBlockName=="code") || (yyextra->docBlockName=="iliteral"))
                            {
                              if (yyextra->nestedComment) // keep * it is part of the code
                              {
                                yyextra->cCodeBuffer += yytext;
                              }
                              else // remove * it is part of the comment block
                              {
                                yyextra->cCodeBuffer += yytext;
                              }
                            }
                            else
                            {
                              REJECT;
                            }
                          }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 865 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            if (yyextra->fencedSize==pat.stripWhiteSpace().length())
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 873 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            QCString pat = substitute(yytext,"*"," ");
                            if (yyextra->fencedSize==pat.stripWhiteSpace().length())
                            {
                              BEGIN(DocBlock);
                            }
                          }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 881 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // any character that is not special
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 884 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            if (yytext[1]=='*')
                            {
                              yyextra->nestedComment=TRUE;
                            }
                            else if (yytext[0]=='*')
                            {
                              yyextra->nestedComment=FALSE;
                            }
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 895 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // newline
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 898 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // any other character
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 901 "/home/vsc/github/doxygen/src/lexscanner.l"
{ // desc is followed by another one
                            yyextra->docBlockContext   = SkipCurlyEndDoc;
                            yyextra->cCodeBuffer += yytext;
                            if (yytext[yyleng-3]=='/')
                            {
                              BEGIN( DocLine );
                            }
                            else
                            {
                              BEGIN( DocBlock );
                            }
                          }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 913 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                            BEGIN(SkipCurly);
                          }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 918 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            yyextra->cCodeBuffer += yytext;
                          }
	YY_BREAK
/*
<*>.  { fprintf(stderr,"Lex scanner Def rule for %s: #%s#\n",stateToString(YY_START),yytext);}
<*>{nl}  { fprintf(stderr,"Lex scanner Def rule for newline %s: #%s#\n",stateToString(YY_START),yytext);}
 */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DefSection):
case YY_STATE_EOF(Option):
case YY_STATE_EOF(OptPrefix):
case YY_STATE_EOF(DefSectionLine):
case YY_STATE_EOF(RulesSectionInit):
case YY_STATE_EOF(RulesPattern):
case YY_STATE_EOF(RulesDouble):
case YY_STATE_EOF(RulesRoundDouble):
case YY_STATE_EOF(RulesSquare):
case YY_STATE_EOF(RulesRoundSquare):
case YY_STATE_EOF(RulesRound):
case YY_STATE_EOF(RulesRoundQuest):
case YY_STATE_EOF(UserSection):
case YY_STATE_EOF(TopSection):
case YY_STATE_EOF(LiteralSection):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipCurlyEndDoc):
case YY_STATE_EOF(PreLineCtrl):
case YY_STATE_EOF(DocLine):
case YY_STATE_EOF(DocBlock):
case YY_STATE_EOF(DocCopyBlock):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(RawString):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(Comment):
#line 927 "/home/vsc/github/doxygen/src/lexscanner.l"
{
                            handleCCode(yyscanner);
                            yyterminate();
                          }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 931 "/home/vsc/github/doxygen/src/lexscanner.l"
ECHO;
	YY_BREAK
#line 3861 "/home/vsc/github/doxygen/Debug/generated_src/lexscanner_intermediate.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 787 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 787 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 786);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 931 "/home/vsc/github/doxygen/src/lexscanner.l"


//----------------------------------------------------------------------------
static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int c=0;
  while( c < max_size && yyextra->inputString[yyextra->inputPosition] )
  {
    *buf = yyextra->inputString[yyextra->inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

//-----------------------------------------------------------------------------

static void parseMain(yyscan_t yyscanner,
                      const QCString &fileName,
                      const char *fileBuf,
                      const std::shared_ptr<Entry> &rt,
                      ClangTUParser *clangParser)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  yyextra->inputString = fileBuf;
  yyextra->inputPosition = 0;
  lexscannerYYrestart(0,yyscanner);

  yyextra->current_root  = rt;
  yyextra->fileName = fileName;
  yyextra->clangParser = clangParser;
  yyextra->language    = getLanguageFromFileName(yyextra->fileName);
  rt->lang = yyextra->language;
  msg("Parsing file %s...\n",qPrint(yyextra->fileName));

  yyextra->current_root  = rt;
  yyextra->current = std::make_shared<Entry>();
  int sec=guessSection(yyextra->fileName);
  if (sec)
  {
    yyextra->current->name    = yyextra->fileName;
    yyextra->current->section = sec;
    yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  }
  yyextra->current->reset();
  BEGIN( DefSection );

  lexscannerYYlex(yyscanner);

  rt->program.str(std::string());
}

//----------------------------------------------------------------------------


static void handleCCode(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  if (yyextra->cCodeBuffer.isEmpty()) return;
  yyextra->cOutlineParser.parseInput(yyextra->fileName,
                                     yyextra->cCodeBuffer.data(),
                                     yyextra->current_root,
                                     yyextra->clangParser);
  yyextra->cCodeBuffer.resize(0);
  return;
}
//----------------------------------------------------------------------------

struct LexOutlineParser::Private
{
  yyscan_t yyscanner;
  lexscannerYY_state state;
};

LexOutlineParser::LexOutlineParser() : p(std::make_unique<LexOutlineParser::Private>())
{
  lexscannerYYlex_init_extra(&p->state,&p->yyscanner);
#ifdef FLEX_DEBUG
  lexscannerYYset_debug(Debug::isFlagSet(Debug::Lex_lexscanner)?1:0,p->yyscanner);
#endif
}

LexOutlineParser::~LexOutlineParser()
{
  lexscannerYYlex_destroy(p->yyscanner);
}

void LexOutlineParser::parseInput(const QCString &fileName,
                                  const char *fileBuf,
                                  const std::shared_ptr<Entry> &root,
                                  ClangTUParser *clangParser)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;

  yyextra->fileName      = fileName;
  DebugLex debugLex(Debug::Lex_lexscanner, __FILE__, qPrint(fileName));

  ::parseMain(p->yyscanner,fileName,fileBuf,root,clangParser);
}


//----------------------------------------------------------------------------

#if USE_STATE2STRING
#include "lexscanner.l.h"
#endif

