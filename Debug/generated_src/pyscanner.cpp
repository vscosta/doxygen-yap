#line 1 "/home/vsc/github/doxygen/Debug/generated_src/pyscanner_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "/home/vsc/github/doxygen/Debug/generated_src/pyscanner_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define pyscannerYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer pyscannerYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define pyscannerYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer pyscannerYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define pyscannerYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer pyscannerYY_scan_buffer
#endif

#ifdef yy_scan_string
#define pyscannerYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string pyscannerYY_scan_string
#endif

#ifdef yy_scan_bytes
#define pyscannerYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes pyscannerYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define pyscannerYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer pyscannerYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define pyscannerYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer pyscannerYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define pyscannerYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state pyscannerYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define pyscannerYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer pyscannerYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define pyscannerYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state pyscannerYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define pyscannerYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state pyscannerYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define pyscannerYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack pyscannerYYensure_buffer_stack
#endif

#ifdef yylex
#define pyscannerYYlex_ALREADY_DEFINED
#else
#define yylex pyscannerYYlex
#endif

#ifdef yyrestart
#define pyscannerYYrestart_ALREADY_DEFINED
#else
#define yyrestart pyscannerYYrestart
#endif

#ifdef yylex_init
#define pyscannerYYlex_init_ALREADY_DEFINED
#else
#define yylex_init pyscannerYYlex_init
#endif

#ifdef yylex_init_extra
#define pyscannerYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra pyscannerYYlex_init_extra
#endif

#ifdef yylex_destroy
#define pyscannerYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy pyscannerYYlex_destroy
#endif

#ifdef yyget_debug
#define pyscannerYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug pyscannerYYget_debug
#endif

#ifdef yyset_debug
#define pyscannerYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug pyscannerYYset_debug
#endif

#ifdef yyget_extra
#define pyscannerYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra pyscannerYYget_extra
#endif

#ifdef yyset_extra
#define pyscannerYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra pyscannerYYset_extra
#endif

#ifdef yyget_in
#define pyscannerYYget_in_ALREADY_DEFINED
#else
#define yyget_in pyscannerYYget_in
#endif

#ifdef yyset_in
#define pyscannerYYset_in_ALREADY_DEFINED
#else
#define yyset_in pyscannerYYset_in
#endif

#ifdef yyget_out
#define pyscannerYYget_out_ALREADY_DEFINED
#else
#define yyget_out pyscannerYYget_out
#endif

#ifdef yyset_out
#define pyscannerYYset_out_ALREADY_DEFINED
#else
#define yyset_out pyscannerYYset_out
#endif

#ifdef yyget_leng
#define pyscannerYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng pyscannerYYget_leng
#endif

#ifdef yyget_text
#define pyscannerYYget_text_ALREADY_DEFINED
#else
#define yyget_text pyscannerYYget_text
#endif

#ifdef yyget_lineno
#define pyscannerYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno pyscannerYYget_lineno
#endif

#ifdef yyset_lineno
#define pyscannerYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno pyscannerYYset_lineno
#endif

#ifdef yyget_column
#define pyscannerYYget_column_ALREADY_DEFINED
#else
#define yyget_column pyscannerYYget_column
#endif

#ifdef yyset_column
#define pyscannerYYset_column_ALREADY_DEFINED
#else
#define yyset_column pyscannerYYset_column
#endif

#ifdef yywrap
#define pyscannerYYwrap_ALREADY_DEFINED
#else
#define yywrap pyscannerYYwrap
#endif

#ifdef yyalloc
#define pyscannerYYalloc_ALREADY_DEFINED
#else
#define yyalloc pyscannerYYalloc
#endif

#ifdef yyrealloc
#define pyscannerYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc pyscannerYYrealloc
#endif

#ifdef yyfree
#define pyscannerYYfree_ALREADY_DEFINED
#else
#define yyfree pyscannerYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscannerYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 229
#define YY_END_OF_BUFFER 230
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1451] =
    {   0,
    16550,16550,  169,  169,   36,   36,   43,   43,   51,   51,
      230,  228,  229,  226,  229,  227,  228,  229,   31,  228,
      229,   31,  228,  229,   23,  226,  229,   16,   31,  228,
      229,   31,  228,  229,   15,   31,  227,  228,  229,   27,
       31,  228,  229,   28,   31,  228,  229,   29,   31,  228,
      229,   31,  228,  229,   21,   30,   31,  228,  229,16398,
       21,   30,   31,  228,  229,16398,   21,   30,   31,  228,
      229,16398,   21,   30,   31,  228,  229,16398,   21,   30,
       31,  228,  229,16398,   21,   30,   31,  228,  229,16398,
       21,   30,   31,  228,  229,16398,   21,   30,   31,  228,

      229,16398,   21,   30,   31,  228,  229,16398,   22,   31,
      228,  229,   21,   30,   31,  228,  229,16395,16396,16397,
    16398,   21,   30,   31,  228,  229,16395,16396,16397,16398,
       21,   30,   31,  228,  229,16395,16396,16397,16398,   21,
       30,   31,  228,  229,16395,16396,16397,16398,   21,   30,
       31,  228,  229,16395,16396,16397,16398,   21,   30,   31,
      228,  229,16395,16396,16397,16398,   21,   30,   31,  228,
      229,16395,16396,16397,16398,   21,   30,   31,  228,  229,
    16395,16396,16397,16398,   21,   30,   31,  228,  229,16395,
    16396,16397,16398,   66,   67,  228,  229,   63,  226,  229,

       62,   67,  228,  229,   67,  228,  229,   61,   67,  227,
      228,  229,   67,  228,  229,   64,   67,  228,  229,   65,
       67,  228,  229,   65,   67,  228,  229,   65,   67,  228,
      229,   65,   67,  228,  229,   65,   67,  228,  229,   65,
       67,  228,  229,   65,   66,   67,  228,  229,   76,  228,
      229,   74,  226,  229,   73,   76,  228,  229,   76,  228,
      229,   72,   76,  227,  228,  229,   75,   76,  228,  229,
       75,   76,  228,  229,   75,   76,  228,  229,   75,   76,
      228,  229,  200,  203,  228,  229,  203,  228,  229,  201,
      226,  229,  203,  228,  229,  203,  227,  228,  229,  203,

      228,  229,  199,  203,  228,  229,  206,  208,  228,  229,
      207,  226,  229,  208,  228,  229,  206,  208,  227,  228,
      229,  206,  208,  228,  229,  204,  208,  228,  229,  228,
      229,   94,  228,  229,   95,  228,  229,  228,  229,   92,
      228,  229,   91,  228,  229,  103,  228,  229,   96,  228,
      229,  103,  228,  229,  103,  227,  228,  229,  100,  228,
      229,   97,  103,  228,  229,   96,  103,  228,  229,  101,
      228,  229,   99,  103,  228,  229,   98,  103,  228,  229,
       83,   87,  228,  229,   87,  228,  229,   86,  226,  229,
    16461,   82,   87,  228,  229,   85,   87,  228,  229,   81,

       87,  227,  228,  229,   83,   87,  228,  229,   83,   87,
      228,  229,   83,   87,  228,  229,   80,   87,  228,  229,
       85,   87,  228,  229,  126,  228,  229,  125,  226,  229,
      124,  126,  228,  229,  123,  126,  227,  228,  229,  117,
      126,  228,  229,  120,  126,  228,  229,  122,  126,  228,
      229,  121,  126,  228,  229,  116,  126,  228,  229,  119,
      126,  228,  229,  115,  126,  228,  229,  118,  126,  228,
      229,  114,  228,  229,  113,  226,  229,  112,  114,  228,
      229,  111,  114,  227,  228,  229,  106,  114,  228,  229,
      109,  114,  228,  229,  110,  114,  228,  229,  105,  114,

      228,  229,  108,  114,  228,  229,  104,  114,  228,  229,
      107,  114,  228,  229,  137,  228,  229,  136,  226,  229,
      135,  137,  228,  229,  134,  137,  227,  228,  229,  129,
      137,  228,  229,  132,  137,  228,  229,  133,  137,  228,
      229,  128,  137,  228,  229,  131,  137,  228,  229,  127,
      137,  228,  229,  130,  137,  228,  229,  150,  228,  229,
      151,  228,  229,  155,  228,  229,  154,  227,  228,  229,
      151,  228,  229,  152,  228,  229,  153,  228,  229,  228,
      229,  160,  226,  229, 8358,  228,  229,  228,  229, 8358,
      228,  229,  227,  228,  229, 8358,  228,  229, 8358,  228,

      229, 8358,  228,  229,  165,  228,  229,  144,  147,  228,
      229,  147,  228,  229,  145,  226,  229,  143,  147,  228,
      229,  147,  228,  229,  142,  147,  227,  228,  229,  144,
      147,  228,  229,  144,  147,  228,  229,  144,  147,  228,
      229,  141,  147,  228,  229,  184,  228,  229,  169,  184,
      228,  229,  185,  226,  229,  174,  184,  228,  229,  181,
      184,  228,  229,  173,  184,  227,  228,  229,  177,  184,
      228,  229,  170,  184,  228,  229,  170,  184,  228,  229,
      184,  228,  229,  167,  184,  228,  229,  182,  184,  228,
      229,  182,  184,  228,  229,  182,  184,  228,  229,  182,

      184,  228,  229,  182,  184,  228,  229,  178,  184,  228,
      229,  184,  228,  229,  182,  184,  228,  229,  179,  184,
      228,  229,  196,  228,  229,  195,  226,  229,  196,  227,
      228,  229,  193,  228,  229,  194,  226,  229,  191,  193,
      228,  229,  190,  193,  227,  228,  229,  186,  193,  228,
      229,  187,  193,  228,  229,  192,  193,  228,  229,  192,
      193,  228,  229,  192,  193,  228,  229,  192,  193,  228,
      229,  213,  214,  228,  229,  214,  228,  229,  212,  214,
      227,  228,  229,  214,  228,  229,  219,  220,  228,  229,
      218,  220,  228,  229,  220,  227,  228,  229,  220,  228,

      229,  223,  225,  228,  229,  223,  224,  226,  229,  223,
      225,  228,  229,  223,  225,  227,  228,  229,  225,  228,
      229,  157,  228,  229,  156,  157,  227,  228,  229,  159,
      228,  229,  158,  159,  228,  229,  159,  227,  228,  229,
       37,  228,  229,   36,   37,  228,  229,   35,  226,  229,
       37,  227,  228,  229,   32,   37,  228,  229,   33,   37,
      228,  229,   33,   37,  228,  229,   48,  228,  229,   43,
       48,  228,  229,   42,  226,  229,   48,  227,  228,  229,
       44,   48,  228,  229,   45,   48,  228,  229,   38,   48,
      228,  229,   46,   48,  228,  229,   41,   48,  228,  229,

    16423,16424,   48,  228,  229,   52,  228,  229,   51,   52,
      228,  229,   50,  226,  229,   52,  227,  228,  229,   49,
       52,  228,  229,16398,   23,   20,   19,   20,   18,   18,
       21,   30,16398,   21,   30,16398,   21,   30,16398,   21,
       30,16398,   21,   30,16398,   21,   30,16398,   21,   30,
    16398,   22,16395,16396,16397,16398,16395,16396,16397,16398,
    16395,16396,16397,16398,16395,16396,16397,16398,16395,16396,
    16397,16398,16395,16396,16397,16398,   21,   30,16395,16396,
    16397,16398, 8205,   21,   30,16395,16396,16397,16398,   21,
       30,16395,16396,16397,16398,   21,   30,16395,16396,16397,

    16398,   21,   30,16395,16396,16397,16398,   21,   30,16395,
    16396,16397,16398,   21,   30,16395,16396,16397,16398,   66,
       60,   65,   65,   65,   65,   65,   66,   71,   75,   75,
      200,  202,  199,  206,  205,  206,  204,  204,   94,   92,
       93,   92,   91,   96,  102,   97,  101,   98,   83,16461,
       85,   85,   83,   80,   79,   84,   85,  150,  151,  153,
      160,  164,  163,  165,  144,  146,  144,  141,  140,  169,
      181,  181,  170,  170,  170,  168,  182,  182,  174,  173,
      182,  182,  183,  192,  192,  213,  210,  210,  209,  219,
      216,  216,  215,  223,  223,  223,   36,   33,   33,   43,

     8232, 8231,   41,16423,16424,   47,   51,   49,16398,   24,
       20,   19,   20,   26,   25,   18,   18, 8206,   21,   30,
    16398,   21,   30,16398,   21,   30,16398,   21,   30,16398,
       21,   30,16398,16395,16396,16397,16398,16395,16396,16397,
    16398,16395,16396,16397,16398,16395,16396,16397,16398,16395,
    16396,16397,16398,16395,16396,16397,16398, 8204, 8206, 8204,
     8206, 8204, 8206,   21,   30,16395,16396,16397,16398,   21,
       30,16395,16396,16397,16398,   21,   30,16395,16396,16397,
    16398,   21,   30,16395,16396,16397,16398,   21,   30,16395,
    16396,16397,16398,   57,   60,   59,   58,   65,   65,   68,

       71,   70,   69,  197,  198,  102,   78, 8269, 8269,   88,
       85,   90,   90,   89,   84,   85,  153,  161,  164,  163,
      162,  138,  148,  146,  149,  175,  180,  181,  176,  171,
      170,  170,  168,  182,  182,  188,  189,  211,  217,  221,
      222,   33,   33, 8231,   49,   24,   25,   18,   18,   18,
       21,   30,16398,   21,   30,16398,    3,   21,   30,16398,
       21,   30,16398,16395,16396,16397,16398,16395,16396,16397,
    16398,16395,16396,16397,16398,16395,16396,16397,16398,16395,
    16396,16397,16398,   21,   30,16395,16396,16397,16398,   21,
       30,16395,16396,16397,16398,    1,    3,   21,   30,16395,

    16396,16397,16398,   21,   30,16395,16396,16397,16398,   57,
       58,   65,   68,   69,   88,   89,  153,  161,  162,  139,
      148,  149,  175,  180,  181,  176,  171,  170,  182,  172,
      182,  188,  189,   33,   33,   49,   18,   18,   21,   30,
    16398,   21,   30,16398,    8,   21,   30,16398,16395,16396,
    16397,16398,16395,16396,16397,16398,    1,16395,16396,16397,
    16398,16395,16396,16397,16398,   21,   30,16395,16396,16397,
    16398,   21,   30,16395,16396,16397,16398,    7,    8,   21,
       30,16395,16396,16397,16398,16439,16440,  171,   33,   18,
        6,   21,   30,16398,16395,16396,16397,16398,16395,16396,

    16397,16398,    7,16395,16396,16397,16398,    5,    6,   21,
       30,16395,16396,16397,16398, 8247,16439,16440, 8248,16437,
    16438,   33,   34,   18,   10,    5,16395,16396,16397,16398,
        9,   10, 8245,16437,16438, 8246,   34,   18,    9,   18,
       18,    4, 8203,    2,    4,   18,    2,   18,   17,   18
    } ;

static const flex_int16_t yy_accept[676] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        7,    8,    9,   10,   11,   12,   14,   16,   19,   22,
       25,   28,   32,   35,   40,   44,   48,   52,   55,   61,
       67,   73,   79,   85,   91,   97,  103,  109,  113,  122,
      131,  140,  149,  158,  167,  176,  185,  194,  198,  201,
      205,  208,  213,  216,  220,  224,  228,  232,  236,  240,

      244,  249,  252,  255,  259,  262,  267,  271,  275,  279,
      283,  287,  290,  293,  296,  300,  303,  307,  311,  314,
      317,  322,  326,  330,  332,  335,  338,  340,  343,  346,
      349,  352,  355,  359,  362,  366,  370,  373,  377,  381,
      385,  388,  392,  396,  400,  405,  409,  413,  417,  421,
      425,  428,  431,  435,  440,  444,  448,  452,  456,  460,
      464,  468,  472,  475,  478,  482,  487,  491,  495,  499,
      503,  507,  511,  515,  518,  521,  525,  530,  534,  538,
      542,  546,  550,  554,  558,  561,  564,  567,  571,  574,
      577,  580,  582,  585,  588,  590,  593,  596,  599,  602,

      605,  608,  612,  615,  618,  622,  625,  630,  634,  638,
      642,  646,  649,  653,  656,  660,  664,  669,  673,  677,
      681,  684,  688,  692,  696,  700,  704,  708,  712,  715,
      719,  723,  726,  729,  733,  736,  739,  743,  748,  752,
      756,  760,  764,  768,  772,  776,  779,  784,  787,  791,
      795,  799,  802,  806,  810,  814,  819,  822,  825,  830,
      833,  837,  841,  844,  848,  851,  855,  859,  863,  867,
      870,  874,  877,  881,  885,  889,  893,  897,  903,  906,
      909,  913,  916,  920,  924,  924,  925,  926,  926,  927,
      929,  929,  929,  930,  931,  931,  931,  931,  934,  934,

      934,  934,  937,  940,  943,  946,  949,  952,  953,  957,
      961,  965,  969,  973,  977,  977,  983,  984,  984,  990,
      996, 1002, 1008, 1014, 1020, 1021, 1021, 1022, 1022, 1022,
     1023, 1023, 1023, 1024, 1025, 1026, 1028, 1028, 1029, 1029,
     1029, 1030, 1030, 1030, 1031, 1032, 1032, 1032, 1033, 1034,
     1035, 1035, 1036, 1037, 1038, 1039, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1051,
     1051, 1051, 1052, 1053, 1053, 1053, 1053, 1054, 1055, 1056,
     1058, 1059, 1060, 1060, 1061, 1061, 1062, 1062, 1063, 1064,
     1064, 1064, 1064, 1064, 1065, 1066, 1066, 1066, 1066, 1067,

     1067, 1067, 1067, 1068, 1069, 1070, 1071, 1071, 1072, 1073,
     1073, 1073, 1074, 1075, 1076, 1076, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1084, 1084, 1085, 1085, 1085,
     1086, 1087, 1087, 1088, 1089, 1090, 1091, 1091, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1098, 1098, 1099, 1100, 1101,
     1101, 1102, 1103, 1106, 1106, 1107, 1108, 1108, 1108, 1109,
     1110, 1111, 1112, 1114, 1115, 1116, 1116, 1116, 1117, 1118,
     1118, 1118, 1118, 1119, 1122, 1125, 1128, 1131, 1134, 1138,
     1142, 1146, 1150, 1154, 1158, 1160, 1162, 1164, 1170, 1176,
     1182, 1188, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,

     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1210,
     1211, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222,
     1222, 1223, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1239, 1240,
     1240, 1241, 1242, 1242, 1243, 1244, 1245, 1245, 1246, 1247,
     1248, 1248, 1249, 1250, 1251, 1251, 1254, 1257, 1258, 1261,
     1264, 1268, 1272, 1276, 1280, 1284, 1284, 1284, 1284, 1290,
     1296, 1298, 1304, 1310, 1311, 1312, 1312, 1313, 1314, 1315,
     1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1326,
     1327, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336,

     1337, 1338, 1339, 1342, 1345, 1346, 1349, 1353, 1357, 1358,
     1362, 1366, 1366, 1372, 1378, 1380, 1386, 1388, 1388, 1388,
     1389, 1390, 1391, 1391, 1392, 1395, 1399, 1403, 1404, 1408,
     1408, 1408, 1410, 1416, 1416, 1417, 1419, 1420, 1422, 1424,
     1425, 1425, 1426, 1426, 1427, 1431, 1431, 1431, 1433, 1433,
     1434, 1436, 1437, 1438, 1439, 1439, 1439, 1440, 1440, 1440,
     1441, 1441, 1441, 1441, 1441, 1442, 1443, 1443, 1444, 1446,
     1447, 1448, 1449, 1451, 1451
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   14,   15,    7,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    7,   20,
       21,   22,    1,   23,   24,   24,   24,   25,   26,   27,
       28,   29,   28,   30,   29,   31,   29,   29,   29,   29,
       29,   32,   29,   33,   34,   29,   29,   35,   29,   29,
       36,   37,   38,    1,   39,    7,   40,   24,   41,   42,

       43,   44,   29,   45,   46,   30,   29,   47,   48,   49,
       50,   51,   29,   52,   53,   54,   55,   29,   29,   35,
       56,   29,   57,    7,   58,    7,    1,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59
    } ;

static const YY_CHAR yy_meta[60] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    6,    7,
        1,    1,    7,    1,    8,    9,    9,    9,   10,    1,
       11,    1,    1,   12,   12,   12,   12,   13,   13,   13,
       14,   13,   13,   13,   13,    1,   15,    1,   13,   12,
       12,   12,   12,   12,   13,   13,   14,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    1,    1,   16
    } ;

static const flex_int16_t yy_base[812] =
    {   0,
        0,    1,    9,   68,  127,    0,  186,    0,  244,  248,
      251,  258,  285,    0,  344,    0,  402,  456,  509,  565,
      621,  677,  733,  789,  847,    0,  906,    0,  965, 1020,
     1074, 1128, 1183,    0,  255,  259, 1242,    0,  406,  410,
      416,  423,  430,  436,  262,  265,  266,  272, 1301,    0,
     1360,    0, 1419,    0, 2099, 4071, 4071, 4071, 4071, 2096,
     2089, 2085,    1, 2081, 4071, 4071, 4071, 2032,  427,  464,
      473,  474,  489,  494,  474,  492,    0,  511,  529,  574,
     1477,  553,  557,  564,  583,  589,    0,    0, 4071, 2077,
     2072, 2067, 4071, 4071,    0,  271,  606, 2024, 2025,  612,

     1529, 4071, 4071, 2059, 2055, 2048,    0,  415,  620,  631,
        0, 4071, 4071, 2049, 2042,    0, 2042,    0,    0, 4071,
        0,  276, 2037,  423, 4071, 4071, 2004, 2017,    0, 4071,
     2015,    0, 4071, 4071, 2004, 4071, 2006, 4071,    0,    0,
     4071,  410, 1997, 1991, 1988,  422,  637,  638,  281, 1988,
     4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071,
     4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071,
     4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071,
     4071, 4071, 4071, 4071,    0, 1986, 4071, 4071, 4071, 4071,
     1971,  443, 4071, 4071, 1979, 1974, 1962,  444,  642,  643,

      448,    0, 4071, 1960, 1958,    0, 1951,  460,  660,  668,
      453, 4071, 1954, 4071, 1947, 1945, 1937, 4071,  686,  692,
     1940, 4071,    0, 1898,  484, 1882,  720, 4071, 1928,  721,
     4071, 4071, 4071, 4071, 4071, 4071, 1923, 1910, 4071, 4071,
        0,  493,  722,  732,    0, 1911, 4071,  518,    0, 4071,
     1907,  526, 4071, 4071, 1907, 1903,    0, 4071, 4071, 4071,
     4071, 4071, 4071, 1906, 4071, 4071, 4071,  478,  501, 4071,
     1902, 4071, 4071, 4071, 4071, 4071, 4071,  533,  530, 4071,
     1896, 4071, 4071,  539, 1892,  745, 1889, 1885,    0,    0,
        0, 1876,  562,  645,  746,  598, 1881,  747,    0, 1876,

     1872,  775,  768,  791,  793,  974,  979,  777,  820,  983,
      988, 1027, 1032, 1037, 1047, 1076, 4071,  532, 1086, 1090,
     1100, 1122, 1478, 1493,    0, 1874,    0,    0, 1868,    0,
     1865, 1855,  551, 1802, 1805, 1588, 1846,    0,    0, 1781,
        0, 1783, 1779,  555,    0, 1781, 1777, 4071, 1782,    0,
      596, 4071,  647, 1777, 1776,  679, 4071, 1779, 4071, 1772,
        0, 1769,    0, 1759, 1765,    0,    0,  660, 1760, 1647,
     1753,    0,  607, 1748, 1750, 1745,  706,  578, 4071,    0,
        0, 1747,    0, 1720,  630, 4071, 1729,    0, 1726, 1710,
     1709, 1703,  757,  653,    0, 1704, 1706, 1702,    0, 1636,

     1638, 1633,  800,  703, 4071, 1637, 1632,    0, 1615, 1625,
      793, 1134, 1538, 4071,    0, 1620,    0,    0, 1571, 1610,
     1605, 1548,  808, 4071, 1591, 1586,    0, 1588, 1583,  821,
        0, 1579, 4071,  716, 4071,    0, 1570, 4071,  729, 4071,
     1572, 1568, 4071, 1557,  597, 1555,  669,  785, 1533,  830,
     4071, 1523,  832,  742, 4071, 1521,  748, 1518,  805,  970,
     1515,    0,    0, 4071, 1501, 1491,    0,  652, 1001,  973,
     1492, 1091, 4071, 1511, 1505, 1135, 1479, 1562, 1157, 1560,
     1702, 1703, 1707, 1717, 4071,  784, 1441, 1727, 1561, 1617,
     1731, 1741, 1482,    0, 4071, 1480, 1468,  494, 1175,    0,

     4071, 1171, 4071, 4071,    0, 4071, 4071, 1791,    0, 1169,
        0, 4071, 1168,    0, 1154, 1164,    0, 1155, 1153,    0,
     1153, 1152, 1143,    0, 1140, 1116,    0, 1114, 1747, 4071,
      375,    0, 1045, 1047, 1077, 1067, 4071,  773, 4071,  975,
     4071, 4071, 1031,  813, 1012, 1029, 1013,  967, 4071, 4071,
      998, 4071,  682, 1029, 1161, 1846, 1847, 1607, 1619, 1851,
     1852, 1856, 1759, 1872, 1876, 1004,  951,  936, 1886, 1900,
     1904, 1920, 1927, 4071, 4071,    0,  964, 4071, 4071, 4071,
     4071,  959, 4071, 4071, 4071, 4071, 4071, 4071,    0, 4071,
     1047, 4071, 4071,  739,    0, 4071, 4071, 1003, 1017, 1072,

      829, 1107, 1621, 1922, 1934, 1947, 1948, 1952, 1962, 1972,
     1985,  710, 1990, 1997, 2010, 2011, 2012,    0,  995, 1960,
     1123, 1493, 2025, 2026, 2032, 2038, 2039, 2053, 2060,  708,
     2067, 2074, 2081, 2094, 4071, 2095, 4071, 2108, 1112, 1502,
      681, 2109, 2115, 2122, 2129,  641,  634, 2142, 2143, 4071,
     2149, 4071, 1113, 1716,  590,  584, 2156,  564,  548, 1507,
      588,  520,  467,  468, 1730,  461,  270, 4071,  253, 1108,
      246, 1495, 1058, 4071, 2177, 2193, 2209, 2225, 2241, 2257,
     2273, 2289, 2305, 2321, 2337, 2353, 2369, 2385, 2401, 2416,
     2432, 2437, 2452, 2467, 2482, 2498, 2514, 2522, 2538, 2546,

     2562, 2578, 2594, 2602, 2618, 2626, 2642, 2657, 2673, 2689,
     2697, 2706, 2722, 2738, 2750, 2766, 2782, 2797, 2805, 2813,
     2829, 2845, 2861, 2877, 2893, 2908, 2923, 2938, 2953, 2968,
     2984, 3000, 3016, 3027, 3042, 3057, 3073, 3088, 3103, 3118,
     3134, 3150, 3166, 3182, 3190, 3206, 3222, 3230, 3246, 3262,
     3270, 3286, 3294, 3310, 3325, 3341, 3357, 3373, 3381, 3386,
     3395, 3411, 3427, 3442, 3458, 3474, 1130, 3489, 3497, 3505,
     3513, 3529, 3545, 3560, 3575, 3590, 3605, 3620, 3635, 3651,
     3667, 3683, 3688, 3699, 3714, 3729, 3744, 3759, 3774, 3790,
     3799, 3815, 3831, 3847, 3863, 3872, 3888, 3904, 3919, 3935,

     3951, 3959, 3965, 3973, 3988, 4003, 4014, 4019, 4034, 4039,
     4054
    } ;

static const flex_int16_t yy_def[812] =
    {   0,
      675,  675,  674,  674,  674,    5,  674,    7,  676,  676,
      677,  677,  674,   13,  674,   15,  678,  678,  679,  679,
      680,  680,  681,  681,  674,   25,  674,   27,  682,  682,
      683,  683,  674,   33,  684,  684,  674,   37,  685,  685,
      686,  686,  687,  687,  688,  688,  689,  689,  674,   49,
      674,   51,  674,   53,  674,  674,  674,  674,  674,  690,
      674,  674,  691,  674,  674,  674,  674,  692,  693,  693,
      693,  693,  693,  693,   71,   71,   71,  694,  695,  695,
      695,   81,   81,   81,   81,   81,   81,  696,  674,  674,
      697,  674,  674,  674,  698,  698,  698,  698,  698,  698,

      698,  674,  674,  674,  699,  674,  700,  700,  700,  700,
      701,  674,  674,  674,  674,  702,  674,  703,  674,  674,
      703,  703,  674,  674,  674,  674,  674,  674,  704,  674,
      674,  705,  674,  674,  674,  674,  674,  674,  706,  707,
      674,  708,  674,  709,  674,  707,  707,  707,  674,  710,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  711,  674,  674,  674,  674,  674,
      712,  674,  674,  674,  674,  713,  674,  674,  674,  674,

      674,  714,  674,  715,  674,  716,  674,  714,  714,  714,
      674,  674,  674,  674,  674,  717,  674,  674,  674,  674,
      718,  674,  719,  719,  719,  719,  719,  674,  674,  719,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      720,  720,  720,  720,  721,  674,  674,  722,  723,  674,
      674,  724,  674,  674,  674,  674,  725,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  726,  726,  674,
      674,  674,  674,  674,  674,  674,  674,  727,  674,  674,
      674,  674,  674,  728,  729,  730,  674,  674,  731,  732,
      733,  674,  734,  734,  674,  674,  735,  736,  737,  674,

      674,  736,  736,  736,  736,  736,  736,  738,  739,  739,
      739,  739,  739,  739,  674,  740,  674,  741,  740,  740,
      740,  740,  740,  740,  742,  674,  743,  744,  674,  745,
      674,  674,  745,  745,  745,  745,  674,  746,  747,  674,
      748,  674,  674,  748,  749,  674,  674,  674,  674,  750,
      674,  674,  750,  674,  674,  674,  674,  674,  674,  674,
      751,  674,  752,  674,  674,  753,  754,  755,  674,  674,
      674,  756,  757,  674,  674,  674,  754,  674,  674,  758,
      759,  674,  760,  761,  674,  674,  674,  762,  674,  674,
      674,  674,  674,  674,  763,  674,  764,  674,  765,  674,

      674,  674,  763,  674,  674,  674,  674,  766,  766,  674,
      674,  674,  674,  674,  767,  768,  769,  770,  770,  674,
      674,  770,  770,  674,  674,  674,  771,  674,  674,  771,
      772,  674,  674,  674,  674,  773,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  774,  775,  775,  674,  674,
      674,  674,  776,  674,  674,  674,  674,  777,  778,  779,
      674,  780,  781,  674,  674,  782,  783,  784,  784,  674,
      785,  786,  674,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  674,  674,  674,  789,  789,  789,
      789,  789,  674,  790,  674,  674,  791,  791,  674,  792,

      674,  674,  674,  674,  793,  674,  674,  674,  508,  674,
      794,  674,  674,  795,  796,  674,  797,  674,  674,  798,
      674,  799,  674,  800,  674,  674,  801,  674,  674,  674,
      802,  803,  804,  804,  674,  674,  674,  674,  674,  674,
      674,  674,  774,  805,  775,  674,  777,  806,  674,  674,
      782,  674,  807,  784,  786,  787,  787,  674,  787,  787,
      788,  788,  788,  788,  788,  674,  674,  674,  789,  789,
      674,  789,  789,  674,  674,  808,  791,  674,  674,  674,
      674,  796,  674,  674,  674,  674,  674,  674,  801,  674,
      674,  674,  674,  804,  804,  674,  674,  805,  775,  806,

      807,  784,  787,  787,  674,  787,  788,  788,  674,  788,
      788,  674,  789,  789,  674,  789,  809,  810,  674,  674,
      775,  784,  674,  674,  787,  788,  788,  674,  788,  674,
      674,  674,  789,  674,  674,  809,  674,  811,  775,  784,
      674,  674,  674,  674,  788,  674,  674,  674,  674,  674,
      811,  674,  674,  784,  674,  674,  674,  674,  674,  784,
      674,  674,  674,  674,  784,  674,  674,  674,  674,  784,
      674,  784,  784,    0,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674
    } ;

static const flex_int16_t yy_nxt[4131] =
    {   0,
      674,  351,   57,   57,  290,  352,  291,   58,   58,   59,
       60,   61,   59,   62,   63,   59,   64,   65,   66,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   67,
       59,   68,   69,   69,   69,   69,   69,   69,   69,   69,
       70,   69,   71,   69,   59,   59,   59,   69,   72,   73,
       74,   69,   75,   69,   76,   69,   69,   69,   69,   69,
       70,   69,   69,   77,   69,   59,   59,   69,   59,   78,
       61,   59,   62,   63,   59,   64,   65,   66,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   67,   59,
       68,   79,   79,   79,   79,   79,   79,   79,   79,   80,

       79,   81,   79,   59,   59,   59,   79,   82,   83,   84,
       79,   85,   79,   86,   79,   79,   79,   79,   79,   80,
       79,   79,   87,   79,   59,   59,   79,   88,   88,   89,
       88,   90,   91,   88,   92,   88,   88,   88,   88,   88,
       88,   93,   88,   88,   88,   88,   88,   94,   88,   88,
       95,   95,   95,   95,   95,   95,   95,   95,   96,   95,
       97,   95,   88,   88,   88,   95,   95,   98,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   96,   99,
       95,  100,   95,   88,   88,  101,  102,  102,  103,  102,
      104,  105,  102,  106,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  107,
      107,  107,  107,  107,  107,  107,  107,  108,  107,  109,
      107,  102,  102,  102,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  108,  107,  107,
      110,  107,  102,  102,  107,  112,  113,  671,  114,  117,
      113,  115,  114,  119,  669,  115,  120,  233,  121,  122,
      119,  233,  234,  123,   57,  121,  234,   57,   57,  259,
      261,  671,  259,  262,   57,  331,  261,  353,  332,  262,
      116,  354,  378,  379,  116,   56,  124,   57,   56,   56,
       56,   56,   58,  125,  126,   56,   56,   56,  127,   56,

       56,   56,   56,  128,   56,   56,   56,   56,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       56,   56,   56,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   56,   56,  129,  130,  131,   57,  130,  130,  132,
      130,  133,   56,  134,  135,  130,  136,  130,  130,  130,
      130,  130,  137,  130,  138,  130,  130,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  130,
      130,  130,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      130,  130,  139,  141,  142,  593,  143,  144,   57,  145,
      246,  368,   57,  247,  246,  369,  141,  247,   57,  342,
      250,  593,  343,  251,  356,   57,  375,  250,  295,  376,
      251,  357,  254,  146,  255,  147,  296,  256,  254,  297,
      255,  358,  248,  256,  385,  386,  248,  299,  391,  394,
      386,  392,  252,  146,  404,  405,  148,  149,  142,  252,
      143,  150,  666,  145,  401,  295,  257,  402,  300,  669,
      141,  301,  257,  296,  295,  295,  297,  300,  674,  445,
      301,  674,  296,  296,  299,  297,  297,  146,  420,  147,
      295,  421,  446,  299,  299,  295,  674,  428,  296,  674,

      429,  297,  445,  296,  302,  298,  297,  146,  674,  299,
      148,  152,  308,  153,  299,  446,  154,  155,  156,  434,
      435,  157,  668,  298,  302,  306,  303,  439,  440,  158,
      315,  454,  455,  486,  450,  304,  305,  577,  296,  307,
      457,  297,  451,  298,  159,  452,  160,  317,  448,  318,
      310,  311,  312,  458,  313,  331,  314,  674,  332,  342,
      674,  674,  343,  667,  674,  161,  162,  152,  674,  153,
      466,  674,  154,  155,  156,  315,  467,  157,  300,  378,
      379,  301,  487,  296,  316,  158,  297,  674,  316,  666,
      674,  664,  317,  674,  318,  316,  674,  351,  445,  470,

      159,  352,  160,  321,  316,  320,  322,  296,  316,  512,
      331,  446,  372,  332,  316,  316,  331,  663,  299,  332,
      316,  161,  162,  164,  342,  165,  662,  343,  166,  167,
      168,  385,  386,  661,  323,  342,  324,  333,  343,  169,
      316,  375,  375,  333,  376,  376,  391,  391,  353,  392,
      392,  344,  354,  466,  394,  386,  170,  333,  171,  467,
      466,  368,  344,  333,  401,  369,  467,  402,  377,  377,
      445,  344,  401,  393,  393,  402,  659,  172,  173,  164,
      356,  165,  344,  446,  166,  167,  168,  357,  377,  377,
      466,  403,  658,  393,  393,  169,  467,  358,  469,  403,

      411,  412,  412,  413,  404,  405,  411,  413,  413,  413,
      375,  403,  170,  376,  171,  414,  414,  538,  435,  403,
      415,  414,  414,  655,  420,  420,  428,  421,  421,  429,
      540,  440,  414,  172,  173,  175,  428,  176,  414,  429,
      177,  178,  179,  454,  455,  180,  295,  295,  295,  457,
      646,  423,  423,  430,  296,  296,  296,  297,  297,  297,
      630,  391,  458,  430,  392,  299,  299,  299,  181,  295,
      182,  423,  423,  430,  538,  435,  295,  296,  308,  300,
      297,  595,  301,  430,  296,  566,  445,  297,  299,  183,
      184,  175,  295,  176,  295,  299,  177,  178,  179,  446,

      296,  180,  296,  297,  401,  297,  457,  402,  529,  529,
      529,  299,  420,  299,  445,  421,  310,  311,  312,  458,
      313,  315,  314,  474,  181,  428,  182,  446,  429,  296,
      475,  450,  297,  450,  567,  545,  476,  466,  317,  451,
      318,  451,  452,  467,  452,  183,  184,   56,   56,   57,
       56,   56,   56,   56,   58,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,   56,   56,   56,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,   56,   56,  185,   56,  186,   57,   56,
      187,   56,   56,  188,  189,  189,   56,   56,  189,   56,
       56,   56,   56,   56,  190,   56,   56,   56,   56,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,   56,   56,   56,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,   56,   56,  191,   56,  192,  193,  457,  195,
      196,  295,  197,  383,  470,  295,  540,  440,  618,  296,
      295,  458,  297,  296,  315,  612,  297,   56,  296,  315,
      299,  297,  296,  299,  299,  297,  198,  296,  199,  299,

      297,  317,  568,  318,  445,  566,  317,  552,  318,  466,
      620,  620,  620,  445,  547,  467,  198,  446,  445,  200,
       56,  201,  193,  477,  195,  196,  446,  197,  315,  478,
      546,  446,  543,  315,  481,  480,  296,  466,  315,  297,
      554,  296,   56,  467,  297,  317,  296,  318,  315,  297,
      317,  198,  318,  199,  567,  317,  296,  318,  619,  297,
      619,  599,  620,  620,  620,  317,  466,  318,  621,  482,
      597,  198,  467,  457,  200,  203,  204,  315,  205,  206,
      596,  207,  602,  483,  484,  296,  458,  315,  297,  595,
      300,  315,  295,  301,  317,  296,  318,  594,  297,  296,

      296,  315,  297,  297,  317,  208,  318,  209,  317,  296,
      318,  299,  297,  653,  653,  466,  466,  590,  317,  588,
      318,  467,  467,  315,  445,  208,  446,  446,  210,  211,
      204,  296,  205,  206,  297,  207,  558,  446,  531,  489,
      317,  531,  318,  587,  296,  488,  586,  297,  411,  412,
      412,  413,  622,  521,  521,  299,  584,  672,  315,  208,
      518,  209,  295,  414,  530,  490,  296,  583,  383,  297,
      296,  581,  580,  297,  579,  317,  639,  318,  578,  208,
      530,  299,  210,  212,  213,  214,  212,  215,  216,  212,
      217,  218,  212,  212,  212,  212,  212,  212,  219,  220,

      220,  221,  212,  222,  212,  212,  223,  223,  223,  224,
      223,  223,  223,  223,  225,  226,  227,  223,  228,  229,
      212,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  225,  223,  223,  230,  223,  231,
      212,  223,  235,  235,  236,  235,  237,  235,  235,  238,
      239,  240,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  241,  241,  241,  241,  241,
      241,  241,  241,  242,  241,  243,  241,  239,  235,  240,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  242,  241,  241,  244,  241,  239,  240,

      241,  263,  264,  265,  263,  263,  263,  263,  266,  263,
      263,  263,  263,  263,  263,  267,  263,  263,  263,  263,
      263,  263,  263,  263,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  263,  263,  263,  268,
      268,  268,  268,  268,  268,  268,  269,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  263,  263,  268,
      270,  271,  272,  270,  270,  270,  270,  273,  274,  275,
      276,  270,  277,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  270,  279,  270,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  270,  270,  278,  280,
      281,  282,  280,  280,  280,  280,  283,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  280,  280,  280,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  280,  280,  284,  315,  315,
      295,  300,  576,  575,  301,  574,  296,  296,  296,  297,
      297,  297,  568,  471,  315,  317,  317,  318,  318,  299,

      552,  466,  296,  466,  550,  297,  295,  467,  319,  467,
      466,  317,  295,  318,  296,  466,  467,  297,  549,  547,
      296,  467,  456,  297,  546,  299,  559,  491,  319,  325,
      325,  299,  325,  640,  449,  325,  673,  325,  325,  325,
      325,  325,  325,  492,  336,  336,  336,  325,  325,  654,
      325,  325,  411,  413,  413,  413,  543,  557,  444,  556,
      665,  315,  315,  295,  325,  325,  325,  414,  414,  296,
      296,  296,  297,  297,  297,  542,  541,  539,  317,  317,
      318,  318,  299,  537,  414,  325,  325,  336,  325,  325,
      426,  325,  425,  536,  325,  535,  325,  325,  325,  325,

      325,  325,  534,  336,  336,  336,  325,  325,  558,  325,
      325,  560,  410,  570,  407,  561,  296,  533,  571,  297,
      605,  416,  623,  325,  325,  325,  296,  299,  296,  297,
      296,  297,  528,  297,  527,  317,  526,  318,  406,  299,
      400,  299,  398,  525,  325,  325,  336,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  508,  508,  508,  507,  507,  507,  507,  507,
      508,  509,  509,  508,  509,  508,  508,  509,  509,  509,
      508,  508,  507,  507,  507,  509,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  315,  315,  508,  523,  521,  315,  520,
      390,  296,  296,  387,  297,  297,  296,  519,  315,  297,
      317,  317,  318,  318,  466,  317,  296,  318,  315,  297,
      467,  518,  315,  516,  383,  317,  296,  318,  466,  297,
      296,  562,  315,  297,  467,  317,  563,  318,  382,  317,
      296,  318,  374,  297,  371,  513,  564,  510,  660,  317,
      609,  318,  529,  529,  529,  506,  365,  565,  296,  364,
      362,  297,  591,  360,  670,  569,  592,  317,  572,  318,
      360,  355,  355,  349,  504,  503,  340,  337,  502,  591,
      573,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  508,  508,  508,  507,
      507,  507,  507,  507,  508,  509,  509,  508,  509,  508,
      508,  509,  509,  509,  508,  508,  507,  507,  507,  509,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  295,  295,  508,
      499,  498,  295,  315,  497,  296,  296,  315,  297,  297,
      296,  296,  329,  297,  297,  296,  299,  299,  297,  326,
      317,  299,  318,  315,  317,  496,  318,  315,  493,  292,
      288,  296,  471,  465,  297,  296,  603,  315,  297,  461,
      317,  287,  318,  285,  317,  296,  318,  456,  297,  604,

      607,  315,  606,  449,  317,  571,  318,  444,  608,  296,
      442,  441,  297,  296,  437,  432,  297,  426,  317,  610,
      318,  615,  317,  624,  318,  611,  613,  425,  315,  296,
      424,  296,  297,  422,  297,  605,  296,  419,  317,  297,
      318,  416,  299,  296,  410,  317,  297,  318,  295,  315,
      409,  407,  614,  315,  299,  406,  296,  296,  400,  297,
      297,  296,  398,  609,  297,  396,  317,  299,  318,  390,
      317,  296,  318,  628,  297,  620,  620,  620,  616,  389,
      317,  296,  318,  387,  297,  383,  315,  382,  626,  592,
      317,  631,  318,  373,  296,  374,  373,  297,  632,  296,

      625,  371,  297,  317,  627,  318,  296,  365,  317,  297,
      318,  615,  315,  634,  364,  317,  362,  318,  360,  296,
      296,  635,  297,  297,  635,  359,  623,  624,  317,  317,
      318,  318,  637,  642,  296,  296,  629,  297,  297,  643,
      644,  296,  355,  349,  297,  299,  299,  296,  296,  347,
      297,  297,  299,  346,  628,  340,  317,  317,  318,  318,
      339,  315,  296,  337,  633,  297,  641,  335,  631,  296,
      334,  317,  297,  318,  329,  632,  296,  328,  317,  297,
      318,  326,  648,  296,  294,  317,  297,  318,  292,  288,
      296,  287,  317,  297,  318,  634,  634,  285,  674,  317,

      674,  318,  674,  635,  635,  674,  635,  635,  647,  649,
      642,  674,  674,  645,  637,  637,  643,  650,  296,  674,
      650,  297,  674,  644,  296,  674,  674,  297,  652,  299,
      657,  296,  674,  317,  297,  318,  674,  674,  296,  674,
      317,  297,  318,  648,  649,  674,  674,  317,  674,  318,
      649,  296,  650,  674,  297,  650,  656,  657,  650,  674,
      317,  650,  318,  652,  674,  296,  674,  674,  297,  652,
      674,  674,  674,  674,  317,  674,  318,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  286,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  286,  286,  286,
      674,  286,  289,  289,  674,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  293,  293,
      293,  674,  293,  298,  674,  674,  674,  674,  298,  674,
      298,  674,  298,  298,  298,  298,  674,  298,  309,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  309,  309,
      309,  674,  309,  316,  674,  674,  674,  674,  316,  674,
      316,  316,  316,  316,  316,  316,  674,  316,  325,  325,

      674,  674,  674,  325,  325,  674,  325,  325,  674,  674,
      674,  674,  325,  325,  327,  327,  674,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      330,  674,  674,  330,  330,  330,  674,  330,  338,  338,
      674,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  341,  674,  674,  341,  341,  341,
      674,  341,  345,  674,  674,  674,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  674,  345,  348,  348,
      674,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  350,  350,  674,  350,  674,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      361,  674,  674,  361,  361,  361,  674,  361,  363,  363,
      674,  363,  674,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  366,  674,  674,  366,  366,  366,
      674,  366,  367,  674,  674,  674,  674,  367,  367,  674,
      367,  367,  367,  367,  367,  367,  367,  367,  370,  674,
      674,  370,  674,  674,  674,  674,  674,  674,  370,  370,
      370,  674,  370,  372,  372,  674,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  380,
      380,  674,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  381,  674,  674,  381,  381,
      381,  674,  381,  384,  384,  674,  674,  384,  384,  384,
      674,  384,  388,  388,  674,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  395,  674,
      674,  674,  674,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  397,  674,  674,  674,  674,  674,
      674,  397,  397,  397,  674,  397,  399,  399,  674,  399,
      674,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  408,  408,  674,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  417,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  417,  417,
      417,  674,  417,  418,  674,  674,  418,  418,  418,  674,
      418,  427,  674,  674,  427,  427,  427,  674,  427,  431,
      431,  674,  674,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  674,  431,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  436,  436,  674,  674,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  674,  436,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  443,  443,  674,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  447,
      674,  674,  674,  674,  674,  447,  447,  674,  674,  447,
      447,  447,  674,  447,  453,  674,  674,  674,  674,  453,
      674,  453,  674,  674,  453,  453,  453,  674,  453,  459,
      674,  674,  674,  674,  674,  459,  459,  674,  674,  459,
      459,  459,  674,  459,  286,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  286,  286,  286,  674,  286,  460,
      674,  674,  674,  674,  460,  674,  460,  674,  460,  460,
      460,  460,  674,  460,  462,  462,  674,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      463,  463,  674,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  464,  464,  464,  464,
      674,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  468,  674,  468,  468,  674,  674,  468,  468,
      468,  674,  468,  472,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  472,  472,  472,  674,  472,  298,  674,
      674,  674,  674,  298,  674,  298,  674,  298,  298,  298,
      298,  674,  298,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  674,  473,  473,  473,  473,  473,  309,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  309,

      309,  309,  674,  309,  479,  674,  674,  674,  674,  479,
      674,  479,  479,  479,  479,  479,  479,  674,  479,  316,
      674,  674,  674,  674,  316,  674,  316,  316,  316,  316,
      316,  316,  674,  316,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  674,  485,  485,  485,  485,  485,
      325,  325,  674,  674,  674,  325,  325,  674,  325,  325,
      674,  674,  674,  674,  325,  325,  494,  494,  674,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  495,  495,  495,  495,  674,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  330,  674,

      674,  330,  330,  330,  674,  330,  500,  500,  674,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  501,  501,  501,  501,  674,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  341,  674,
      674,  341,  341,  341,  674,  341,  345,  674,  674,  674,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      674,  345,  350,  350,  674,  350,  674,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  361,  674,
      674,  361,  361,  361,  674,  361,  505,  505,  674,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  366,  674,  674,  366,  366,  366,  674,  366,
      367,  674,  674,  674,  674,  367,  367,  674,  367,  367,
      367,  367,  367,  367,  367,  367,  370,  674,  674,  370,
      674,  674,  674,  674,  674,  674,  370,  370,  370,  674,
      370,  372,  372,  674,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  514,  514,  674,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  381,
      674,  674,  381,  381,  381,  674,  381,  515,  515,  515,

      674,  515,  384,  384,  674,  674,  384,  384,  384,  674,
      384,  517,  517,  674,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  395,  674,  674,
      674,  674,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  522,  674,  674,  674,  674,  674,  674,
      522,  674,  674,  522,  522,  522,  674,  522,  524,  524,
      674,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  408,  408,  674,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      417,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      417,  417,  417,  674,  417,  532,  674,  674,  532,  532,
      532,  674,  532,  418,  674,  674,  418,  418,  418,  674,
      418,  427,  674,  674,  427,  427,  427,  674,  427,  431,
      431,  674,  674,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  674,  431,  436,  436,  674,  674,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  674,
      436,  544,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  544,  544,  544,  674,  544,  447,  674,  674,  674,
      674,  674,  447,  447,  674,  674,  447,  447,  447,  674,
      447,  453,  674,  674,  674,  674,  453,  674,  453,  674,

      674,  453,  453,  453,  674,  453,  548,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  548,  548,  548,  674,
      548,  459,  674,  674,  674,  674,  674,  459,  459,  674,
      674,  459,  459,  459,  674,  459,  460,  674,  674,  674,
      674,  460,  674,  460,  674,  460,  460,  460,  460,  674,
      460,  462,  462,  674,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  463,  463,  674,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  553,

      553,  553,  674,  553,  468,  674,  468,  468,  674,  674,
      468,  468,  468,  674,  468,  472,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  472,  472,  472,  674,  472,
      555,  674,  674,  674,  674,  555,  674,  555,  674,  555,
      555,  555,  555,  674,  555,  298,  674,  674,  674,  674,
      298,  674,  298,  674,  298,  298,  298,  298,  674,  298,
      479,  674,  674,  674,  674,  479,  674,  479,  479,  479,
      479,  479,  479,  674,  479,  316,  674,  674,  674,  674,
      316,  674,  316,  316,  316,  316,  316,  316,  674,  316,
      494,  494,  674,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  330,  330,  674,  674,
      330,  330,  330,  674,  330,  500,  500,  674,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  505,  505,  674,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  372,  372,  674,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  514,  514,  674,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  582,
      582,  674,  674,  582,  582,  582,  674,  582,  517,  517,
      674,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  585,  585,  585,  585,  674,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      522,  674,  674,  674,  674,  674,  674,  522,  674,  674,
      522,  522,  522,  674,  522,  524,  524,  674,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  589,  589,  674,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  531,  674,  674,
      531,  674,  531,  532,  674,  674,  532,  532,  532,  674,
      532,  418,  674,  674,  418,  418,  418,  674,  418,  598,
      674,  674,  674,  674,  674,  598,  598,  674,  674,  598,

      598,  598,  674,  598,  600,  674,  674,  674,  674,  674,
      600,  600,  674,  674,  600,  600,  600,  674,  600,  601,
      674,  601,  601,  674,  674,  601,  601,  601,  674,  601,
      617,  617,  617,  674,  617,  636,  674,  674,  674,  674,
      636,  674,  636,  674,  636,  636,  636,  636,  674,  636,
      638,  638,  638,  674,  638,  651,  674,  674,  674,  674,
      651,  674,  651,  674,  651,  651,  651,  651,  674,  651,
       55,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674
    } ;

static const flex_int16_t yy_chk[4131] =
    {   0,
        0,  119,    1,    2,   63,  119,   63,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    9,    9,  671,    9,   10,
       10,    9,   10,   11,  669,   10,   11,   35,   11,   12,
       12,   36,   35,   12,   45,   12,   36,   46,   47,   45,
       47,  667,   46,   47,   48,   96,   48,  122,   96,   48,
        9,  122,  149,  149,   10,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   17,   17,  531,   17,   17,   39,   17,
       39,  142,   40,   39,   40,  142,   17,   40,   41,  108,
       41,  531,  108,   41,  124,   42,  146,   42,   69,  146,
       42,  124,   43,   17,   43,   17,   69,   43,   44,   69,
       44,  124,   39,   44,  192,  192,   40,   69,  198,  201,
      201,  198,   41,   17,  211,  211,   17,   18,   18,   42,
       18,   18,  666,   18,  208,   70,   43,  208,   70,  664,
       18,   70,   44,   70,   71,   72,   70,   71,   75,  268,
       71,   75,   71,   72,   70,   71,   72,   18,  225,   18,
       73,  225,  268,   71,   72,   74,   76,  242,   73,   76,

      242,   73,  269,   74,   71,   75,   74,   18,  498,   73,
       18,   19,   78,   19,   74,  269,   19,   19,   19,  248,
      248,   19,  663,   76,   71,   75,   72,  252,  252,   19,
       79,  279,  279,  318,  278,   73,   74,  498,   79,   76,
      284,   79,  278,   76,   19,  278,   19,   79,  269,   79,
       78,   78,   78,  284,   78,  333,   78,   82,  333,  344,
       82,   83,  344,  662,   83,   19,   19,   20,   84,   20,
      293,   84,   20,   20,   20,   80,  293,   20,   80,  378,
      378,   80,  318,   80,   82,   20,   80,   85,   83,  661,
       85,  659,   80,   86,   80,   84,   86,  351,  445,  296,

       20,  351,   20,   83,   82,   82,   84,  296,   83,  373,
       97,  445,  373,   97,   85,   84,  100,  658,  296,  100,
       86,   20,   20,   21,  109,   21,  656,  109,   21,   21,
       21,  385,  385,  655,   85,  110,   86,   97,  110,   21,
       86,  147,  148,  100,  147,  148,  199,  200,  353,  199,
      200,  109,  353,  294,  394,  394,   21,   97,   21,  294,
      468,  368,  110,  100,  209,  368,  468,  209,  147,  148,
      447,  109,  210,  199,  200,  210,  647,   21,   21,   22,
      356,   22,  110,  447,   22,   22,   22,  356,  147,  148,
      553,  209,  646,  199,  200,   22,  553,  356,  294,  210,

      219,  219,  219,  219,  404,  404,  220,  220,  220,  220,
      377,  209,   22,  377,   22,  219,  219,  434,  434,  210,
      219,  220,  220,  641,  227,  230,  243,  227,  230,  243,
      439,  439,  219,   22,   22,   23,  244,   23,  220,  244,
       23,   23,   23,  454,  454,   23,  286,  295,  298,  457,
      630,  227,  230,  243,  286,  295,  298,  286,  295,  298,
      612,  393,  457,  244,  393,  286,  295,  298,   23,  303,
       23,  227,  230,  243,  538,  538,  302,  303,  308,  302,
      303,  594,  302,  244,  302,  486,  448,  302,  303,   23,
       23,   24,  304,   24,  305,  302,   24,   24,   24,  448,

      304,   24,  305,  304,  403,  305,  459,  403,  411,  411,
      411,  304,  423,  305,  544,  423,  308,  308,  308,  459,
      308,  309,  308,  303,   24,  430,   24,  544,  430,  309,
      304,  450,  309,  453,  486,  448,  305,  601,  309,  450,
      309,  453,  450,  601,  453,   24,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   29,   29,   29,  548,   29,
       29,  460,   29,  582,  470,  306,  540,  540,  577,  460,
      307,  548,  460,  306,  310,  568,  306,   29,  307,  311,
      460,  307,  310,  470,  306,  310,   29,  311,   29,  307,

      311,  310,  567,  310,  598,  566,  311,  551,  311,  469,
      619,  619,  619,  545,  547,  469,   29,  598,  599,   29,
       30,   30,   30,  306,   30,   30,  545,   30,  312,  307,
      546,  599,  543,  313,  311,  310,  312,  554,  314,  312,
      469,  313,   30,  554,  313,  312,  314,  312,  315,  314,
      313,   30,  313,   30,  566,  314,  315,  314,  591,  315,
      591,  545,  591,  591,  591,  315,  673,  315,  599,  312,
      536,   30,  673,  600,   30,   31,   31,  316,   31,   31,
      535,   31,  554,  313,  314,  316,  600,  319,  316,  534,
      319,  320,  472,  319,  316,  319,  316,  533,  319,  320,

      472,  321,  320,  472,  319,   31,  319,   31,  320,  321,
      320,  472,  321,  639,  653,  602,  670,  528,  321,  526,
      321,  602,  670,  322,  621,   31,  639,  653,   31,   32,
       32,  322,   32,   32,  322,   32,  476,  621,  767,  321,
      322,  767,  322,  525,  476,  320,  523,  476,  412,  412,
      412,  412,  602,  522,  521,  476,  519,  670,  479,   32,
      518,   32,  555,  412,  412,  322,  479,  516,  515,  479,
      555,  513,  510,  555,  502,  479,  621,  479,  499,   32,
      412,  555,   32,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   81,  323,
      477,   81,  497,  496,   81,  493,   81,  323,  477,   81,
      323,  477,  487,  471,  324,   81,  323,   81,  323,  477,

      466,  622,  324,  672,  465,  324,  475,  622,   81,  672,
      640,  324,  474,  324,  475,  660,  640,  475,  461,  458,
      474,  660,  456,  474,  452,  475,  477,  323,   81,  101,
      101,  474,  101,  622,  449,  101,  672,  101,  101,  101,
      101,  101,  101,  324,  101,  101,  101,  101,  101,  640,
      101,  101,  413,  413,  413,  413,  446,  475,  444,  474,
      660,  480,  489,  478,  101,  101,  101,  413,  413,  480,
      489,  478,  480,  489,  478,  442,  441,  437,  480,  489,
      480,  489,  478,  432,  413,  101,  101,  101,  336,  336,
      429,  336,  428,  426,  336,  425,  336,  336,  336,  336,

      336,  336,  422,  336,  336,  336,  336,  336,  558,  336,
      336,  478,  421,  489,  420,  480,  558,  419,  490,  558,
      559,  416,  603,  336,  336,  336,  490,  558,  559,  490,
      603,  559,  410,  603,  409,  490,  407,  490,  406,  559,
      402,  603,  401,  400,  336,  336,  336,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  481,  482,  370,  398,  397,  483,  396,
      392,  481,  482,  391,  481,  482,  483,  390,  484,  483,
      481,  482,  481,  482,  654,  483,  484,  483,  488,  484,
      654,  389,  491,  387,  384,  484,  488,  484,  665,  488,
      491,  481,  492,  491,  665,  488,  482,  488,  382,  491,
      492,  491,  376,  492,  375,  374,  483,  371,  654,  492,
      563,  492,  529,  529,  529,  369,  365,  484,  563,  364,
      362,  563,  529,  360,  665,  488,  529,  563,  491,  563,
      358,  355,  354,  349,  347,  346,  343,  342,  340,  529,
      492,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  556,  557,  508,
      337,  335,  560,  561,  334,  556,  557,  562,  556,  557,
      560,  561,  332,  560,  561,  562,  556,  557,  562,  331,
      561,  560,  561,  564,  562,  329,  562,  565,  326,  301,
      300,  564,  297,  292,  564,  565,  556,  569,  565,  288,
      564,  287,  564,  285,  565,  569,  565,  281,  569,  557,

      561,  570,  560,  271,  569,  571,  569,  264,  562,  570,
      256,  255,  570,  571,  251,  246,  571,  238,  570,  564,
      570,  572,  571,  604,  571,  565,  569,  237,  573,  572,
      229,  604,  572,  226,  604,  605,  573,  224,  572,  573,
      572,  221,  604,  605,  217,  573,  605,  573,  606,  607,
      216,  215,  570,  608,  605,  213,  606,  607,  207,  606,
      607,  608,  205,  609,  608,  204,  607,  606,  607,  197,
      608,  609,  608,  610,  609,  620,  620,  620,  573,  196,
      609,  610,  609,  195,  610,  191,  611,  186,  607,  620,
      610,  613,  610,  150,  611,  145,  144,  611,  614,  613,

      606,  143,  613,  611,  608,  611,  614,  137,  613,  614,
      613,  615,  616,  617,  135,  614,  131,  614,  128,  615,
      616,  617,  615,  616,  617,  127,  623,  624,  615,  616,
      615,  616,  617,  625,  623,  624,  611,  623,  624,  626,
      627,  625,  123,  117,  625,  623,  624,  626,  627,  115,
      626,  627,  625,  114,  628,  106,  626,  627,  626,  627,
      105,  629,  628,  104,  616,  628,  623,   99,  631,  629,
       98,  628,  629,  628,   92,  632,  631,   91,  629,  631,
      629,   90,  633,  632,   68,  631,  632,  631,   64,   62,
      633,   61,  632,  633,  632,  634,  636,   60,   55,  633,

        0,  633,    0,  634,  636,    0,  634,  636,  631,  638,
      642,    0,    0,  629,  634,  636,  643,  638,  642,    0,
      638,  642,    0,  644,  643,    0,    0,  643,  638,  642,
      645,  644,    0,  643,  644,  643,    0,    0,  645,    0,
      644,  645,  644,  648,  649,    0,    0,  645,    0,  645,
      651,  648,  649,    0,  648,  649,  643,  657,  651,    0,
      648,  651,  648,  649,    0,  657,    0,    0,  657,  651,
        0,    0,    0,    0,  657,    0,  657,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,

      688,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  690,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  690,  690,  690,
        0,  690,  691,  691,    0,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  692,  692,
      692,    0,  692,  693,    0,    0,    0,    0,  693,    0,
      693,    0,  693,  693,  693,  693,    0,  693,  694,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  694,  694,
      694,    0,  694,  695,    0,    0,    0,    0,  695,    0,
      695,  695,  695,  695,  695,  695,    0,  695,  696,  696,

        0,    0,    0,  696,  696,    0,  696,  696,    0,    0,
        0,    0,  696,  696,  697,  697,    0,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      698,    0,    0,  698,  698,  698,    0,  698,  699,  699,
        0,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  700,    0,    0,  700,  700,  700,
        0,  700,  701,    0,    0,    0,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,    0,  701,  702,  702,
        0,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  703,  703,    0,  703,    0,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      704,    0,    0,  704,  704,  704,    0,  704,  705,  705,
        0,  705,    0,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  706,    0,    0,  706,  706,  706,
        0,  706,  707,    0,    0,    0,    0,  707,  707,    0,
      707,  707,  707,  707,  707,  707,  707,  707,  708,    0,
        0,  708,    0,    0,    0,    0,    0,    0,  708,  708,
      708,    0,  708,  709,  709,    0,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  710,
      710,    0,  710,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  711,    0,    0,  711,  711,
      711,    0,  711,  712,  712,    0,    0,  712,  712,  712,
        0,  712,  713,  713,    0,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  714,    0,
        0,    0,    0,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  715,    0,    0,    0,    0,    0,
        0,  715,  715,  715,    0,  715,  716,  716,    0,  716,
        0,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  717,  717,    0,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  718,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  718,  718,
      718,    0,  718,  719,    0,    0,  719,  719,  719,    0,
      719,  720,    0,    0,  720,  720,  720,    0,  720,  721,
      721,    0,    0,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,    0,  721,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  723,  723,    0,    0,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,    0,  723,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  725,  725,    0,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  726,
        0,    0,    0,    0,    0,  726,  726,    0,    0,  726,
      726,  726,    0,  726,  727,    0,    0,    0,    0,  727,
        0,  727,    0,    0,  727,  727,  727,    0,  727,  728,
        0,    0,    0,    0,    0,  728,  728,    0,    0,  728,
      728,  728,    0,  728,  729,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  729,  729,  729,    0,  729,  730,
        0,    0,    0,    0,  730,    0,  730,    0,  730,  730,
      730,  730,    0,  730,  731,  731,    0,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      732,  732,    0,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,
        0,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  734,    0,  734,  734,    0,    0,  734,  734,
      734,    0,  734,  735,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  735,  735,  735,    0,  735,  736,    0,
        0,    0,    0,  736,    0,  736,    0,  736,  736,  736,
      736,    0,  736,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,    0,  737,  737,  737,  737,  737,  738,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  738,

      738,  738,    0,  738,  739,    0,    0,    0,    0,  739,
        0,  739,  739,  739,  739,  739,  739,    0,  739,  740,
        0,    0,    0,    0,  740,    0,  740,  740,  740,  740,
      740,  740,    0,  740,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,    0,  741,  741,  741,  741,  741,
      742,  742,    0,    0,    0,  742,  742,    0,  742,  742,
        0,    0,    0,    0,  742,  742,  743,  743,    0,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  744,  744,  744,  744,    0,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  745,    0,

        0,  745,  745,  745,    0,  745,  746,  746,    0,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  747,  747,  747,  747,    0,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  748,    0,
        0,  748,  748,  748,    0,  748,  749,    0,    0,    0,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
        0,  749,  750,  750,    0,  750,    0,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  751,    0,
        0,  751,  751,  751,    0,  751,  752,  752,    0,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  753,    0,    0,  753,  753,  753,    0,  753,
      754,    0,    0,    0,    0,  754,  754,    0,  754,  754,
      754,  754,  754,  754,  754,  754,  755,    0,    0,  755,
        0,    0,    0,    0,    0,    0,  755,  755,  755,    0,
      755,  756,  756,    0,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  758,  758,    0,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  759,
        0,    0,  759,  759,  759,    0,  759,  760,  760,  760,

        0,  760,  761,  761,    0,    0,  761,  761,  761,    0,
      761,  762,  762,    0,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  763,    0,    0,
        0,    0,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  764,    0,    0,    0,    0,    0,    0,
      764,    0,    0,  764,  764,  764,    0,  764,  765,  765,
        0,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  766,  766,    0,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      768,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      768,  768,  768,    0,  768,  769,    0,    0,  769,  769,
      769,    0,  769,  770,    0,    0,  770,  770,  770,    0,
      770,  771,    0,    0,  771,  771,  771,    0,  771,  772,
      772,    0,    0,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,    0,  772,  773,  773,    0,    0,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,    0,
      773,  774,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  774,  774,  774,    0,  774,  775,    0,    0,    0,
        0,    0,  775,  775,    0,    0,  775,  775,  775,    0,
      775,  776,    0,    0,    0,    0,  776,    0,  776,    0,

        0,  776,  776,  776,    0,  776,  777,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  777,  777,  777,    0,
      777,  778,    0,    0,    0,    0,    0,  778,  778,    0,
        0,  778,  778,  778,    0,  778,  779,    0,    0,    0,
        0,  779,    0,  779,    0,  779,  779,  779,  779,    0,
      779,  780,  780,    0,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  781,  781,    0,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  783,

      783,  783,    0,  783,  784,    0,  784,  784,    0,    0,
      784,  784,  784,    0,  784,  785,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  785,  785,  785,    0,  785,
      786,    0,    0,    0,    0,  786,    0,  786,    0,  786,
      786,  786,  786,    0,  786,  787,    0,    0,    0,    0,
      787,    0,  787,    0,  787,  787,  787,  787,    0,  787,
      788,    0,    0,    0,    0,  788,    0,  788,  788,  788,
      788,  788,  788,    0,  788,  789,    0,    0,    0,    0,
      789,    0,  789,  789,  789,  789,  789,  789,    0,  789,
      790,  790,    0,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  791,  791,    0,    0,
      791,  791,  791,    0,  791,  792,  792,    0,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  793,  793,    0,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  794,  794,    0,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  795,  795,    0,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  796,
      796,    0,    0,  796,  796,  796,    0,  796,  797,  797,
        0,  797,  797,  797,  797,  797,  797,  797,  797,  797,

      797,  797,  797,  797,  798,  798,  798,  798,    0,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      799,    0,    0,    0,    0,    0,    0,  799,    0,    0,
      799,  799,  799,    0,  799,  800,  800,    0,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  801,  801,    0,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,    0,    0,
      802,    0,  802,  803,    0,    0,  803,  803,  803,    0,
      803,  804,    0,    0,  804,  804,  804,    0,  804,  805,
        0,    0,    0,    0,    0,  805,  805,    0,    0,  805,

      805,  805,    0,  805,  806,    0,    0,    0,    0,    0,
      806,  806,    0,    0,  806,  806,  806,    0,  806,  807,
        0,  807,  807,    0,    0,  807,  807,  807,    0,  807,
      808,  808,  808,    0,  808,  809,    0,    0,    0,    0,
      809,    0,  809,    0,  809,  809,  809,  809,    0,  809,
      810,  810,  810,    0,  810,  811,    0,    0,    0,    0,
      811,    0,  811,    0,  811,  811,  811,  811,    0,  811,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/vsc/github/doxygen/src/pyscanner.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2021 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */

#line 35 "/home/vsc/github/doxygen/src/pyscanner.l"

/*
 *      includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "arguments.h"
#include "markdown.h"
#include "fileinfo.h"
#include "debug.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

#define unput_string(yytext,yyleng) do { for (int i=(int)yyleng-1;i>=0;i--) unput(yytext[i]); } while(0)

/* ----------------------------------------------------------------- */

struct pyscannerYY_state
{
  CommentScanner          commentScanner;
  OutlineParserInterface *thisParser = 0;
  const char *            inputString = 0;
  int                     inputPosition = 0;
  Protection              protection = Protection::Public;
  std::shared_ptr<Entry>  current_root;
  std::shared_ptr<Entry>  current;
  std::shared_ptr<Entry>  previous;
  std::shared_ptr<Entry>  bodyEntry;
  int                     yyLineNr = 1 ;
  QCString                fileName;
  MethodTypes             mtype = MethodTypes::Method;
  bool                    isStatic = FALSE;
  Specifier               virt = Specifier::Normal;
  int                     docBlockContext = 0;
  QCString                docBlock;
  bool                    docBlockInBody = FALSE;
  bool                    docBlockJavaStyle = FALSE;
  bool                    docBrief = FALSE;
  bool                    docBlockSpecial = FALSE;
  bool                    doubleQuote = FALSE;
  bool                    specialBlock = FALSE;
  int                     stringContext = 0;
  TextStream *            copyString = 0;
  int                     indent = 0;
  int                     curIndent = 0;
  int                     commentIndent = 0;
  bool                    importTuple = FALSE;
  StringUnorderedMap      packageNameCache;
  char                    atomStart = 0;
  char                    atomEnd = 0;
  int                     atomCount = 0;
  QCString                moduleScope;
  QCString                packageName;
  TextStream              defVal;
  int                     braceCount = 0;
  bool                    lexInit = FALSE;
  bool                    packageCommentAllowed = FALSE;
  bool                    startInit = FALSE;
  int                     searchCount = 0;
  QCString                argType;
  bool                    funcParamsEnd = FALSE;
  std::vector<QCString>   decorators;
  QCString                programStr;
};

//-----------------------------------------------------------------------------
#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

static inline int computeIndent(const char *s);

static void initParser(yyscan_t yyscanner);
static void initEntry(yyscan_t yyscanner);
static void newEntry(yyscan_t yyscanner);
static void addEntry(yyscan_t yyscanner);
static void docVariable(yyscan_t yyscanner,const char *name);
static void newVariable(yyscan_t yyscanner);
static void addVariable(yyscan_t yyscanner);
static void newFunction(yyscan_t yyscanner);
static QCString findPackageScopeFromPath(yyscan_t yyscanner,const QCString &path);
static void addFrom(yyscan_t yyscanner,bool all);
static void lineCount(yyscan_t yyscanner);
static void incLineNr(yyscan_t yyscanner);
static void startCommentBlock(yyscan_t yyscanner,bool brief);
static void handleCommentBlock(yyscan_t yyscanner,const QCString &doc,bool brief);
static void endOfDef(yyscan_t yyscanner,int correction=0);
static inline void addToString(yyscan_t yyscanner,const char *s);
static void initTriDoubleQuoteBlock(yyscan_t yyscanner);
static void initTriSingleQuoteBlock(yyscan_t yyscanner);
static void initSpecialBlock(yyscan_t yyscanner);
static void searchFoundDef(yyscan_t yyscanner);
static void searchFoundClass(yyscan_t yyscanner);
static QCString findPackageScope(yyscan_t yyscanner,const QCString &fileName);

static int yyread(yyscan_t yyscanner,char *buf,int max_size);

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 2117 "/home/vsc/github/doxygen/Debug/generated_src/pyscanner_intermediate.cpp"
#line 163 "/home/vsc/github/doxygen/src/pyscanner.l"
       /* start command character */
  /* Main start state */



  /* Mid-comment states */
  /* %x FuncDoubleComment */
  /* %x ClassDoubleComment */


  /* Function states */






  /* Class states */




  /* Variable states */



  /* String states */





  /* import */



#line 2155 "/home/vsc/github/doxygen/Debug/generated_src/pyscanner_intermediate.cpp"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define SearchSkipValue 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionAnnotation 9
#define FunctionTypeAnnotation 10
#define FunctionParamDefVal 11
#define ClassDec 12
#define ClassInheritance 13
#define ClassCaptureIndent 14
#define ClassBody 15
#define VariableDec 16
#define VariableEnd 17
#define VariableAtom 18
#define SingleQuoteString 19
#define DoubleQuoteString 20
#define TripleString 21
#define SingleQuoteStringIgnore 22
#define DoubleQuoteStringIgnore 23
#define FromMod 24
#define FromModItem 25
#define Import 26

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct pyscannerYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 260 "/home/vsc/github/doxygen/src/pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 2464 "/home/vsc/github/doxygen/Debug/generated_src/pyscanner_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 675 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 674 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 266 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a function/method definition with indent
                          DBG_CTX((stderr,"Found def at %d\n",yyextra->yyLineNr));
                          yyextra->indent=computeIndent(yytext);
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 272 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of an async function/method definition with indent
                          DBG_CTX((stderr,"Found async def at %d\n",yyextra->yyLineNr));
                          yyextra->indent=computeIndent(yytext);
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 278 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a function/method definition
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 282 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a function/method definition
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 287 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a class definition with indent
                          DBG_CTX((stderr,"Found class at %d\n",yyextra->yyLineNr));
                          yyextra->indent=computeIndent(yytext);
                          searchFoundClass(yyscanner);
                          BEGIN( ClassDec ) ;
                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 293 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a class definition
                          searchFoundClass(yyscanner);
                          BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 7:
#line 298 "/home/vsc/github/doxygen/src/pyscanner.l"
case 8:
YY_RULE_SETUP
#line 298 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of an from import
                          yyextra->packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 9:
#line 304 "/home/vsc/github/doxygen/src/pyscanner.l"
case 10:
YY_RULE_SETUP
#line 304 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of an import statement
                          yyextra->packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 308 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // property
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->mtype     = MethodTypes::Property;
                        yyextra->current->name      = QCString(yytext).stripWhiteSpace();
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN(VariableDec);
                      }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 318 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // variable
                        if (yyextra->searchCount>0) REJECT;
                        yyextra->indent=computeIndent(yytext);
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->name      = QCString(yytext).stripWhiteSpace();
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN(VariableDec);
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 329 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // variable
                        if (yyextra->searchCount>0) REJECT;
                        QCString id = QCString(yytext).stripWhiteSpace();
                        if (id =="try" || id == "else" || id == "except" || id == "finally") REJECT;
                        yyextra->indent=computeIndent(yytext);
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->name      = id;
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN(VariableDec);
                      }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 342 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // list of variables, we cannot place the default value
                                                               // so we will skip it later on in a general rule
                                                               // Also note ")" this is to catch also (a,b). the "("
                                                               // is caught in the rule: [(], the ")" will be handled in [)]
                        if (yyextra->searchCount>1) REJECT;
                        yyextra->indent=computeIndent(yytext);
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->name      = QCString(yytext).stripWhiteSpace();
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        addVariable(yyscanner);
                      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 356 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 362 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 368 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->isStatic=TRUE;
                      }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 371 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // decorator
                        lineCount(yyscanner);
                      }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 374 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // Unix type script comment
                        if (yyextra->yyLineNr != 1) REJECT;
                      }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 377 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal comment
                        // issue 9672
                        //yyextra->packageCommentAllowed = FALSE;
                      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 381 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // some other identifier
                        yyextra->packageCommentAllowed = FALSE;
                      }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 384 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->curIndent=computeIndent(yytext);
                      }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 388 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // new line
                        lineCount(yyscanner);
                      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 392 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 397 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 402 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment
                        yyextra->curIndent=computeIndent(yytext);
                        yyextra->packageCommentAllowed = FALSE;
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 408 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // we have to do something with (
                        yyextra->searchCount++;
                      }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 411 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // we have to do something with )
                        if (yyextra->searchCount>0)
                        {
                          yyextra->searchCount--;
                        }
                      }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 417 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->doc.resize(0);
                        yyextra->current->brief.resize(0);
                      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 421 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                      }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 423 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 32:
YY_RULE_SETUP
#line 431 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // python3 style imports
                      }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 433 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // from package import
                        yyextra->packageName=yytext;
                      }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 436 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        BEGIN(FromModItem);
                      }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 439 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        incLineNr(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 443 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 445 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        unput(*yytext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 38:
YY_RULE_SETUP
#line 452 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // import all
                  addFrom(yyscanner,TRUE);
                  BEGIN(Search);
                }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 456 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 459 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 462 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                  if (!yyextra->importTuple)
                  {
                    BEGIN(Search);
                  }
                }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 469 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  incLineNr(yyscanner);
                  if (!yyextra->importTuple)
                  {
                    BEGIN(Search);
                  }
                }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 476 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 478 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  yyextra->importTuple=TRUE;
                }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 481 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  yyextra->importTuple=FALSE;
                  BEGIN(Search);
                }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 485 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 487 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // line continuation
                  incLineNr(yyscanner);
                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 490 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  unput(*yytext);
                  BEGIN(Search);
                }
	YY_BREAK


case 49:
YY_RULE_SETUP
#line 497 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->name=removeRedundantWhiteSpace(substitute(yytext,".","::"));
                        yyextra->current->fileName = yyextra->fileName;
                        //printf("Adding using declaration: found:%s:%d name=%s\n",qPrint(yyextra->fileName),yyextra->yyLineNr,qPrint(yyextra->current->name));
                        yyextra->current->section=Entry::USINGDECL_SEC;
                        yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
                        initEntry(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 506 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  incLineNr(yyscanner);
                  BEGIN(Search);
                }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 510 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 512 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                  unput(*yytext);
                  BEGIN(Search);
                }
	YY_BREAK


case 53:
YY_RULE_SETUP
#line 519 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n",&yytext[5],qPrint(yyextra->current_root->name.data(),yyextra->yyLineNr)));
                        docVariable(yyscanner,&yytext[5]);
                        addEntry(yyscanner);
                      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 524 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n",&yytext[5],qPrint(yyextra->current_root->name.data(),yyextra->yyLineNr)));
                        docVariable(yyscanner,&yytext[5]);
                        newEntry(yyscanner);
                      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 529 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        DBG_CTX((stderr,"Found class method variable %s in %s at %d\n",&yytext[4],qPrint(yyextra->current_root->name),yyextra->yyLineNr));
                        docVariable(yyscanner,&yytext[4]);
                        addEntry(yyscanner);
                      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 534 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        DBG_CTX((stderr,"Found class method variable %s in %s at %d\n",&yytext[4],qPrint(yyextra->current_root->name),yyextra->yyLineNr));
                        docVariable(yyscanner,&yytext[4]);
                        newEntry(yyscanner);
                      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 539 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 544 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 549 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 553 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // #
                      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 555 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 560 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 565 "/home/vsc/github/doxygen/src/pyscanner.l"
{ incLineNr(yyscanner); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 566 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->doc.resize(0);
                        yyextra->current->brief.resize(0);
                        BEGIN( SearchSkipValue  );
                      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 571 "/home/vsc/github/doxygen/src/pyscanner.l"
// identifiers
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 572 "/home/vsc/github/doxygen/src/pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 573 "/home/vsc/github/doxygen/src/pyscanner.l"
// anything else
	YY_BREAK


case 68:
YY_RULE_SETUP
#line 577 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 582 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 70:
/* rule 70 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 586 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 590 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // #
                      }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 592 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 597 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 602 "/home/vsc/github/doxygen/src/pyscanner.l"
{ incLineNr(yyscanner);
                        BEGIN(SearchMemVars);
                      }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 605 "/home/vsc/github/doxygen/src/pyscanner.l"
// identifiers
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 606 "/home/vsc/github/doxygen/src/pyscanner.l"
// anything else
	YY_BREAK


case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 610 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        DBG_CTX((stderr,"indent %d<=%d\n",computeIndent(&yytext[1]),yyextra->indent));
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          unput_string(yytext,yyleng);
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 2);
yyg->yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 625 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          unput_string(yytext,yyleng);
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 639 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        endOfDef(yyscanner);
                        yyterminate();
                      }
	YY_BREAK
case 79:
/* rule 79 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 643 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // skip empty line
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 646 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // something at indent >0
                        yyextra->current->program << yytext;
                        yyextra->curIndent = computeIndent(yytext);
                        if (yyextra->curIndent<=yyextra->indent)
                          // jumped out of the function
                        {
                          endOfDef(yyscanner,1);
                          BEGIN(Search);
                        }
                      }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 656 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->current->program << yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 663 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->current->program << yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 670 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // non-special stuff
                        yyextra->current->program << yytext;
                        yyextra->specialBlock = FALSE;
                      }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 674 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal comment
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 677 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // comment half way
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 680 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        incLineNr(yyscanner);
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 684 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // any character
                        yyextra->current->program << *yytext;
                        yyextra->specialBlock = FALSE;
                      }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 689 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        yyextra->current->program << yytext;
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 695 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        yyextra->current->program << yytext;
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 90:
/* rule 90 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 701 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK


case 91:
YY_RULE_SETUP
#line 709 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                              //found function name
                              yyextra->current->name = yytext;
                              yyextra->current->name = yyextra->current->name.stripWhiteSpace();
                              newFunction(yyscanner);
                            }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 715 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // function without arguments
                              yyextra->specialBlock = TRUE; // expecting a docstring
                              yyextra->bodyEntry = yyextra->current;
                              yyextra->current->bodyLine  = yyextra->yyLineNr;
                              BEGIN(FunctionBody);
                            }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 722 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                              yyextra->defVal.str(std::string());
                              yyextra->braceCount = 0;
                              BEGIN(FunctionTypeAnnotation);
                            }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 727 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                              yyextra->funcParamsEnd = FALSE;
                              yyextra->current->bodyLine  = yyextra->yyLineNr;
                              BEGIN(FunctionParams);
                            }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 732 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // end of parameter list
                              if (yyextra->current->argList.empty())
                              {
                                yyextra->current->argList.setNoParameters(TRUE);
                              }
                              yyextra->current->args = argListToString(yyextra->current->argList);
                              yyextra->funcParamsEnd = TRUE;
                            }
	YY_BREAK


case 96:
YY_RULE_SETUP
#line 743 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 746 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->argType = yytext;
                        }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 749 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // Name of parameter
                          lineCount(yyscanner);
                          Argument a;
                          a.name = QCString(yytext).stripWhiteSpace();
                          a.type = yyextra->argType;
                          yyextra->current->argList.push_back(a);
                          yyextra->argType = "";
                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 757 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
                          yyextra->defVal.str(std::string());
                          yyextra->braceCount = 0;
                          BEGIN(FunctionParamDefVal);
                        }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 764 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          unput(*yytext);
                          BEGIN(FunctionDec);
                        }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 768 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal.str(std::string());
                          yyextra->braceCount = 0;
                          BEGIN(FunctionAnnotation);
                        }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 773 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // a comment
                        }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 775 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 104:
#line 782 "/home/vsc/github/doxygen/src/pyscanner.l"
case 105:
#line 783 "/home/vsc/github/doxygen/src/pyscanner.l"
case 106:
YY_RULE_SETUP
#line 783 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          ++yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 107:
#line 788 "/home/vsc/github/doxygen/src/pyscanner.l"
case 108:
#line 789 "/home/vsc/github/doxygen/src/pyscanner.l"
case 109:
YY_RULE_SETUP
#line 789 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          --yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 793 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          if (yyextra->braceCount == 0)
                          {
                            yyextra->current->type = yyextra->defVal.str();
                            unput(*yytext);
                            BEGIN(FunctionDec);
                          }
                          else
                            yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 803 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionTypeAnnotation;
                          BEGIN(SingleQuoteString);
                        }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 809 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionTypeAnnotation;
                          BEGIN(DoubleQuoteString);
                        }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 815 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          incLineNr(yyscanner);
                        }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 819 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK


case 115:
#line 826 "/home/vsc/github/doxygen/src/pyscanner.l"
case 116:
#line 827 "/home/vsc/github/doxygen/src/pyscanner.l"
case 117:
YY_RULE_SETUP
#line 827 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          ++yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 118:
#line 832 "/home/vsc/github/doxygen/src/pyscanner.l"
case 119:
YY_RULE_SETUP
#line 832 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          --yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 120:
#line 837 "/home/vsc/github/doxygen/src/pyscanner.l"
case 121:
#line 838 "/home/vsc/github/doxygen/src/pyscanner.l"
case 122:
YY_RULE_SETUP
#line 838 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          if (yyextra->braceCount == 0)
                          {
                            if (!yyextra->current->argList.empty())
                              yyextra->current->argList.back().type += yyextra->defVal.str();
                            if (*yytext != ',')
                              unput(*yytext);
                            BEGIN(FunctionParams);
                          }
                          else
                          {
                            if (*yytext == ')')
                              --yyextra->braceCount;
                            yyextra->defVal << *yytext;
                          }
                        }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 854 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionAnnotation;
                          BEGIN(SingleQuoteString);
                        }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 860 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionAnnotation;
                          BEGIN(DoubleQuoteString);
                        }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 866 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          incLineNr(yyscanner);
                        }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 870 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK


case 127:
#line 877 "/home/vsc/github/doxygen/src/pyscanner.l"
case 128:
#line 878 "/home/vsc/github/doxygen/src/pyscanner.l"
case 129:
YY_RULE_SETUP
#line 878 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // internal opening brace, assumption is that we have correct code so braces do match
                          ++yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 130:
#line 883 "/home/vsc/github/doxygen/src/pyscanner.l"
case 131:
YY_RULE_SETUP
#line 883 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          --yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 132:
#line 888 "/home/vsc/github/doxygen/src/pyscanner.l"
case 133:
YY_RULE_SETUP
#line 888 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          if (yyextra->braceCount == 0)
                          {
                            if (!yyextra->current->argList.empty())
                              yyextra->current->argList.back().defval=QCString(yyextra->defVal.str()).stripWhiteSpace();
                            if (*yytext == ')')
                              unput(*yytext);
                            BEGIN(FunctionParams);
                          }
                          else
                          {
                            if (*yytext == ')')
                              --yyextra->braceCount;
                            yyextra->defVal << *yytext;
                          }
                        }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 905 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionParamDefVal;
                          BEGIN( SingleQuoteString );
                        }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 911 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionParamDefVal;
                          BEGIN( DoubleQuoteString );
                        }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 917 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                            yyextra->defVal << *yytext;
                            incLineNr(yyscanner);
                        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 921 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                            yyextra->defVal << *yytext;
                        }
	YY_BREAK


case 138:
/* rule 138 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 928 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // new def at indent 0
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          int i;
                          for (i=(int)yyleng-1;i>=0;i--)
                          {
                            unput(yytext[i]);
                          }
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 946 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment at indent 0
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          int i;
                          for (i=(int)yyleng-1;i>=0;i--)
                          {
                            unput(yytext[i]);
                          }
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 964 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // skip empty line
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 967 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        endOfDef(yyscanner);
                        yyterminate();
                      }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 971 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // something at indent >0
                        yyextra->curIndent=computeIndent(yytext);
                        DBG_CTX((stderr,"yyextra->curIndent=%d yyextra->indent=%d\n",yyextra->curIndent,yyextra->indent));
                        if (yyextra->curIndent<=yyextra->indent)
                          // jumped out of the class/method
                        {
                          endOfDef(yyscanner,1);
                          yyextra->indent=yyextra->curIndent;
                          // make sure the next rule matches ^...
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          //yyextra->hideClassDocs = FALSE;
                          BEGIN(Search);
                        }
                        else
                        {
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 989 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->current->program << *yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 996 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->current->program << *yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1003 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // non-special stuff
                        yyextra->current->program << yytext;
                        yyextra->specialBlock = FALSE;
                        //yyextra->hideClassDocs = FALSE;
                      }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1008 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->program << *yytext;
                        incLineNr(yyscanner);
                      }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1012 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal comment
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1015 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // any character
                        yyextra->specialBlock = FALSE;
                        yyextra->current->program << *yytext;
                      }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1019 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        //if (!yyextra->hideClassDocs)
                        yyextra->current->program << yytext;
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1026 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        //if (!yyextra->hideClassDocs)
                        yyextra->current->program << yytext;
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK

case 150:
YY_RULE_SETUP
#line 1034 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          if (yyextra->current->type.isEmpty())
                          {
                              yyextra->current->type = "class";
                          }

                          yyextra->current->section = Entry::CLASS_SEC;
                          yyextra->current->name = yytext;

                          // prepend scope in case of nested classes
                          if (yyextra->current_root->section&Entry::SCOPE_MASK)
                          {
                            //printf("*** Prepending scope %s to class %s\n",qPrint(yyextra->current_root->name),qPrint(yyextra->current->name));
                            yyextra->current->name.prepend(yyextra->current_root->name+"::");
                          }

                          yyextra->current->name = yyextra->current->name.stripWhiteSpace();
                          yyextra->current->fileName = yyextra->fileName;
                          yyextra->docBlockContext   = YY_START;
                          yyextra->docBlockInBody    = FALSE;
                          yyextra->docBlockJavaStyle = FALSE;
                          yyextra->docBlock.resize(0);

                          BEGIN(ClassInheritance);
                        }
	YY_BREAK

case 151:
YY_RULE_SETUP
#line 1061 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1064 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // begin of the class definition
                         yyextra->specialBlock = TRUE; // expecting a docstring
                         yyextra->current->bodyLine  = yyextra->yyLineNr;
                         yyextra->current->program.str(std::string());
                         BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1071 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                         yyextra->current->extends.push_back(
                                              BaseInfo(substitute(yytext,".","::"),Protection::Public,Specifier::Normal)
                                            );
                         //Has base class-do stuff
                       }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1077 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a single quoted string
                         yyextra->stringContext=YY_START;
                         BEGIN( SingleQuoteStringIgnore );
                       }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1081 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a double quoted string
                         yyextra->stringContext=YY_START;
                         BEGIN( DoubleQuoteStringIgnore );
                       }
	YY_BREAK


case 156:
YY_RULE_SETUP
#line 1088 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // end of a single quoted string
                         BEGIN(yyextra->stringContext);
                       }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1091 "/home/vsc/github/doxygen/src/pyscanner.l"
{ }
	YY_BREAK


case 158:
YY_RULE_SETUP
#line 1094 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // end of a double quoted string
                         BEGIN(yyextra->stringContext);
                       }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1097 "/home/vsc/github/doxygen/src/pyscanner.l"
{ }
	YY_BREAK


case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1101 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
                                 lineCount(yyscanner);
                                 yyextra->current->program << yytext;
                               }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1107 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                                 initTriDoubleQuoteBlock(yyscanner);
                                 yyextra->current->program << yytext;
                                 BEGIN(TripleComment);
                               }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1112 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                                 initTriSingleQuoteBlock(yyscanner);
                                 yyextra->current->program << yytext;
                                 BEGIN(TripleComment);
                               }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1117 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment
                                 initSpecialBlock(yyscanner);
                                 BEGIN(SpecialComment);
                               }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1121 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // ignore comment with just one #
                               }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1123 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                                 yyextra->current->program << yytext;
                                 //yyextra->current->startLine = yyextra->yyLineNr;
                                 yyextra->curIndent=computeIndent(yytext);
                                 yyextra->bodyEntry = yyextra->current;
                                 DBG_CTX((stderr,"setting indent %d\n",yyextra->curIndent));
                                 //printf("yyextra->current->program=[%s]\n",qPrint(yyextra->current->program));
                                 //yyextra->hideClassDocs = TRUE;
                                 BEGIN(ClassBody);
                               }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1134 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                                 // Just pushback an empty class, and
                                 // resume parsing the body.
                                 newEntry(yyscanner);
                                 yyextra->current->program << yytext;

                                 // printf("Failed to find indent - skipping!");
                                 BEGIN( Search );
                               }
	YY_BREAK


case 167:
YY_RULE_SETUP
#line 1147 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyextra->yyLineNr);
                        yyextra->startInit = TRUE;
                        yyextra->current->initializer.str(yytext);
                        yyextra->current->initializer << " ";
                      }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1153 "/home/vsc/github/doxygen/src/pyscanner.l"
{ //typing
                        yyextra->startInit = FALSE;
                        yyextra->current->type = substitute(yytext,":","");
                      }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1157 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // spaces
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1160 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // integer value
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "int";
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1164 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // floating point value
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "float";
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1168 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // boolean value
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "bool";
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1172 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // string
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "str";
                        yyextra->current->initializer << yytext;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1179 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // string
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "str";
                        yyextra->current->initializer << yytext;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1186 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "str";
                        yyextra->current->initializer << yytext;
                        yyextra->doubleQuote=TRUE;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN(TripleString);
                      }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1195 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "str";
                        yyextra->current->initializer << yytext;
                        yyextra->doubleQuote=FALSE;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN(TripleString);
                      }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1203 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // tuple, only when direct after =
                        if (yyextra->current->mtype!=MethodTypes::Property && yyextra->startInit)
                        {
                          yyextra->current->type = "tuple";
                        }
                        yyextra->current->initializer << *yytext;
                        yyextra->atomStart='(';
                        yyextra->atomEnd=')';
                        yyextra->atomCount=1;
                        BEGIN( VariableAtom );
                      }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1214 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // list
                        if (yyextra->startInit) yyextra->current->type = "list";
                        yyextra->current->initializer << *yytext;
                        yyextra->atomStart='[';
                        yyextra->atomEnd=']';
                        yyextra->atomCount=1;
                        BEGIN( VariableAtom );
                      }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1222 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // dictionary
                        if (yyextra->startInit) yyextra->current->type = "dict";
                        yyextra->current->initializer << *yytext;
                        yyextra->atomStart='{';
                        yyextra->atomEnd='}';
                        yyextra->atomCount=1;
                        BEGIN( VariableAtom );
                      }
	YY_BREAK
case 180:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1230 "/home/vsc/github/doxygen/src/pyscanner.l"
{  // start of a special comment
                        yyextra->curIndent=computeIndent(yytext);
                        yyextra->packageCommentAllowed = FALSE;
                        initSpecialBlock(yyscanner);
                        yyextra->docBlockContext = VariableEnd;
                        BEGIN(SpecialComment);
                      }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1237 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // comment
                        BEGIN( VariableEnd );
                      }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1240 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        // do something based on the type of the IDENTIFIER
                        if (yyextra->current->type.isEmpty())
                        {
                          for (const auto &child : yyextra->current_root->children())
                          {
                            if (child->name == QCString(yytext))
                            {
                               yyextra->current->type = child->type;
                               break;
                            }
                          }
                        }
                        yyextra->startInit = FALSE;
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 1256 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->initializer << yytext;
                        incLineNr(yyscanner);
                      }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1260 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->startInit = FALSE;
                        yyextra->current->initializer << *yytext;
                      }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 1264 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        unput('\n');
                        BEGIN( VariableEnd );
                      }
	YY_BREAK


case 186:
YY_RULE_SETUP
#line 1271 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                        if (yyextra->atomStart==*yytext)
                        {
                          yyextra->atomCount++;
                        }
                      }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1278 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                        if (yyextra->atomEnd==*yytext)
                        {
                          yyextra->atomCount--;
                        }
                        if (yyextra->atomCount==0)
                        {
                          yyextra->startInit = FALSE;
                          BEGIN(VariableDec);
                        }
                      }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1290 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        yyextra->specialBlock = FALSE;
                        yyextra->current->program << yytext;
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1297 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // start of a comment block
                        yyextra->specialBlock = FALSE;
                        yyextra->current->program << yytext;
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1303 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->stringContext=YY_START;
                        yyextra->current->initializer << "'";
                        yyextra->copyString=&yyextra->current->initializer;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1309 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->stringContext=YY_START;
                        yyextra->current->initializer << "\"";
                        yyextra->copyString=&yyextra->current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1315 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1318 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                      }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 1321 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                        incLineNr(yyscanner);
                      }
	YY_BREAK


case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 1329 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        incLineNr(yyscanner);
                        newVariable(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1334 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                        unput(*yytext);
                        newVariable(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1339 "/home/vsc/github/doxygen/src/pyscanner.l"
{ yyterminate();
                      }
	YY_BREAK


case 197:
#line 1345 "/home/vsc/github/doxygen/src/pyscanner.l"
case 198:
YY_RULE_SETUP
#line 1345 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          // printf("Expected module block %d special=%d\n",yyextra->expectModuleDocs,yyextra->specialBlock);
                          if (yyextra->doubleQuote==(yytext[0]=='"'))
                          {
                            if (yyextra->specialBlock) // expecting a docstring
                            {
                              QCString actualDoc=yyextra->docBlock;
                              if (!yyextra->docBlockSpecial) // legacy unformatted docstring
                              {
                                if (!actualDoc.isEmpty())
                                {
                                  stripIndentation(actualDoc,yyextra->commentIndent);
                                  actualDoc.prepend("@iverbatim\n");
                                  actualDoc.append("@endiverbatim ");
                                }
                              }
                              //printf("-------> yyextra->current=%p yyextra->bodyEntry=%p\n",yyextra->current,yyextra->bodyEntry);
                              handleCommentBlock(yyscanner, actualDoc, FALSE);
                            }
                            else if (yyextra->packageCommentAllowed) // expecting module docs
                            {
                              QCString actualDoc=yyextra->docBlock;
                              if (!yyextra->docBlockSpecial) // legacy unformatted docstring
                              {
                                if (!actualDoc.isEmpty())
                                {
                                  stripIndentation(actualDoc,yyextra->commentIndent);
                                  actualDoc.prepend("@iverbatim\n");
                                  actualDoc.append("@endiverbatim ");
                                }
                              }
                              if (yyextra->moduleScope.startsWith("__") &&  yyextra->moduleScope.endsWith("__"))
                              {
                                actualDoc.prepend("\\namespace \\"+yyextra->moduleScope+" ");
                              }
                              else
                              {
                                actualDoc.prepend("\\namespace "+yyextra->moduleScope+" ");
                              }
                              handleCommentBlock(yyscanner, actualDoc, FALSE);
                            }
                            if ((yyextra->docBlockContext==ClassBody /*&& !yyextra->hideClassDocs*/) ||
                                yyextra->docBlockContext==FunctionBody)
                            {
                              yyextra->current->program << yyextra->docBlock;
                              yyextra->current->program << yytext;
                            }
                            //if (yyextra->hideClassDocs)
                            //{
                            //  yyextra->current->startLine = yyextra->yyLineNr;
                            //}
                            //yyextra->hideClassDocs=FALSE;
                            BEGIN(yyextra->docBlockContext);
                          }
                          else
                          {
                            yyextra->docBlock += yytext;
                          }
                          yyextra->packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1407 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // leading whitespace, compensate for """! / '''!
                          if (yyextra->docBlockSpecial && yyleng >= yyextra->curIndent)
                            yyextra->docBlock += yytext + yyextra->curIndent;
                          else
                            yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1413 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 1416 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          incLineNr(yyscanner);
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1420 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // escaped char
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1423 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK


case 204:
YY_RULE_SETUP
#line 1429 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // skip leading hashes
                        }
	YY_BREAK
case 205:
/* rule 205 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1431 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // continuation of the comment on the next line
                          yyextra->docBlock+='\n';
                          yyextra->docBrief = FALSE;
                          incLineNr(yyscanner);
                        }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1436 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // any other stuff
                          yyextra->docBlock+=yytext;
                        }
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 1439 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // new line that ends the comment
                          handleCommentBlock(yyscanner, yyextra->docBlock, yyextra->docBrief);
                          if (yyextra->docBlockContext == VariableEnd)
                          {
                            unput(*yytext);
                          }
                          else
                          {
                            incLineNr(yyscanner);
                          }
                          BEGIN(yyextra->docBlockContext);
                        }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1451 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // anything we missed
                          yyextra->docBlock+=*yytext;
                        }
	YY_BREAK


case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 1457 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // line continuation
                                 addToString(yyscanner,yytext);
                                 incLineNr(yyscanner);
                               }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1461 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // escaped char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1464 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // triple double quotes
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1467 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // end of the string
                                 addToString(yyscanner,yytext);
                                 BEGIN(yyextra->stringContext);
                               }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1471 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal chars
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1474 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK


case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 1480 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // line continuation
                                 addToString(yyscanner,yytext);
                                 incLineNr(yyscanner);
                               }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1484 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // escaped char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1487 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // triple single quotes
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1490 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // end of the string
                                 addToString(yyscanner,yytext);
                                 BEGIN(yyextra->stringContext);
                               }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1494 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal chars
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1497 "/home/vsc/github/doxygen/src/pyscanner.l"
{ // normal char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK


case 221:
#line 1504 "/home/vsc/github/doxygen/src/pyscanner.l"
case 222:
YY_RULE_SETUP
#line 1504 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          *yyextra->copyString << yytext;
                          if (yyextra->doubleQuote==(yytext[0]=='"'))
                          {
                            BEGIN(yyextra->stringContext);
                          }
                        }
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 1513 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          lineCount(yyscanner);
                          *yyextra->copyString << yytext;
                        }
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1517 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          incLineNr(yyscanner);
                          *yyextra->copyString << yytext;
                        }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1521 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                          *yyextra->copyString << *yytext;
                        }
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
                                 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
                                 //       yytext, YY_START, yyextra->yyLineNr);

                               }
  */
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 1536 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                                 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
                                 //       YY_START, yyextra->yyLineNr);

                                 lineCount(yyscanner);
                               }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1543 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                                 //fprintf(stderr,"Quote: %d\n",YY_START);
                               }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1547 "/home/vsc/github/doxygen/src/pyscanner.l"
{
                                 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
                                 //       yytext, YY_START, yyextra->yyLineNr);

                               }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1554 "/home/vsc/github/doxygen/src/pyscanner.l"
ECHO;
	YY_BREAK
#line 4731 "/home/vsc/github/doxygen/Debug/generated_src/pyscanner_intermediate.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(SearchSkipValue):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionAnnotation):
			case YY_STATE_EOF(FunctionTypeAnnotation):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(SingleQuoteStringIgnore):
			case YY_STATE_EOF(DoubleQuoteStringIgnore):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 675 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 675 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 674);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1554 "/home/vsc/github/doxygen/src/pyscanner.l"


//----------------------------------------------------------------------------

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int c=0;
  const char *p = yyextra->inputString + yyextra->inputPosition;
  while ( c < max_size && *p ) { *buf++ = *p++; c++; }
  yyextra->inputPosition+=c;
  return c;
}

static void initParser(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->protection = Protection::Public;
  yyextra->mtype = MethodTypes::Method;
  yyextra->isStatic = FALSE;
  yyextra->virt = Specifier::Normal;
  yyextra->previous = 0;
  yyextra->packageCommentAllowed = TRUE;
}

static void initEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //yyextra->current->python = TRUE;
  if (!yyextra->current) {
      newEntry(yyscanner);
  }
  yyextra->current->protection = yyextra->protection ;
  yyextra->current->mtype      = yyextra->mtype;
  yyextra->current->virt       = yyextra->virt;
  yyextra->current->isStatic   = yyextra->isStatic;
  yyextra->current->lang       = SrcLangExt_Python;
  yyextra->commentScanner.initGroupInfo(yyextra->current.get());
  yyextra->isStatic = FALSE;
}

static void newEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->previous = yyextra->current;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);
}

static void addEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  auto doc        = yyextra->current->doc;
  auto docLine    = yyextra->current->docLine;
  auto docFile    = yyextra->current->docFile;
  auto brief      = yyextra->current->brief;
  auto briefLine  = yyextra->current->briefLine;
  auto briefFile  = yyextra->current->briefFile;

  yyextra->previous = yyextra->current;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);

  yyextra->current->doc        = doc;
  yyextra->current->docLine    = docLine;
  yyextra->current->docFile    = docFile;
  yyextra->current->brief      = brief;
  yyextra->current->briefLine  = briefLine;
  yyextra->current->briefFile  = briefFile;
}

static void setProtection(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->name.isEmpty() && yyextra->current->name.at(0)=='_')
  {
    if (yyextra->current->name.at(1)=='_') // mark as private
    {
      yyextra->current->protection=Protection::Private;
    }
    else // mark as protected
    {
      yyextra->current->protection=Protection::Protected;
    }
  }
}

static void docVariable(yyscan_t yyscanner,const char *name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->name = name;
  yyextra->current->section=Entry::VARIABLE_SEC;
  yyextra->current->fileName  = yyextra->fileName;
  yyextra->current->startLine = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->current->type.resize(0);
  setProtection(yyscanner);
}

static void newVariable(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setProtection(yyscanner);
  if (yyextra->current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    yyextra->current->isStatic = TRUE;
  }
  newEntry(yyscanner);
}

static void addVariable(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setProtection(yyscanner);
  if (yyextra->current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    yyextra->current->isStatic = TRUE;
  }
  addEntry(yyscanner);
}

static void newFunction(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->name.startsWith("__") && yyextra->current->name.endsWith("__"))
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    yyextra->current->protection=Protection::Public;
  }
  else
  {
    setProtection(yyscanner);
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(yyscan_t yyscanner,const QCString &path)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  auto it = yyextra->packageNameCache.find(path.str());
  if (it!=yyextra->packageNameCache.end())
  {
    return QCString(it->second);
  }
  FileInfo pf(path.str()+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(yyscanner,path.left(i));
      if (!scope.isEmpty())
      {
        scope+="::";
      }
      scope+=path.mid(i+1);
      yyextra->packageNameCache.insert(std::make_pair(path.str(),scope.str()));
      return scope;
    }
  }
  return "";
}

static QCString findPackageScope(yyscan_t yyscanner,const QCString &fileName)
{
  if (fileName.isEmpty()) return fileName;
  FileInfo fi(fileName.str());
  return findPackageScopeFromPath(yyscanner,fi.dirPath(true).c_str());
}

static void addFrom(yyscan_t yyscanner,bool all)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString item=all ? yyextra->packageName : yyextra->packageName+"."+yytext;
  yyextra->current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
  yyextra->current->fileName = yyextra->fileName;
  //printf("Adding using declaration: found:%s:%d name=%s\n",qPrint(yyextra->fileName),yyextra->yyLineNr,qPrint(yyextra->current->name));
  yyextra->current->section=all ? Entry::USINGDIR_SEC : Entry::USINGDECL_SEC;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);
}
//-----------------------------------------------------------------------------

static void lineCount(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  DBG_CTX((stderr,"yyextra->yyLineNr=%d\n",yyextra->yyLineNr));
  for (const char *p = yytext; *p; ++p)
  {
    yyextra->yyLineNr += (*p == '\n') ;
  }
}

static void incLineNr(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  DBG_CTX((stderr,"yyextra->yyLineNr=%d\n",yyextra->yyLineNr));
  yyextra->yyLineNr++;
}

//-----------------------------------------------------------------
static void startCommentBlock(yyscan_t yyscanner,bool brief)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (brief)
  {
    yyextra->current->briefFile = yyextra->fileName;
    yyextra->current->briefLine = yyextra->yyLineNr;
  }
  else
  {
    yyextra->current->docFile = yyextra->fileName;
    yyextra->current->docLine = yyextra->yyLineNr;
  }
}

static void handleCommentBlock(yyscan_t yyscanner,const QCString &doc,bool brief)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("handleCommentBlock(doc=[%s] brief=%d yyextra->docBlockInBody=%d yyextra->docBlockJavaStyle=%d\n",
  //    qPrint(doc),brief,yyextra->docBlockInBody,yyextra->docBlockJavaStyle);

  // TODO: Fix me
  yyextra->docBlockInBody=FALSE;

  if (!yyextra->current->doc.isEmpty())
  {
    yyextra->current->doc=yyextra->current->doc.stripWhiteSpace()+"\n\n";
  }
  if (yyextra->docBlockInBody && yyextra->previous && !yyextra->previous->doc.isEmpty())
  {
    yyextra->previous->doc=yyextra->previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry = false;
  int lineNr = brief ? yyextra->current->briefLine : yyextra->current->docLine;
  Markdown markdown(yyextra->fileName,lineNr);
  QCString processedDoc = Config_getBool(MARKDOWN_SUPPORT) ? markdown.process(doc,lineNr) : doc;
  while (yyextra->commentScanner.parseCommentBlock(
        yyextra->thisParser,
        (yyextra->docBlockInBody && yyextra->previous) ? yyextra->previous.get() : yyextra->current.get(),
        processedDoc, // text
        yyextra->fileName,   // file
        lineNr,
        yyextra->docBlockInBody ? FALSE : brief,
        yyextra->docBlockJavaStyle, // javadoc style // or FALSE,
        yyextra->docBlockInBody,
        yyextra->protection,
        position,
        needsEntry,
        Config_getBool(MARKDOWN_SUPPORT))
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry(yyscanner);
    }
  }
  if (needsEntry)
  {
    newEntry(yyscanner);
  }

}

static void endOfDef(yyscan_t yyscanner,int correction)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("endOfDef at=%d\n",yyextra->yyLineNr);
  if (yyextra->bodyEntry)
  {
    yyextra->bodyEntry->endBodyLine  = yyextra->yyLineNr-correction;
    yyextra->bodyEntry = 0;
  }
  newEntry(yyscanner);
  //yyextra->insideConstructor = FALSE;
}

static inline void addToString(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->copyString) (*yyextra->copyString) << s;
}

static void initTriDoubleQuoteBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBlockSpecial   = yytext[strlen(yytext) - 1]=='!' || !Config_getBool(PYTHON_DOCSTRING);
  yyextra->docBlock.resize(0);
  yyextra->commentIndent = yyextra->curIndent;
  yyextra->doubleQuote = TRUE;
  if (yyextra->docBlockSpecial)
  {
    yyextra->docBlock.fill(' ',yyextra->indent);
  }
  startCommentBlock(yyscanner,FALSE);
}

static void initTriSingleQuoteBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBlockSpecial   = yytext[strlen(yytext) - 1]=='!' || !Config_getBool(PYTHON_DOCSTRING);
  yyextra->docBlock.resize(0);
  yyextra->commentIndent = yyextra->curIndent;
  yyextra->doubleQuote = FALSE;
  if (yyextra->docBlockSpecial)
  {
    yyextra->docBlock.fill(' ',yyextra->indent);
  }
  startCommentBlock(yyscanner,FALSE);
}

static void initSpecialBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBrief = TRUE;
  yyextra->docBlock.resize(0);
  yyextra->commentIndent = yyextra->curIndent;
  startCommentBlock(yyscanner,FALSE);
}

static void searchFoundDef(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->fileName  = yyextra->fileName;
  yyextra->current->startLine = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->current->section = Entry::FUNCTION_SEC;
  yyextra->current->lang = SrcLangExt_Python;
  yyextra->current->virt = Specifier::Normal;
  yyextra->current->isStatic = yyextra->isStatic;
  yyextra->current->mtype = yyextra->mtype = MethodTypes::Method;
  yyextra->current->type.resize(0);
  yyextra->current->name.resize(0);
  yyextra->current->args.resize(0);
  yyextra->current->argList.clear();
  yyextra->packageCommentAllowed = FALSE;
  yyextra->isStatic=FALSE;
  //printf("searchFoundDef at=%d\n",yyextra->yyLineNr);
}

static void searchFoundClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->section = Entry::CLASS_SEC;
  yyextra->current->argList.clear();
  yyextra->current->type += "class" ;
  yyextra->current->fileName  = yyextra->fileName;
  yyextra->current->startLine  = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->packageCommentAllowed = FALSE;
}

//----------------------------------------------------------------------------

static void parseCompounds(yyscan_t yyscanner,std::shared_ptr<Entry> rt)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("parseCompounds(%s)\n",qPrint(rt->name));
  for (size_t i=0; i<rt->children().size(); ++i)
  {
    std::shared_ptr<Entry> ce = rt->children()[i];
    if (!ce->program.empty())
    {
      //fprintf(stderr,"parseCompounds: -- %s (line %d) ---------\n%s\n---------------\n",
      //  qPrint(ce->name), ce->bodyLine, qPrint(ce->program));
      // init scanner state
      yyextra->programStr = ce->program.str();
      yyextra->inputString = yyextra->programStr.data();
      yyextra->inputPosition = 0;
      pyscannerYYrestart( 0, yyscanner );
      if (ce->section&Entry::COMPOUND_MASK)
      {
        yyextra->specialBlock = false;
        yyextra->current_root = ce;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        yyextra->current_root = rt;
        //printf("Searching for member variables in %s parent=%s\n",
        //    qPrint(ce->name),qPrint(ce->parent->name));
        BEGIN( SearchMemVars );
      }
      yyextra->fileName = ce->fileName;
      yyextra->yyLineNr   = ce->bodyLine ;
      yyextra->current = std::make_shared<Entry>();
      initEntry(yyscanner);

      QCString name = ce->name;
      yyextra->commentScanner.enterCompound(yyextra->fileName,yyextra->yyLineNr,name);

      pyscannerYYlex(yyscanner) ;
      yyextra->lexInit=TRUE;

      yyextra->programStr.resize(0);
      ce->program.str(std::string());

      yyextra->commentScanner.leaveCompound(yyextra->fileName,yyextra->yyLineNr,name);

    }
    parseCompounds(yyscanner,ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(yyscan_t yyscanner, const QCString &fileName,const char *fileBuf,const std::shared_ptr<Entry> &rt)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  initParser(yyscanner);

  if (fileBuf==0 || fileBuf[0]=='\0') return;

  yyextra->inputString = fileBuf;
  yyextra->inputPosition = 0;

  yyextra->protection    = Protection::Public;
  yyextra->mtype         = MethodTypes::Method;
  yyextra->isStatic      = false;
  yyextra->virt          = Specifier::Normal;
  yyextra->current_root  = rt;
  yyextra->specialBlock  = false;

  yyextra->yyLineNr= 1 ;
  yyextra->fileName = fileName;
  //setContext();
  msg("Parsing file %s...\n",qPrint(yyextra->fileName));

  FileInfo fi(fileName.str());
  yyextra->moduleScope = findPackageScope(yyscanner,fileName);
  QCString baseName=fi.baseName();
  if (baseName!="__init__") // package initializer file is not a package itself
  {
    if (!yyextra->moduleScope.isEmpty())
    {
      yyextra->moduleScope+="::";
    }
    yyextra->moduleScope+=baseName;
  }

  // add namespaces for each scope
  QCString scope = yyextra->moduleScope;
  int startPos = 0;
  int pos;
  do
  {
    yyextra->current            = std::make_shared<Entry>();
    pos = scope.find("::",startPos);
    startPos=pos+2;
    if (pos==-1) pos=(int)scope.length();
    initEntry(yyscanner);
    yyextra->current->name      = scope.left(pos);
    yyextra->current->section   = Entry::NAMESPACE_SEC;
    yyextra->current->type      = "namespace";
    yyextra->current->fileName  = yyextra->fileName;
    yyextra->current->startLine = yyextra->yyLineNr;
    yyextra->current->bodyLine  = yyextra->yyLineNr;
    yyextra->current_root       = yyextra->current;
    rt->moveToSubEntryAndRefresh(yyextra->current);
  } while (pos<(int)scope.length());
    yyextra->current            = std::make_shared<Entry>();

  initParser(yyscanner);

  yyextra->commentScanner.enterFile(yyextra->fileName,yyextra->yyLineNr);

  yyextra->current->reset();
  initEntry(yyscanner);
  pyscannerYYrestart(0,yyscanner);
  BEGIN( Search );
  pyscannerYYlex(yyscanner);
  yyextra->lexInit=TRUE;

  yyextra->commentScanner.leaveFile(yyextra->fileName,yyextra->yyLineNr);

  yyextra->programStr.resize(0);
  yyextra->current_root->program.str(std::string());

  parseCompounds(yyscanner, yyextra->current_root);
}

//----------------------------------------------------------------------------

static void parsePrototype(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("**** parsePrototype(%s) begin\n",qPrint(text));
  if (text.isEmpty())
  {
    warn(yyextra->fileName,yyextra->yyLineNr,"Empty prototype found!");
    return;
  }

  yyextra->specialBlock = FALSE;
  yyextra->packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;

  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  yy_switch_to_buffer(yy_create_buffer(0, YY_BUF_SIZE, yyscanner), yyscanner);
  orgInputString = yyextra->inputString;
  orgInputPosition = yyextra->inputPosition;

  // set new string
  yyextra->inputString = text.data();
  yyextra->inputPosition = 0;
  pyscannerYYrestart( 0, yyscanner );

  BEGIN( FunctionDec );

  pyscannerYYlex(yyscanner);
  yyextra->lexInit=TRUE;

  yyextra->current->name = yyextra->current->name.stripWhiteSpace();
  if (yyextra->current->section == Entry::MEMBERDOC_SEC && yyextra->current->args.isEmpty())
    yyextra->current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
  yy_switch_to_buffer(orgState, yyscanner);

  yyextra->inputString = orgInputString;
  yyextra->inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

//----------------------------------------------------------------------------

struct PythonOutlineParser::Private
{
  yyscan_t yyscanner;
  pyscannerYY_state state;
};

PythonOutlineParser::PythonOutlineParser() : p(std::make_unique<PythonOutlineParser::Private>())
{
  pyscannerYYlex_init_extra(&p->state,&p->yyscanner);
#ifdef FLEX_DEBUG
  pyscannerYYset_debug(Debug::isFlagSet(Debug::Lex_pyscanner)?1:0,p->yyscanner);
#endif
}

PythonOutlineParser::~PythonOutlineParser()
{
  pyscannerYYlex_destroy(p->yyscanner);
}


void PythonOutlineParser::parseInput(const QCString &fileName,
                                     const char *fileBuf,
                                     const std::shared_ptr<Entry> &root,
                                     ClangTUParser * /*clangParser*/)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->thisParser = this;
  DebugLex debugLex(Debug::Lex_pyscanner, __FILE__, qPrint(fileName));
  ::parseMain(p->yyscanner, fileName,fileBuf,root);

  // May print the AST for debugging purposes
  // printAST(global_root);
}
bool PythonOutlineParser::needsPreprocessing(const QCString &) const
{
  return FALSE;
}

void PythonOutlineParser::parsePrototype(const QCString &text)
{
  ::parsePrototype(p->yyscanner,text);
}

//----------------------------------------------------------------------------

#if USE_STATE2STRING
#include "pyscanner.l.h"
#endif

