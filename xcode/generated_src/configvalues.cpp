/* WARNING: This file is generated!
 * Do not edit this file, but edit config.xml instead and run
 * python configgen.py -maps config.xml to regenerate this file!
 */
#include "configvalues.h"
#include "configimpl.h"

ConfigValues::ConfigValues() : m_map(257)
{
  m_map.setAutoDelete(TRUE);
  m_map.insert("DOXYFILE_ENCODING",new InfoString(&ConfigValues::DOXYFILE_ENCODING));
  m_map.insert("PROJECT_NAME",new InfoString(&ConfigValues::PROJECT_NAME));
  m_map.insert("PROJECT_NUMBER",new InfoString(&ConfigValues::PROJECT_NUMBER));
  m_map.insert("PROJECT_BRIEF",new InfoString(&ConfigValues::PROJECT_BRIEF));
  m_map.insert("PROJECT_LOGO",new InfoString(&ConfigValues::PROJECT_LOGO));
  m_map.insert("OUTPUT_DIRECTORY",new InfoString(&ConfigValues::OUTPUT_DIRECTORY));
  m_map.insert("CREATE_SUBDIRS",new InfoBool(&ConfigValues::CREATE_SUBDIRS));
  m_map.insert("ALLOW_UNICODE_NAMES",new InfoBool(&ConfigValues::ALLOW_UNICODE_NAMES));
  m_map.insert("OUTPUT_LANGUAGE",new InfoString(&ConfigValues::OUTPUT_LANGUAGE));
  m_map.insert("BRIEF_MEMBER_DESC",new InfoBool(&ConfigValues::BRIEF_MEMBER_DESC));
  m_map.insert("REPEAT_BRIEF",new InfoBool(&ConfigValues::REPEAT_BRIEF));
  m_map.insert("ABBREVIATE_BRIEF",new InfoList(&ConfigValues::ABBREVIATE_BRIEF));
  m_map.insert("ALWAYS_DETAILED_SEC",new InfoBool(&ConfigValues::ALWAYS_DETAILED_SEC));
  m_map.insert("INLINE_INHERITED_MEMB",new InfoBool(&ConfigValues::INLINE_INHERITED_MEMB));
  m_map.insert("FULL_PATH_NAMES",new InfoBool(&ConfigValues::FULL_PATH_NAMES));
  m_map.insert("STRIP_FROM_PATH",new InfoList(&ConfigValues::STRIP_FROM_PATH));
  m_map.insert("STRIP_FROM_INC_PATH",new InfoList(&ConfigValues::STRIP_FROM_INC_PATH));
  m_map.insert("SHORT_NAMES",new InfoBool(&ConfigValues::SHORT_NAMES));
  m_map.insert("JAVADOC_AUTOBRIEF",new InfoBool(&ConfigValues::JAVADOC_AUTOBRIEF));
  m_map.insert("QT_AUTOBRIEF",new InfoBool(&ConfigValues::QT_AUTOBRIEF));
  m_map.insert("MULTILINE_CPP_IS_BRIEF",new InfoBool(&ConfigValues::MULTILINE_CPP_IS_BRIEF));
  m_map.insert("INHERIT_DOCS",new InfoBool(&ConfigValues::INHERIT_DOCS));
  m_map.insert("SEPARATE_MEMBER_PAGES",new InfoBool(&ConfigValues::SEPARATE_MEMBER_PAGES));
  m_map.insert("TAB_SIZE",new InfoInt(&ConfigValues::TAB_SIZE));
  m_map.insert("ALIASES",new InfoList(&ConfigValues::ALIASES));
  m_map.insert("TCL_SUBST",new InfoList(&ConfigValues::TCL_SUBST));
  m_map.insert("OPTIMIZE_OUTPUT_FOR_C",new InfoBool(&ConfigValues::OPTIMIZE_OUTPUT_FOR_C));
  m_map.insert("OPTIMIZE_OUTPUT_JAVA",new InfoBool(&ConfigValues::OPTIMIZE_OUTPUT_JAVA));
  m_map.insert("OPTIMIZE_FOR_FORTRAN",new InfoBool(&ConfigValues::OPTIMIZE_FOR_FORTRAN));
  m_map.insert("OPTIMIZE_OUTPUT_VHDL",new InfoBool(&ConfigValues::OPTIMIZE_OUTPUT_VHDL));
  m_map.insert("OPTIMIZE_OUTPUT_FOR_PROLOG",new InfoBool(&ConfigValues::OPTIMIZE_OUTPUT_FOR_PROLOG));
  m_map.insert("EXTENSION_MAPPING",new InfoList(&ConfigValues::EXTENSION_MAPPING));
  m_map.insert("MARKDOWN_SUPPORT",new InfoBool(&ConfigValues::MARKDOWN_SUPPORT));
  m_map.insert("TOC_INCLUDE_HEADINGS",new InfoInt(&ConfigValues::TOC_INCLUDE_HEADINGS));
  m_map.insert("AUTOLINK_SUPPORT",new InfoBool(&ConfigValues::AUTOLINK_SUPPORT));
  m_map.insert("BUILTIN_STL_SUPPORT",new InfoBool(&ConfigValues::BUILTIN_STL_SUPPORT));
  m_map.insert("CPP_CLI_SUPPORT",new InfoBool(&ConfigValues::CPP_CLI_SUPPORT));
  m_map.insert("SIP_SUPPORT",new InfoBool(&ConfigValues::SIP_SUPPORT));
  m_map.insert("IDL_PROPERTY_SUPPORT",new InfoBool(&ConfigValues::IDL_PROPERTY_SUPPORT));
  m_map.insert("DISTRIBUTE_GROUP_DOC",new InfoBool(&ConfigValues::DISTRIBUTE_GROUP_DOC));
  m_map.insert("GROUP_NESTED_COMPOUNDS",new InfoBool(&ConfigValues::GROUP_NESTED_COMPOUNDS));
  m_map.insert("SUBGROUPING",new InfoBool(&ConfigValues::SUBGROUPING));
  m_map.insert("INLINE_GROUPED_CLASSES",new InfoBool(&ConfigValues::INLINE_GROUPED_CLASSES));
  m_map.insert("INLINE_SIMPLE_STRUCTS",new InfoBool(&ConfigValues::INLINE_SIMPLE_STRUCTS));
  m_map.insert("TYPEDEF_HIDES_STRUCT",new InfoBool(&ConfigValues::TYPEDEF_HIDES_STRUCT));
  m_map.insert("LOOKUP_CACHE_SIZE",new InfoInt(&ConfigValues::LOOKUP_CACHE_SIZE));
  m_map.insert("EXTRACT_ALL",new InfoBool(&ConfigValues::EXTRACT_ALL));
  m_map.insert("EXTRACT_PRIVATE",new InfoBool(&ConfigValues::EXTRACT_PRIVATE));
  m_map.insert("EXTRACT_PACKAGE",new InfoBool(&ConfigValues::EXTRACT_PACKAGE));
  m_map.insert("EXTRACT_STATIC",new InfoBool(&ConfigValues::EXTRACT_STATIC));
  m_map.insert("EXTRACT_LOCAL_CLASSES",new InfoBool(&ConfigValues::EXTRACT_LOCAL_CLASSES));
  m_map.insert("EXTRACT_LOCAL_METHODS",new InfoBool(&ConfigValues::EXTRACT_LOCAL_METHODS));
  m_map.insert("EXTRACT_ANON_NSPACES",new InfoBool(&ConfigValues::EXTRACT_ANON_NSPACES));
  m_map.insert("HIDE_UNDOC_MEMBERS",new InfoBool(&ConfigValues::HIDE_UNDOC_MEMBERS));
  m_map.insert("HIDE_UNDOC_CLASSES",new InfoBool(&ConfigValues::HIDE_UNDOC_CLASSES));
  m_map.insert("HIDE_FRIEND_COMPOUNDS",new InfoBool(&ConfigValues::HIDE_FRIEND_COMPOUNDS));
  m_map.insert("HIDE_IN_BODY_DOCS",new InfoBool(&ConfigValues::HIDE_IN_BODY_DOCS));
  m_map.insert("INTERNAL_DOCS",new InfoBool(&ConfigValues::INTERNAL_DOCS));
  m_map.insert("CASE_SENSE_NAMES",new InfoBool(&ConfigValues::CASE_SENSE_NAMES));
  m_map.insert("HIDE_SCOPE_NAMES",new InfoBool(&ConfigValues::HIDE_SCOPE_NAMES));
  m_map.insert("HIDE_COMPOUND_REFERENCE",new InfoBool(&ConfigValues::HIDE_COMPOUND_REFERENCE));
  m_map.insert("SHOW_INCLUDE_FILES",new InfoBool(&ConfigValues::SHOW_INCLUDE_FILES));
  m_map.insert("SHOW_GROUPED_MEMB_INC",new InfoBool(&ConfigValues::SHOW_GROUPED_MEMB_INC));
  m_map.insert("FORCE_LOCAL_INCLUDES",new InfoBool(&ConfigValues::FORCE_LOCAL_INCLUDES));
  m_map.insert("INLINE_INFO",new InfoBool(&ConfigValues::INLINE_INFO));
  m_map.insert("SORT_MEMBER_DOCS",new InfoBool(&ConfigValues::SORT_MEMBER_DOCS));
  m_map.insert("SORT_BRIEF_DOCS",new InfoBool(&ConfigValues::SORT_BRIEF_DOCS));
  m_map.insert("SORT_MEMBERS_CTORS_1ST",new InfoBool(&ConfigValues::SORT_MEMBERS_CTORS_1ST));
  m_map.insert("SORT_GROUP_NAMES",new InfoBool(&ConfigValues::SORT_GROUP_NAMES));
  m_map.insert("SORT_BY_SCOPE_NAME",new InfoBool(&ConfigValues::SORT_BY_SCOPE_NAME));
  m_map.insert("STRICT_PROTO_MATCHING",new InfoBool(&ConfigValues::STRICT_PROTO_MATCHING));
  m_map.insert("GENERATE_TODOLIST",new InfoBool(&ConfigValues::GENERATE_TODOLIST));
  m_map.insert("GENERATE_TESTLIST",new InfoBool(&ConfigValues::GENERATE_TESTLIST));
  m_map.insert("GENERATE_BUGLIST",new InfoBool(&ConfigValues::GENERATE_BUGLIST));
  m_map.insert("GENERATE_DEPRECATEDLIST",new InfoBool(&ConfigValues::GENERATE_DEPRECATEDLIST));
  m_map.insert("ENABLED_SECTIONS",new InfoList(&ConfigValues::ENABLED_SECTIONS));
  m_map.insert("MAX_INITIALIZER_LINES",new InfoInt(&ConfigValues::MAX_INITIALIZER_LINES));
  m_map.insert("SHOW_USED_FILES",new InfoBool(&ConfigValues::SHOW_USED_FILES));
  m_map.insert("SHOW_FILES",new InfoBool(&ConfigValues::SHOW_FILES));
  m_map.insert("SHOW_NAMESPACES",new InfoBool(&ConfigValues::SHOW_NAMESPACES));
  m_map.insert("FILE_VERSION_FILTER",new InfoString(&ConfigValues::FILE_VERSION_FILTER));
  m_map.insert("LAYOUT_FILE",new InfoString(&ConfigValues::LAYOUT_FILE));
  m_map.insert("CITE_BIB_FILES",new InfoList(&ConfigValues::CITE_BIB_FILES));
  m_map.insert("QUIET",new InfoBool(&ConfigValues::QUIET));
  m_map.insert("WARNINGS",new InfoBool(&ConfigValues::WARNINGS));
  m_map.insert("WARN_IF_UNDOCUMENTED",new InfoBool(&ConfigValues::WARN_IF_UNDOCUMENTED));
  m_map.insert("WARN_IF_DOC_ERROR",new InfoBool(&ConfigValues::WARN_IF_DOC_ERROR));
  m_map.insert("WARN_NO_PARAMDOC",new InfoBool(&ConfigValues::WARN_NO_PARAMDOC));
  m_map.insert("WARN_AS_ERROR",new InfoBool(&ConfigValues::WARN_AS_ERROR));
  m_map.insert("WARN_FORMAT",new InfoString(&ConfigValues::WARN_FORMAT));
  m_map.insert("WARN_LOGFILE",new InfoString(&ConfigValues::WARN_LOGFILE));
  m_map.insert("INPUT",new InfoList(&ConfigValues::INPUT));
  m_map.insert("INPUT_ENCODING",new InfoString(&ConfigValues::INPUT_ENCODING));
  m_map.insert("FILE_PATTERNS",new InfoList(&ConfigValues::FILE_PATTERNS));
  m_map.insert("RECURSIVE",new InfoBool(&ConfigValues::RECURSIVE));
  m_map.insert("EXCLUDE",new InfoList(&ConfigValues::EXCLUDE));
  m_map.insert("EXCLUDE_SYMLINKS",new InfoBool(&ConfigValues::EXCLUDE_SYMLINKS));
  m_map.insert("EXCLUDE_PATTERNS",new InfoList(&ConfigValues::EXCLUDE_PATTERNS));
  m_map.insert("EXCLUDE_SYMBOLS",new InfoList(&ConfigValues::EXCLUDE_SYMBOLS));
  m_map.insert("EXAMPLE_PATH",new InfoList(&ConfigValues::EXAMPLE_PATH));
  m_map.insert("EXAMPLE_PATTERNS",new InfoList(&ConfigValues::EXAMPLE_PATTERNS));
  m_map.insert("EXAMPLE_RECURSIVE",new InfoBool(&ConfigValues::EXAMPLE_RECURSIVE));
  m_map.insert("IMAGE_PATH",new InfoList(&ConfigValues::IMAGE_PATH));
  m_map.insert("INPUT_FILTER",new InfoString(&ConfigValues::INPUT_FILTER));
  m_map.insert("FILTER_PATTERNS",new InfoList(&ConfigValues::FILTER_PATTERNS));
  m_map.insert("FILTER_SOURCE_FILES",new InfoBool(&ConfigValues::FILTER_SOURCE_FILES));
  m_map.insert("FILTER_SOURCE_PATTERNS",new InfoList(&ConfigValues::FILTER_SOURCE_PATTERNS));
  m_map.insert("USE_MDFILE_AS_MAINPAGE",new InfoString(&ConfigValues::USE_MDFILE_AS_MAINPAGE));
  m_map.insert("SOURCE_BROWSER",new InfoBool(&ConfigValues::SOURCE_BROWSER));
  m_map.insert("INLINE_SOURCES",new InfoBool(&ConfigValues::INLINE_SOURCES));
  m_map.insert("STRIP_CODE_COMMENTS",new InfoBool(&ConfigValues::STRIP_CODE_COMMENTS));
  m_map.insert("REFERENCED_BY_RELATION",new InfoBool(&ConfigValues::REFERENCED_BY_RELATION));
  m_map.insert("REFERENCES_RELATION",new InfoBool(&ConfigValues::REFERENCES_RELATION));
  m_map.insert("REFERENCES_LINK_SOURCE",new InfoBool(&ConfigValues::REFERENCES_LINK_SOURCE));
  m_map.insert("SOURCE_TOOLTIPS",new InfoBool(&ConfigValues::SOURCE_TOOLTIPS));
  m_map.insert("USE_HTAGS",new InfoBool(&ConfigValues::USE_HTAGS));
  m_map.insert("VERBATIM_HEADERS",new InfoBool(&ConfigValues::VERBATIM_HEADERS));
#if USE_LIBCLANG
  m_map.insert("CLANG_ASSISTED_PARSING",new InfoBool(&ConfigValues::CLANG_ASSISTED_PARSING));
#endif
#if USE_LIBCLANG
  m_map.insert("CLANG_OPTIONS",new InfoList(&ConfigValues::CLANG_OPTIONS));
#endif
  m_map.insert("ALPHABETICAL_INDEX",new InfoBool(&ConfigValues::ALPHABETICAL_INDEX));
  m_map.insert("COLS_IN_ALPHA_INDEX",new InfoInt(&ConfigValues::COLS_IN_ALPHA_INDEX));
  m_map.insert("IGNORE_PREFIX",new InfoList(&ConfigValues::IGNORE_PREFIX));
  m_map.insert("GENERATE_HTML",new InfoBool(&ConfigValues::GENERATE_HTML));
  m_map.insert("HTML_OUTPUT",new InfoString(&ConfigValues::HTML_OUTPUT));
  m_map.insert("HTML_FILE_EXTENSION",new InfoString(&ConfigValues::HTML_FILE_EXTENSION));
  m_map.insert("HTML_HEADER",new InfoString(&ConfigValues::HTML_HEADER));
  m_map.insert("HTML_FOOTER",new InfoString(&ConfigValues::HTML_FOOTER));
  m_map.insert("HTML_STYLESHEET",new InfoString(&ConfigValues::HTML_STYLESHEET));
  m_map.insert("HTML_EXTRA_STYLESHEET",new InfoList(&ConfigValues::HTML_EXTRA_STYLESHEET));
  m_map.insert("HTML_EXTRA_FILES",new InfoList(&ConfigValues::HTML_EXTRA_FILES));
  m_map.insert("HTML_COLORSTYLE_HUE",new InfoInt(&ConfigValues::HTML_COLORSTYLE_HUE));
  m_map.insert("HTML_COLORSTYLE_SAT",new InfoInt(&ConfigValues::HTML_COLORSTYLE_SAT));
  m_map.insert("HTML_COLORSTYLE_GAMMA",new InfoInt(&ConfigValues::HTML_COLORSTYLE_GAMMA));
  m_map.insert("HTML_TIMESTAMP",new InfoBool(&ConfigValues::HTML_TIMESTAMP));
  m_map.insert("HTML_DYNAMIC_SECTIONS",new InfoBool(&ConfigValues::HTML_DYNAMIC_SECTIONS));
  m_map.insert("HTML_INDEX_NUM_ENTRIES",new InfoInt(&ConfigValues::HTML_INDEX_NUM_ENTRIES));
  m_map.insert("GENERATE_DOCSET",new InfoBool(&ConfigValues::GENERATE_DOCSET));
  m_map.insert("DOCSET_FEEDNAME",new InfoString(&ConfigValues::DOCSET_FEEDNAME));
  m_map.insert("DOCSET_BUNDLE_ID",new InfoString(&ConfigValues::DOCSET_BUNDLE_ID));
  m_map.insert("DOCSET_PUBLISHER_ID",new InfoString(&ConfigValues::DOCSET_PUBLISHER_ID));
  m_map.insert("DOCSET_PUBLISHER_NAME",new InfoString(&ConfigValues::DOCSET_PUBLISHER_NAME));
  m_map.insert("GENERATE_HTMLHELP",new InfoBool(&ConfigValues::GENERATE_HTMLHELP));
  m_map.insert("CHM_FILE",new InfoString(&ConfigValues::CHM_FILE));
  m_map.insert("HHC_LOCATION",new InfoString(&ConfigValues::HHC_LOCATION));
  m_map.insert("GENERATE_CHI",new InfoBool(&ConfigValues::GENERATE_CHI));
  m_map.insert("CHM_INDEX_ENCODING",new InfoString(&ConfigValues::CHM_INDEX_ENCODING));
  m_map.insert("BINARY_TOC",new InfoBool(&ConfigValues::BINARY_TOC));
  m_map.insert("TOC_EXPAND",new InfoBool(&ConfigValues::TOC_EXPAND));
  m_map.insert("GENERATE_QHP",new InfoBool(&ConfigValues::GENERATE_QHP));
  m_map.insert("QCH_FILE",new InfoString(&ConfigValues::QCH_FILE));
  m_map.insert("QHP_NAMESPACE",new InfoString(&ConfigValues::QHP_NAMESPACE));
  m_map.insert("QHP_VIRTUAL_FOLDER",new InfoString(&ConfigValues::QHP_VIRTUAL_FOLDER));
  m_map.insert("QHP_CUST_FILTER_NAME",new InfoString(&ConfigValues::QHP_CUST_FILTER_NAME));
  m_map.insert("QHP_CUST_FILTER_ATTRS",new InfoString(&ConfigValues::QHP_CUST_FILTER_ATTRS));
  m_map.insert("QHP_SECT_FILTER_ATTRS",new InfoString(&ConfigValues::QHP_SECT_FILTER_ATTRS));
  m_map.insert("QHG_LOCATION",new InfoString(&ConfigValues::QHG_LOCATION));
  m_map.insert("GENERATE_ECLIPSEHELP",new InfoBool(&ConfigValues::GENERATE_ECLIPSEHELP));
  m_map.insert("ECLIPSE_DOC_ID",new InfoString(&ConfigValues::ECLIPSE_DOC_ID));
  m_map.insert("DISABLE_INDEX",new InfoBool(&ConfigValues::DISABLE_INDEX));
  m_map.insert("GENERATE_TREEVIEW",new InfoBool(&ConfigValues::GENERATE_TREEVIEW));
  m_map.insert("ENUM_VALUES_PER_LINE",new InfoInt(&ConfigValues::ENUM_VALUES_PER_LINE));
  m_map.insert("TREEVIEW_WIDTH",new InfoInt(&ConfigValues::TREEVIEW_WIDTH));
  m_map.insert("EXT_LINKS_IN_WINDOW",new InfoBool(&ConfigValues::EXT_LINKS_IN_WINDOW));
  m_map.insert("FORMULA_FONTSIZE",new InfoInt(&ConfigValues::FORMULA_FONTSIZE));
  m_map.insert("FORMULA_TRANSPARENT",new InfoBool(&ConfigValues::FORMULA_TRANSPARENT));
  m_map.insert("USE_MATHJAX",new InfoBool(&ConfigValues::USE_MATHJAX));
  m_map.insert("MATHJAX_FORMAT",new InfoString(&ConfigValues::MATHJAX_FORMAT));
  m_map.insert("MATHJAX_RELPATH",new InfoString(&ConfigValues::MATHJAX_RELPATH));
  m_map.insert("MATHJAX_EXTENSIONS",new InfoList(&ConfigValues::MATHJAX_EXTENSIONS));
  m_map.insert("MATHJAX_CODEFILE",new InfoString(&ConfigValues::MATHJAX_CODEFILE));
  m_map.insert("SEARCHENGINE",new InfoBool(&ConfigValues::SEARCHENGINE));
  m_map.insert("SERVER_BASED_SEARCH",new InfoBool(&ConfigValues::SERVER_BASED_SEARCH));
  m_map.insert("EXTERNAL_SEARCH",new InfoBool(&ConfigValues::EXTERNAL_SEARCH));
  m_map.insert("SEARCHENGINE_URL",new InfoString(&ConfigValues::SEARCHENGINE_URL));
  m_map.insert("SEARCHDATA_FILE",new InfoString(&ConfigValues::SEARCHDATA_FILE));
  m_map.insert("EXTERNAL_SEARCH_ID",new InfoString(&ConfigValues::EXTERNAL_SEARCH_ID));
  m_map.insert("EXTRA_SEARCH_MAPPINGS",new InfoList(&ConfigValues::EXTRA_SEARCH_MAPPINGS));
  m_map.insert("GENERATE_LATEX",new InfoBool(&ConfigValues::GENERATE_LATEX));
  m_map.insert("LATEX_OUTPUT",new InfoString(&ConfigValues::LATEX_OUTPUT));
  m_map.insert("LATEX_CMD_NAME",new InfoString(&ConfigValues::LATEX_CMD_NAME));
  m_map.insert("MAKEINDEX_CMD_NAME",new InfoString(&ConfigValues::MAKEINDEX_CMD_NAME));
  m_map.insert("COMPACT_LATEX",new InfoBool(&ConfigValues::COMPACT_LATEX));
  m_map.insert("PAPER_TYPE",new InfoString(&ConfigValues::PAPER_TYPE));
  m_map.insert("EXTRA_PACKAGES",new InfoList(&ConfigValues::EXTRA_PACKAGES));
  m_map.insert("LATEX_HEADER",new InfoString(&ConfigValues::LATEX_HEADER));
  m_map.insert("LATEX_FOOTER",new InfoString(&ConfigValues::LATEX_FOOTER));
  m_map.insert("LATEX_EXTRA_STYLESHEET",new InfoList(&ConfigValues::LATEX_EXTRA_STYLESHEET));
  m_map.insert("LATEX_EXTRA_FILES",new InfoList(&ConfigValues::LATEX_EXTRA_FILES));
  m_map.insert("PDF_HYPERLINKS",new InfoBool(&ConfigValues::PDF_HYPERLINKS));
  m_map.insert("USE_PDFLATEX",new InfoBool(&ConfigValues::USE_PDFLATEX));
  m_map.insert("LATEX_BATCHMODE",new InfoBool(&ConfigValues::LATEX_BATCHMODE));
  m_map.insert("LATEX_HIDE_INDICES",new InfoBool(&ConfigValues::LATEX_HIDE_INDICES));
  m_map.insert("LATEX_SOURCE_CODE",new InfoBool(&ConfigValues::LATEX_SOURCE_CODE));
  m_map.insert("LATEX_BIB_STYLE",new InfoString(&ConfigValues::LATEX_BIB_STYLE));
  m_map.insert("LATEX_TIMESTAMP",new InfoBool(&ConfigValues::LATEX_TIMESTAMP));
  m_map.insert("GENERATE_RTF",new InfoBool(&ConfigValues::GENERATE_RTF));
  m_map.insert("RTF_OUTPUT",new InfoString(&ConfigValues::RTF_OUTPUT));
  m_map.insert("COMPACT_RTF",new InfoBool(&ConfigValues::COMPACT_RTF));
  m_map.insert("RTF_HYPERLINKS",new InfoBool(&ConfigValues::RTF_HYPERLINKS));
  m_map.insert("RTF_STYLESHEET_FILE",new InfoString(&ConfigValues::RTF_STYLESHEET_FILE));
  m_map.insert("RTF_EXTENSIONS_FILE",new InfoString(&ConfigValues::RTF_EXTENSIONS_FILE));
  m_map.insert("RTF_SOURCE_CODE",new InfoBool(&ConfigValues::RTF_SOURCE_CODE));
  m_map.insert("GENERATE_MAN",new InfoBool(&ConfigValues::GENERATE_MAN));
  m_map.insert("MAN_OUTPUT",new InfoString(&ConfigValues::MAN_OUTPUT));
  m_map.insert("MAN_EXTENSION",new InfoString(&ConfigValues::MAN_EXTENSION));
  m_map.insert("MAN_SUBDIR",new InfoString(&ConfigValues::MAN_SUBDIR));
  m_map.insert("MAN_LINKS",new InfoBool(&ConfigValues::MAN_LINKS));
  m_map.insert("GENERATE_XML",new InfoBool(&ConfigValues::GENERATE_XML));
  m_map.insert("XML_OUTPUT",new InfoString(&ConfigValues::XML_OUTPUT));
  m_map.insert("XML_PROGRAMLISTING",new InfoBool(&ConfigValues::XML_PROGRAMLISTING));
  m_map.insert("GENERATE_DOCBOOK",new InfoBool(&ConfigValues::GENERATE_DOCBOOK));
  m_map.insert("DOCBOOK_OUTPUT",new InfoString(&ConfigValues::DOCBOOK_OUTPUT));
  m_map.insert("DOCBOOK_PROGRAMLISTING",new InfoBool(&ConfigValues::DOCBOOK_PROGRAMLISTING));
  m_map.insert("GENERATE_AUTOGEN_DEF",new InfoBool(&ConfigValues::GENERATE_AUTOGEN_DEF));
  m_map.insert("GENERATE_PERLMOD",new InfoBool(&ConfigValues::GENERATE_PERLMOD));
  m_map.insert("PERLMOD_LATEX",new InfoBool(&ConfigValues::PERLMOD_LATEX));
  m_map.insert("PERLMOD_PRETTY",new InfoBool(&ConfigValues::PERLMOD_PRETTY));
  m_map.insert("PERLMOD_MAKEVAR_PREFIX",new InfoString(&ConfigValues::PERLMOD_MAKEVAR_PREFIX));
  m_map.insert("ENABLE_PREPROCESSING",new InfoBool(&ConfigValues::ENABLE_PREPROCESSING));
  m_map.insert("MACRO_EXPANSION",new InfoBool(&ConfigValues::MACRO_EXPANSION));
  m_map.insert("EXPAND_ONLY_PREDEF",new InfoBool(&ConfigValues::EXPAND_ONLY_PREDEF));
  m_map.insert("SEARCH_INCLUDES",new InfoBool(&ConfigValues::SEARCH_INCLUDES));
  m_map.insert("INCLUDE_PATH",new InfoList(&ConfigValues::INCLUDE_PATH));
  m_map.insert("INCLUDE_FILE_PATTERNS",new InfoList(&ConfigValues::INCLUDE_FILE_PATTERNS));
  m_map.insert("PREDEFINED",new InfoList(&ConfigValues::PREDEFINED));
  m_map.insert("EXPAND_AS_DEFINED",new InfoList(&ConfigValues::EXPAND_AS_DEFINED));
  m_map.insert("SKIP_FUNCTION_MACROS",new InfoBool(&ConfigValues::SKIP_FUNCTION_MACROS));
  m_map.insert("TAGFILES",new InfoList(&ConfigValues::TAGFILES));
  m_map.insert("GENERATE_TAGFILE",new InfoString(&ConfigValues::GENERATE_TAGFILE));
  m_map.insert("ALLEXTERNALS",new InfoBool(&ConfigValues::ALLEXTERNALS));
  m_map.insert("EXTERNAL_GROUPS",new InfoBool(&ConfigValues::EXTERNAL_GROUPS));
  m_map.insert("EXTERNAL_PAGES",new InfoBool(&ConfigValues::EXTERNAL_PAGES));
  m_map.insert("PERL_PATH",new InfoString(&ConfigValues::PERL_PATH));
  m_map.insert("CLASS_DIAGRAMS",new InfoBool(&ConfigValues::CLASS_DIAGRAMS));
  m_map.insert("MSCGEN_PATH",new InfoString(&ConfigValues::MSCGEN_PATH));
  m_map.insert("DIA_PATH",new InfoString(&ConfigValues::DIA_PATH));
  m_map.insert("HIDE_UNDOC_RELATIONS",new InfoBool(&ConfigValues::HIDE_UNDOC_RELATIONS));
  m_map.insert("HAVE_DOT",new InfoBool(&ConfigValues::HAVE_DOT));
  m_map.insert("DOT_NUM_THREADS",new InfoInt(&ConfigValues::DOT_NUM_THREADS));
  m_map.insert("DOT_FONTNAME",new InfoString(&ConfigValues::DOT_FONTNAME));
  m_map.insert("DOT_FONTSIZE",new InfoInt(&ConfigValues::DOT_FONTSIZE));
  m_map.insert("DOT_FONTPATH",new InfoString(&ConfigValues::DOT_FONTPATH));
  m_map.insert("CLASS_GRAPH",new InfoBool(&ConfigValues::CLASS_GRAPH));
  m_map.insert("COLLABORATION_GRAPH",new InfoBool(&ConfigValues::COLLABORATION_GRAPH));
  m_map.insert("GROUP_GRAPHS",new InfoBool(&ConfigValues::GROUP_GRAPHS));
  m_map.insert("UML_LOOK",new InfoBool(&ConfigValues::UML_LOOK));
  m_map.insert("UML_LIMIT_NUM_FIELDS",new InfoInt(&ConfigValues::UML_LIMIT_NUM_FIELDS));
  m_map.insert("TEMPLATE_RELATIONS",new InfoBool(&ConfigValues::TEMPLATE_RELATIONS));
  m_map.insert("INCLUDE_GRAPH",new InfoBool(&ConfigValues::INCLUDE_GRAPH));
  m_map.insert("INCLUDED_BY_GRAPH",new InfoBool(&ConfigValues::INCLUDED_BY_GRAPH));
  m_map.insert("CALL_GRAPH",new InfoBool(&ConfigValues::CALL_GRAPH));
  m_map.insert("CALLER_GRAPH",new InfoBool(&ConfigValues::CALLER_GRAPH));
  m_map.insert("GRAPHICAL_HIERARCHY",new InfoBool(&ConfigValues::GRAPHICAL_HIERARCHY));
  m_map.insert("DIRECTORY_GRAPH",new InfoBool(&ConfigValues::DIRECTORY_GRAPH));
  m_map.insert("DOT_IMAGE_FORMAT",new InfoString(&ConfigValues::DOT_IMAGE_FORMAT));
  m_map.insert("INTERACTIVE_SVG",new InfoBool(&ConfigValues::INTERACTIVE_SVG));
  m_map.insert("DOT_PATH",new InfoString(&ConfigValues::DOT_PATH));
  m_map.insert("DOTFILE_DIRS",new InfoList(&ConfigValues::DOTFILE_DIRS));
  m_map.insert("MSCFILE_DIRS",new InfoList(&ConfigValues::MSCFILE_DIRS));
  m_map.insert("DIAFILE_DIRS",new InfoList(&ConfigValues::DIAFILE_DIRS));
  m_map.insert("PLANTUML_JAR_PATH",new InfoString(&ConfigValues::PLANTUML_JAR_PATH));
  m_map.insert("PLANTUML_CFG_FILE",new InfoString(&ConfigValues::PLANTUML_CFG_FILE));
  m_map.insert("PLANTUML_INCLUDE_PATH",new InfoList(&ConfigValues::PLANTUML_INCLUDE_PATH));
  m_map.insert("DOT_GRAPH_MAX_NODES",new InfoInt(&ConfigValues::DOT_GRAPH_MAX_NODES));
  m_map.insert("MAX_DOT_GRAPH_DEPTH",new InfoInt(&ConfigValues::MAX_DOT_GRAPH_DEPTH));
  m_map.insert("DOT_TRANSPARENT",new InfoBool(&ConfigValues::DOT_TRANSPARENT));
  m_map.insert("DOT_MULTI_TARGETS",new InfoBool(&ConfigValues::DOT_MULTI_TARGETS));
  m_map.insert("GENERATE_LEGEND",new InfoBool(&ConfigValues::GENERATE_LEGEND));
  m_map.insert("DOT_CLEANUP",new InfoBool(&ConfigValues::DOT_CLEANUP));
}

void ConfigValues::init()
{
  DOXYFILE_ENCODING         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOXYFILE_ENCODING");
  PROJECT_NAME              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_NAME");
  PROJECT_NUMBER            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_NUMBER");
  PROJECT_BRIEF             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_BRIEF");
  PROJECT_LOGO              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PROJECT_LOGO");
  OUTPUT_DIRECTORY          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"OUTPUT_DIRECTORY");
  CREATE_SUBDIRS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CREATE_SUBDIRS");
  ALLOW_UNICODE_NAMES       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALLOW_UNICODE_NAMES");
  OUTPUT_LANGUAGE           = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"OUTPUT_LANGUAGE");
  BRIEF_MEMBER_DESC         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"BRIEF_MEMBER_DESC");
  REPEAT_BRIEF              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REPEAT_BRIEF");
  ABBREVIATE_BRIEF          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"ABBREVIATE_BRIEF");
  ALWAYS_DETAILED_SEC       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALWAYS_DETAILED_SEC");
  INLINE_INHERITED_MEMB     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_INHERITED_MEMB");
  FULL_PATH_NAMES           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FULL_PATH_NAMES");
  STRIP_FROM_PATH           = ConfigImpl::instance()->getList(__FILE__,__LINE__,"STRIP_FROM_PATH");
  STRIP_FROM_INC_PATH       = ConfigImpl::instance()->getList(__FILE__,__LINE__,"STRIP_FROM_INC_PATH");
  SHORT_NAMES               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHORT_NAMES");
  JAVADOC_AUTOBRIEF         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"JAVADOC_AUTOBRIEF");
  QT_AUTOBRIEF              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"QT_AUTOBRIEF");
  MULTILINE_CPP_IS_BRIEF    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MULTILINE_CPP_IS_BRIEF");
  INHERIT_DOCS              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INHERIT_DOCS");
  SEPARATE_MEMBER_PAGES     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SEPARATE_MEMBER_PAGES");
  TAB_SIZE                  = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"TAB_SIZE");
  ALIASES                   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"ALIASES");
  TCL_SUBST                 = ConfigImpl::instance()->getList(__FILE__,__LINE__,"TCL_SUBST");
  OPTIMIZE_OUTPUT_FOR_C     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_FOR_C");
  OPTIMIZE_OUTPUT_JAVA      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_JAVA");
  OPTIMIZE_FOR_FORTRAN      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_FOR_FORTRAN");
  OPTIMIZE_OUTPUT_VHDL      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_VHDL");
  OPTIMIZE_OUTPUT_FOR_PROLOG = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"OPTIMIZE_OUTPUT_FOR_PROLOG");
  EXTENSION_MAPPING         = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXTENSION_MAPPING");
  MARKDOWN_SUPPORT          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MARKDOWN_SUPPORT");
  TOC_INCLUDE_HEADINGS      = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"TOC_INCLUDE_HEADINGS");
  AUTOLINK_SUPPORT          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"AUTOLINK_SUPPORT");
  BUILTIN_STL_SUPPORT       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"BUILTIN_STL_SUPPORT");
  CPP_CLI_SUPPORT           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CPP_CLI_SUPPORT");
  SIP_SUPPORT               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SIP_SUPPORT");
  IDL_PROPERTY_SUPPORT      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"IDL_PROPERTY_SUPPORT");
  DISTRIBUTE_GROUP_DOC      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DISTRIBUTE_GROUP_DOC");
  GROUP_NESTED_COMPOUNDS    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GROUP_NESTED_COMPOUNDS");
  SUBGROUPING               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SUBGROUPING");
  INLINE_GROUPED_CLASSES    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_GROUPED_CLASSES");
  INLINE_SIMPLE_STRUCTS     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_SIMPLE_STRUCTS");
  TYPEDEF_HIDES_STRUCT      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"TYPEDEF_HIDES_STRUCT");
  LOOKUP_CACHE_SIZE         = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"LOOKUP_CACHE_SIZE");
  EXTRACT_ALL               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_ALL");
  EXTRACT_PRIVATE           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_PRIVATE");
  EXTRACT_PACKAGE           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_PACKAGE");
  EXTRACT_STATIC            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_STATIC");
  EXTRACT_LOCAL_CLASSES     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_LOCAL_CLASSES");
  EXTRACT_LOCAL_METHODS     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_LOCAL_METHODS");
  EXTRACT_ANON_NSPACES      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTRACT_ANON_NSPACES");
  HIDE_UNDOC_MEMBERS        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_UNDOC_MEMBERS");
  HIDE_UNDOC_CLASSES        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_UNDOC_CLASSES");
  HIDE_FRIEND_COMPOUNDS     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_FRIEND_COMPOUNDS");
  HIDE_IN_BODY_DOCS         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_IN_BODY_DOCS");
  INTERNAL_DOCS             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INTERNAL_DOCS");
  CASE_SENSE_NAMES          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CASE_SENSE_NAMES");
  HIDE_SCOPE_NAMES          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_SCOPE_NAMES");
  HIDE_COMPOUND_REFERENCE   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_COMPOUND_REFERENCE");
  SHOW_INCLUDE_FILES        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_INCLUDE_FILES");
  SHOW_GROUPED_MEMB_INC     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_GROUPED_MEMB_INC");
  FORCE_LOCAL_INCLUDES      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FORCE_LOCAL_INCLUDES");
  INLINE_INFO               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_INFO");
  SORT_MEMBER_DOCS          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_MEMBER_DOCS");
  SORT_BRIEF_DOCS           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_BRIEF_DOCS");
  SORT_MEMBERS_CTORS_1ST    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_MEMBERS_CTORS_1ST");
  SORT_GROUP_NAMES          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_GROUP_NAMES");
  SORT_BY_SCOPE_NAME        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SORT_BY_SCOPE_NAME");
  STRICT_PROTO_MATCHING     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"STRICT_PROTO_MATCHING");
  GENERATE_TODOLIST         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_TODOLIST");
  GENERATE_TESTLIST         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_TESTLIST");
  GENERATE_BUGLIST          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_BUGLIST");
  GENERATE_DEPRECATEDLIST   = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_DEPRECATEDLIST");
  ENABLED_SECTIONS          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"ENABLED_SECTIONS");
  MAX_INITIALIZER_LINES     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"MAX_INITIALIZER_LINES");
  SHOW_USED_FILES           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_USED_FILES");
  SHOW_FILES                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_FILES");
  SHOW_NAMESPACES           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SHOW_NAMESPACES");
  FILE_VERSION_FILTER       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"FILE_VERSION_FILTER");
  LAYOUT_FILE               = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LAYOUT_FILE");
  CITE_BIB_FILES            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"CITE_BIB_FILES");
  QUIET                     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"QUIET");
  WARNINGS                  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARNINGS");
  WARN_IF_UNDOCUMENTED      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_IF_UNDOCUMENTED");
  WARN_IF_DOC_ERROR         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_IF_DOC_ERROR");
  WARN_NO_PARAMDOC          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_NO_PARAMDOC");
  WARN_AS_ERROR             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"WARN_AS_ERROR");
  WARN_FORMAT               = ConfigImpl::instance()->getString(__FILE__,__LINE__,"WARN_FORMAT");
  WARN_LOGFILE              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"WARN_LOGFILE");
  INPUT                     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INPUT");
  INPUT_ENCODING            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"INPUT_ENCODING");
  FILE_PATTERNS             = ConfigImpl::instance()->getList(__FILE__,__LINE__,"FILE_PATTERNS");
  RECURSIVE                 = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"RECURSIVE");
  EXCLUDE                   = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXCLUDE");
  EXCLUDE_SYMLINKS          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXCLUDE_SYMLINKS");
  EXCLUDE_PATTERNS          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXCLUDE_PATTERNS");
  EXCLUDE_SYMBOLS           = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXCLUDE_SYMBOLS");
  EXAMPLE_PATH              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXAMPLE_PATH");
  EXAMPLE_PATTERNS          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXAMPLE_PATTERNS");
  EXAMPLE_RECURSIVE         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXAMPLE_RECURSIVE");
  IMAGE_PATH                = ConfigImpl::instance()->getList(__FILE__,__LINE__,"IMAGE_PATH");
  INPUT_FILTER              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"INPUT_FILTER");
  FILTER_PATTERNS           = ConfigImpl::instance()->getList(__FILE__,__LINE__,"FILTER_PATTERNS");
  FILTER_SOURCE_FILES       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FILTER_SOURCE_FILES");
  FILTER_SOURCE_PATTERNS    = ConfigImpl::instance()->getList(__FILE__,__LINE__,"FILTER_SOURCE_PATTERNS");
  USE_MDFILE_AS_MAINPAGE    = ConfigImpl::instance()->getString(__FILE__,__LINE__,"USE_MDFILE_AS_MAINPAGE");
  SOURCE_BROWSER            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SOURCE_BROWSER");
  INLINE_SOURCES            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INLINE_SOURCES");
  STRIP_CODE_COMMENTS       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"STRIP_CODE_COMMENTS");
  REFERENCED_BY_RELATION    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REFERENCED_BY_RELATION");
  REFERENCES_RELATION       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REFERENCES_RELATION");
  REFERENCES_LINK_SOURCE    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"REFERENCES_LINK_SOURCE");
  SOURCE_TOOLTIPS           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SOURCE_TOOLTIPS");
  USE_HTAGS                 = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"USE_HTAGS");
  VERBATIM_HEADERS          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"VERBATIM_HEADERS");
#if USE_LIBCLANG
  CLANG_ASSISTED_PARSING    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CLANG_ASSISTED_PARSING");
#endif
#if USE_LIBCLANG
  CLANG_OPTIONS             = ConfigImpl::instance()->getList(__FILE__,__LINE__,"CLANG_OPTIONS");
#endif
  ALPHABETICAL_INDEX        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALPHABETICAL_INDEX");
  COLS_IN_ALPHA_INDEX       = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"COLS_IN_ALPHA_INDEX");
  IGNORE_PREFIX             = ConfigImpl::instance()->getList(__FILE__,__LINE__,"IGNORE_PREFIX");
  GENERATE_HTML             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_HTML");
  HTML_OUTPUT               = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_OUTPUT");
  HTML_FILE_EXTENSION       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_FILE_EXTENSION");
  HTML_HEADER               = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_HEADER");
  HTML_FOOTER               = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_FOOTER");
  HTML_STYLESHEET           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HTML_STYLESHEET");
  HTML_EXTRA_STYLESHEET     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"HTML_EXTRA_STYLESHEET");
  HTML_EXTRA_FILES          = ConfigImpl::instance()->getList(__FILE__,__LINE__,"HTML_EXTRA_FILES");
  HTML_COLORSTYLE_HUE       = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_COLORSTYLE_HUE");
  HTML_COLORSTYLE_SAT       = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_COLORSTYLE_SAT");
  HTML_COLORSTYLE_GAMMA     = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_COLORSTYLE_GAMMA");
  HTML_TIMESTAMP            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HTML_TIMESTAMP");
  HTML_DYNAMIC_SECTIONS     = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HTML_DYNAMIC_SECTIONS");
  HTML_INDEX_NUM_ENTRIES    = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"HTML_INDEX_NUM_ENTRIES");
  GENERATE_DOCSET           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_DOCSET");
  DOCSET_FEEDNAME           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_FEEDNAME");
  DOCSET_BUNDLE_ID          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_BUNDLE_ID");
  DOCSET_PUBLISHER_ID       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_PUBLISHER_ID");
  DOCSET_PUBLISHER_NAME     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCSET_PUBLISHER_NAME");
  GENERATE_HTMLHELP         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_HTMLHELP");
  CHM_FILE                  = ConfigImpl::instance()->getString(__FILE__,__LINE__,"CHM_FILE");
  HHC_LOCATION              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"HHC_LOCATION");
  GENERATE_CHI              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_CHI");
  CHM_INDEX_ENCODING        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"CHM_INDEX_ENCODING");
  BINARY_TOC                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"BINARY_TOC");
  TOC_EXPAND                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"TOC_EXPAND");
  GENERATE_QHP              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_QHP");
  QCH_FILE                  = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QCH_FILE");
  QHP_NAMESPACE             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_NAMESPACE");
  QHP_VIRTUAL_FOLDER        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_VIRTUAL_FOLDER");
  QHP_CUST_FILTER_NAME      = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_CUST_FILTER_NAME");
  QHP_CUST_FILTER_ATTRS     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_CUST_FILTER_ATTRS");
  QHP_SECT_FILTER_ATTRS     = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHP_SECT_FILTER_ATTRS");
  QHG_LOCATION              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"QHG_LOCATION");
  GENERATE_ECLIPSEHELP      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_ECLIPSEHELP");
  ECLIPSE_DOC_ID            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"ECLIPSE_DOC_ID");
  DISABLE_INDEX             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DISABLE_INDEX");
  GENERATE_TREEVIEW         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_TREEVIEW");
  ENUM_VALUES_PER_LINE      = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"ENUM_VALUES_PER_LINE");
  TREEVIEW_WIDTH            = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"TREEVIEW_WIDTH");
  EXT_LINKS_IN_WINDOW       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXT_LINKS_IN_WINDOW");
  FORMULA_FONTSIZE          = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"FORMULA_FONTSIZE");
  FORMULA_TRANSPARENT       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"FORMULA_TRANSPARENT");
  USE_MATHJAX               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"USE_MATHJAX");
  MATHJAX_FORMAT            = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"MATHJAX_FORMAT");
  MATHJAX_RELPATH           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MATHJAX_RELPATH");
  MATHJAX_EXTENSIONS        = ConfigImpl::instance()->getList(__FILE__,__LINE__,"MATHJAX_EXTENSIONS");
  MATHJAX_CODEFILE          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MATHJAX_CODEFILE");
  SEARCHENGINE              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SEARCHENGINE");
  SERVER_BASED_SEARCH       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SERVER_BASED_SEARCH");
  EXTERNAL_SEARCH           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTERNAL_SEARCH");
  SEARCHENGINE_URL          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"SEARCHENGINE_URL");
  SEARCHDATA_FILE           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"SEARCHDATA_FILE");
  EXTERNAL_SEARCH_ID        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"EXTERNAL_SEARCH_ID");
  EXTRA_SEARCH_MAPPINGS     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXTRA_SEARCH_MAPPINGS");
  GENERATE_LATEX            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_LATEX");
  LATEX_OUTPUT              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_OUTPUT");
  LATEX_CMD_NAME            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_CMD_NAME");
  MAKEINDEX_CMD_NAME        = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAKEINDEX_CMD_NAME");
  COMPACT_LATEX             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"COMPACT_LATEX");
  PAPER_TYPE                = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"PAPER_TYPE");
  EXTRA_PACKAGES            = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXTRA_PACKAGES");
  LATEX_HEADER              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_HEADER");
  LATEX_FOOTER              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_FOOTER");
  LATEX_EXTRA_STYLESHEET    = ConfigImpl::instance()->getList(__FILE__,__LINE__,"LATEX_EXTRA_STYLESHEET");
  LATEX_EXTRA_FILES         = ConfigImpl::instance()->getList(__FILE__,__LINE__,"LATEX_EXTRA_FILES");
  PDF_HYPERLINKS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PDF_HYPERLINKS");
  USE_PDFLATEX              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"USE_PDFLATEX");
  LATEX_BATCHMODE           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"LATEX_BATCHMODE");
  LATEX_HIDE_INDICES        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"LATEX_HIDE_INDICES");
  LATEX_SOURCE_CODE         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"LATEX_SOURCE_CODE");
  LATEX_BIB_STYLE           = ConfigImpl::instance()->getString(__FILE__,__LINE__,"LATEX_BIB_STYLE");
  LATEX_TIMESTAMP           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"LATEX_TIMESTAMP");
  GENERATE_RTF              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_RTF");
  RTF_OUTPUT                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"RTF_OUTPUT");
  COMPACT_RTF               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"COMPACT_RTF");
  RTF_HYPERLINKS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"RTF_HYPERLINKS");
  RTF_STYLESHEET_FILE       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"RTF_STYLESHEET_FILE");
  RTF_EXTENSIONS_FILE       = ConfigImpl::instance()->getString(__FILE__,__LINE__,"RTF_EXTENSIONS_FILE");
  RTF_SOURCE_CODE           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"RTF_SOURCE_CODE");
  GENERATE_MAN              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_MAN");
  MAN_OUTPUT                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAN_OUTPUT");
  MAN_EXTENSION             = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAN_EXTENSION");
  MAN_SUBDIR                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MAN_SUBDIR");
  MAN_LINKS                 = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MAN_LINKS");
  GENERATE_XML              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_XML");
  XML_OUTPUT                = ConfigImpl::instance()->getString(__FILE__,__LINE__,"XML_OUTPUT");
  XML_PROGRAMLISTING        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"XML_PROGRAMLISTING");
  GENERATE_DOCBOOK          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_DOCBOOK");
  DOCBOOK_OUTPUT            = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOCBOOK_OUTPUT");
  DOCBOOK_PROGRAMLISTING    = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DOCBOOK_PROGRAMLISTING");
  GENERATE_AUTOGEN_DEF      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_AUTOGEN_DEF");
  GENERATE_PERLMOD          = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_PERLMOD");
  PERLMOD_LATEX             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PERLMOD_LATEX");
  PERLMOD_PRETTY            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"PERLMOD_PRETTY");
  PERLMOD_MAKEVAR_PREFIX    = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PERLMOD_MAKEVAR_PREFIX");
  ENABLE_PREPROCESSING      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ENABLE_PREPROCESSING");
  MACRO_EXPANSION           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"MACRO_EXPANSION");
  EXPAND_ONLY_PREDEF        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXPAND_ONLY_PREDEF");
  SEARCH_INCLUDES           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SEARCH_INCLUDES");
  INCLUDE_PATH              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INCLUDE_PATH");
  INCLUDE_FILE_PATTERNS     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"INCLUDE_FILE_PATTERNS");
  PREDEFINED                = ConfigImpl::instance()->getList(__FILE__,__LINE__,"PREDEFINED");
  EXPAND_AS_DEFINED         = ConfigImpl::instance()->getList(__FILE__,__LINE__,"EXPAND_AS_DEFINED");
  SKIP_FUNCTION_MACROS      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"SKIP_FUNCTION_MACROS");
  TAGFILES                  = ConfigImpl::instance()->getList(__FILE__,__LINE__,"TAGFILES");
  GENERATE_TAGFILE          = ConfigImpl::instance()->getString(__FILE__,__LINE__,"GENERATE_TAGFILE");
  ALLEXTERNALS              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"ALLEXTERNALS");
  EXTERNAL_GROUPS           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTERNAL_GROUPS");
  EXTERNAL_PAGES            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"EXTERNAL_PAGES");
  PERL_PATH                 = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PERL_PATH");
  CLASS_DIAGRAMS            = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CLASS_DIAGRAMS");
  MSCGEN_PATH               = ConfigImpl::instance()->getString(__FILE__,__LINE__,"MSCGEN_PATH");
  DIA_PATH                  = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DIA_PATH");
  HIDE_UNDOC_RELATIONS      = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HIDE_UNDOC_RELATIONS");
  HAVE_DOT                  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"HAVE_DOT");
  DOT_NUM_THREADS           = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DOT_NUM_THREADS");
  DOT_FONTNAME              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_FONTNAME");
  DOT_FONTSIZE              = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DOT_FONTSIZE");
  DOT_FONTPATH              = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_FONTPATH");
  CLASS_GRAPH               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CLASS_GRAPH");
  COLLABORATION_GRAPH       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"COLLABORATION_GRAPH");
  GROUP_GRAPHS              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GROUP_GRAPHS");
  UML_LOOK                  = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"UML_LOOK");
  UML_LIMIT_NUM_FIELDS      = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"UML_LIMIT_NUM_FIELDS");
  TEMPLATE_RELATIONS        = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"TEMPLATE_RELATIONS");
  INCLUDE_GRAPH             = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INCLUDE_GRAPH");
  INCLUDED_BY_GRAPH         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INCLUDED_BY_GRAPH");
  CALL_GRAPH                = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CALL_GRAPH");
  CALLER_GRAPH              = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"CALLER_GRAPH");
  GRAPHICAL_HIERARCHY       = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GRAPHICAL_HIERARCHY");
  DIRECTORY_GRAPH           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DIRECTORY_GRAPH");
  DOT_IMAGE_FORMAT          = ConfigImpl::instance()->getEnum(__FILE__,__LINE__,"DOT_IMAGE_FORMAT");
  INTERACTIVE_SVG           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"INTERACTIVE_SVG");
  DOT_PATH                  = ConfigImpl::instance()->getString(__FILE__,__LINE__,"DOT_PATH");
  DOTFILE_DIRS              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"DOTFILE_DIRS");
  MSCFILE_DIRS              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"MSCFILE_DIRS");
  DIAFILE_DIRS              = ConfigImpl::instance()->getList(__FILE__,__LINE__,"DIAFILE_DIRS");
  PLANTUML_JAR_PATH         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PLANTUML_JAR_PATH");
  PLANTUML_CFG_FILE         = ConfigImpl::instance()->getString(__FILE__,__LINE__,"PLANTUML_CFG_FILE");
  PLANTUML_INCLUDE_PATH     = ConfigImpl::instance()->getList(__FILE__,__LINE__,"PLANTUML_INCLUDE_PATH");
  DOT_GRAPH_MAX_NODES       = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"DOT_GRAPH_MAX_NODES");
  MAX_DOT_GRAPH_DEPTH       = ConfigImpl::instance()->getInt(__FILE__,__LINE__,"MAX_DOT_GRAPH_DEPTH");
  DOT_TRANSPARENT           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DOT_TRANSPARENT");
  DOT_MULTI_TARGETS         = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DOT_MULTI_TARGETS");
  GENERATE_LEGEND           = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"GENERATE_LEGEND");
  DOT_CLEANUP               = ConfigImpl::instance()->getBool(__FILE__,__LINE__,"DOT_CLEANUP");
}
